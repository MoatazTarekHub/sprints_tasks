
CarControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000cea  00000d7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800068  00800068  00000d86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020db  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8f  00000000  00000000  0000311f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013fa  00000000  00000000  00003bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000648  00000000  00000000  00004fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000db9  00000000  00000000  000055f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014cd  00000000  00000000  000063a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00007876  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_1>
   8:	0c 94 89 04 	jmp	0x912	; 0x912 <__vector_2>
   c:	0c 94 b2 04 	jmp	0x964	; 0x964 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__vector_6>
  1c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__vector_7>
  20:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__vector_8>
  24:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <main>
  8a:	0c 94 73 06 	jmp	0xce6	; 0xce6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PWMButton>:
static volatile sint8_t gMotorButton = -1;


void PWMButton(void)
{
	if(gPWMButton == 0)
  92:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gPWMButton>
  96:	81 11       	cpse	r24, r1
  98:	09 c0       	rjmp	.+18     	; 0xac <PWMButton+0x1a>
	{
		gPWMState = 1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gPWMState>
		gPWMButton++;
  a0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gPWMButton>
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gPWMButton>
  aa:	08 95       	ret
	}
	else if(gPWMButton == 1)
  ac:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gPWMButton>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	49 f4       	brne	.+18     	; 0xc6 <PWMButton+0x34>
	{
		gPWMState = 2;
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gPWMState>
		gPWMButton++;
  ba:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gPWMButton>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gPWMButton>
  c4:	08 95       	ret
	}
	else if(gPWMButton == 2)
  c6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gPWMButton>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	49 f4       	brne	.+18     	; 0xe0 <PWMButton+0x4e>
	{
		gPWMState = 3;
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gPWMState>
		gPWMButton++;
  d4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gPWMButton>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gPWMButton>
  de:	08 95       	ret
	}
	else if(gPWMButton == 3)
  e0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gPWMButton>
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	29 f4       	brne	.+10     	; 0xf2 <PWMButton+0x60>
	{
		gPWMState = 4;
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gPWMState>
		gPWMButton=0;
  ee:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <gPWMButton>
  f2:	08 95       	ret

000000f4 <MotorButton>:
}


void MotorButton(void)
{
	if(gMotorButton == 0)
  f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f8:	81 11       	cpse	r24, r1
  fa:	04 c0       	rjmp	.+8      	; 0x104 <MotorButton+0x10>
	{
		gMotorState = 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 102:	08 95       	ret
		
	}
	else if(gMotorButton == 1)
 104:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	19 f4       	brne	.+6      	; 0x112 <MotorButton+0x1e>
	{
		gMotorState = 2;
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 112:	08 95       	ret

00000114 <Car_init>:


void Car_init(void)
{
	/* for switch0 */
	DIO_voidSetPinDirection(PORT_D, PIN2, INPUT);
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
	DIO_voidInpullUp(PORT_D, PIN2);
 11e:	62 e0       	ldi	r22, 0x02	; 2
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 8d 03 	call	0x71a	; 0x71a <DIO_voidInpullUp>
	/* Switch1 */
	DIO_voidSetPinDirection(PORT_D, PIN3, INPUT);
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	63 e0       	ldi	r22, 0x03	; 3
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
	DIO_voidInpullUp(PORT_D, PIN3);
 130:	63 e0       	ldi	r22, 0x03	; 3
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	0e 94 8d 03 	call	0x71a	; 0x71a <DIO_voidInpullUp>
	
	/* switch 2*/
	DIO_voidSetPinDirection(PORT_C, PIN0, INPUT);
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
	DIO_voidInpullUp(PORT_C, PIN0);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 8d 03 	call	0x71a	; 0x71a <DIO_voidInpullUp>
	
	/* switch 3*/
	DIO_voidSetPinDirection(PORT_C, PIN1, INPUT);
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
	DIO_voidInpullUp(PORT_C, PIN1);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 8d 03 	call	0x71a	; 0x71a <DIO_voidInpullUp>
	
	
	DIO_voidSetPinDirection(PORT_B, PIN3, OUTPUT);
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>

	
	EXTI_ENEnable(EXTI_INT0);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 db 03 	call	0x7b6	; 0x7b6 <EXTI_ENEnable>
	EXTI_ENTriggerEdge(EXTI_INT0, FALLING_EDGE);
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EXTI_ENTriggerEdge>
	EXTI_ENEnable(EXTI_INT1);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 db 03 	call	0x7b6	; 0x7b6 <EXTI_ENEnable>
	EXTI_ENTriggerEdge(EXTI_INT1, FALLING_EDGE);
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EXTI_ENTriggerEdge>
	
	EXTI_SetCallBack(EXTI_INT0, PWMButton);
 182:	69 e4       	ldi	r22, 0x49	; 73
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 46 04 	call	0x88c	; 0x88c <EXTI_SetCallBack>
	EXTI_SetCallBack(EXTI_INT1, MotorButton);
 18c:	6a e7       	ldi	r22, 0x7A	; 122
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 46 04 	call	0x88c	; 0x88c <EXTI_SetCallBack>
	
	Timer0_Init(TIMER0_PHASECORRECT_MODE, TIMER0_SCALER_8, OCO_INVERTING);
 196:	43 e0       	ldi	r20, 0x03	; 3
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Timer0_Init>
	
	MOTOR_voidInit();
 1a0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <MOTOR_voidInit>
 1a4:	08 95       	ret

000001a6 <Car_Control>:
}

void Car_Control(void)
{
	if(SWITCH_u8GetState(SWITCH0))
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 35 02 	call	0x46a	; 0x46a <SWITCH_u8GetState>
 1ac:	88 23       	and	r24, r24
 1ae:	d9 f1       	breq	.+118    	; 0x226 <Car_Control+0x80>
	{
		if(gPWMState == FORWARD_30)
 1b0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <gPWMState>
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	31 f4       	brne	.+12     	; 0x1c4 <Car_Control+0x1e>
		{
			MOTOR_voidGeneratePWM(30);
 1b8:	8e e1       	ldi	r24, 0x1E	; 30
 1ba:	0e 94 17 02 	call	0x42e	; 0x42e <MOTOR_voidGeneratePWM>
			gMotorButton = MOTOR_FORWARD;
 1be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c2:	31 c0       	rjmp	.+98     	; 0x226 <Car_Control+0x80>
		}
		else if(gPWMState == FORWARD_60)
 1c4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <gPWMState>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	31 f4       	brne	.+12     	; 0x1d8 <Car_Control+0x32>
		{
			MOTOR_voidGeneratePWM(60);
 1cc:	8c e3       	ldi	r24, 0x3C	; 60
 1ce:	0e 94 17 02 	call	0x42e	; 0x42e <MOTOR_voidGeneratePWM>
			gMotorButton = MOTOR_FORWARD;
 1d2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d6:	27 c0       	rjmp	.+78     	; 0x226 <Car_Control+0x80>
		}
		else if(gPWMState == FORWARD_90)
 1d8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <gPWMState>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	31 f4       	brne	.+12     	; 0x1ec <Car_Control+0x46>
		{
			MOTOR_voidGeneratePWM(90);
 1e0:	8a e5       	ldi	r24, 0x5A	; 90
 1e2:	0e 94 17 02 	call	0x42e	; 0x42e <MOTOR_voidGeneratePWM>
			gMotorButton = MOTOR_FORWARD;
 1e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ea:	1d c0       	rjmp	.+58     	; 0x226 <Car_Control+0x80>
		}
		else if(gPWMState == BACKWARD_30)
 1ec:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <gPWMState>
 1f0:	84 30       	cpi	r24, 0x04	; 4
 1f2:	c9 f4       	brne	.+50     	; 0x226 <Car_Control+0x80>
		{
			MOTOR_voidGeneratePWM(30);
 1f4:	8e e1       	ldi	r24, 0x1E	; 30
 1f6:	0e 94 17 02 	call	0x42e	; 0x42e <MOTOR_voidGeneratePWM>
			gMotorButton = MOTOR_BACKWARD;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 200:	12 c0       	rjmp	.+36     	; 0x226 <Car_Control+0x80>
	}
	while(SWITCH_u8GetState(SWITCH1) == PRESSED && gMotorState >= 0)
	{
		if(gMotorState == 1)
		{
			MOTOR_voidRotateClkWise(RIGHTMOTOR_ON, LEFTMOTOR_ON);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 99 01 	call	0x332	; 0x332 <MOTOR_voidRotateClkWise>
			gMotorButton = MOTOR_FORWARD;
 20a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 20e:	0b c0       	rjmp	.+22     	; 0x226 <Car_Control+0x80>
		}
		else if(gMotorState == 2)
 210:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	39 f4       	brne	.+14     	; 0x226 <Car_Control+0x80>
		{
			MOTOR_voidRotateAntiClkWise(RIGHTMOTOR_ON, LEFTMOTOR_ON);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MOTOR_voidRotateAntiClkWise>
			gMotorButton= MOTOR_BACKWARD ;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		{
			MOTOR_voidGeneratePWM(30);
			gMotorButton = MOTOR_BACKWARD;
		}
	}
	while(SWITCH_u8GetState(SWITCH1) == PRESSED && gMotorState >= 0)
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 35 02 	call	0x46a	; 0x46a <SWITCH_u8GetState>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	d1 f4       	brne	.+52     	; 0x264 <Car_Control+0xbe>
 230:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
	{
		if(gMotorState == 1)
 234:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	51 f7       	brne	.-44     	; 0x210 <Car_Control+0x6a>
 23c:	e2 cf       	rjmp	.-60     	; 0x202 <Car_Control+0x5c>
			gMotorButton= MOTOR_BACKWARD ;
		}
	}
	while(SWITCH_u8GetState(SWITCH2) == PRESSED && gMotorState > 0)
	{
		MOTOR_voidGeneratePWM(30);
 23e:	8e e1       	ldi	r24, 0x1E	; 30
 240:	0e 94 17 02 	call	0x42e	; 0x42e <MOTOR_voidGeneratePWM>
		if(gMotorState == 1)
 244:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	21 f4       	brne	.+8      	; 0x254 <Car_Control+0xae>
		{
			MOTOR_voidRotateClkWise(RIGHTMOTOR_ON, LEFTMOTOR_OFF);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	0e 94 99 01 	call	0x332	; 0x332 <MOTOR_voidRotateClkWise>
 252:	08 c0       	rjmp	.+16     	; 0x264 <Car_Control+0xbe>
		}
		else if(gMotorState == 2)
 254:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	21 f4       	brne	.+8      	; 0x264 <Car_Control+0xbe>
		{
			MOTOR_voidRotateAntiClkWise(RIGHTMOTOR_ON, LEFTMOTOR_OFF);
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MOTOR_voidRotateAntiClkWise>
		{
			MOTOR_voidRotateAntiClkWise(RIGHTMOTOR_ON, LEFTMOTOR_ON);
			gMotorButton= MOTOR_BACKWARD ;
		}
	}
	while(SWITCH_u8GetState(SWITCH2) == PRESSED && gMotorState > 0)
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 35 02 	call	0x46a	; 0x46a <SWITCH_u8GetState>
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	c9 f4       	brne	.+50     	; 0x2a0 <Car_Control+0xfa>
 26e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 272:	81 11       	cpse	r24, r1
 274:	e4 cf       	rjmp	.-56     	; 0x23e <Car_Control+0x98>
 276:	14 c0       	rjmp	.+40     	; 0x2a0 <Car_Control+0xfa>
			MOTOR_voidRotateAntiClkWise(RIGHTMOTOR_ON, LEFTMOTOR_OFF);
		}
	}
	while(SWITCH_u8GetState(SWITCH3) == PRESSED && gMotorState > 0 )
	{
		MOTOR_voidGeneratePWM(30);
 278:	8e e1       	ldi	r24, 0x1E	; 30
 27a:	0e 94 17 02 	call	0x42e	; 0x42e <MOTOR_voidGeneratePWM>
		if(gMotorState == 1)
 27e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	29 f4       	brne	.+10     	; 0x290 <Car_Control+0xea>
		{
			MOTOR_voidRotateClkWise(RIGHTMOTOR_OFF, LEFTMOTOR_ON);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 99 01 	call	0x332	; 0x332 <MOTOR_voidRotateClkWise>
 28e:	08 c0       	rjmp	.+16     	; 0x2a0 <Car_Control+0xfa>
		}
		else if(gMotorState == 2)
 290:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	21 f4       	brne	.+8      	; 0x2a0 <Car_Control+0xfa>
		{
			MOTOR_voidRotateAntiClkWise(RIGHTMOTOR_OFF, LEFTMOTOR_ON);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MOTOR_voidRotateAntiClkWise>
		else if(gMotorState == 2)
		{
			MOTOR_voidRotateAntiClkWise(RIGHTMOTOR_ON, LEFTMOTOR_OFF);
		}
	}
	while(SWITCH_u8GetState(SWITCH3) == PRESSED && gMotorState > 0 )
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	0e 94 35 02 	call	0x46a	; 0x46a <SWITCH_u8GetState>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	21 f4       	brne	.+8      	; 0x2b2 <Car_Control+0x10c>
 2aa:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 2ae:	81 11       	cpse	r24, r1
 2b0:	e3 cf       	rjmp	.-58     	; 0x278 <Car_Control+0xd2>
		{
			MOTOR_voidRotateAntiClkWise(RIGHTMOTOR_OFF, LEFTMOTOR_ON);
		}

	}
	MOTOR_voidStop();
 2b2:	0e 94 1b 02 	call	0x436	; 0x436 <MOTOR_voidStop>
 2b6:	08 95       	ret

000002b8 <main>:



int main(void)
{
	Car_init();
 2b8:	0e 94 8a 00 	call	0x114	; 0x114 <Car_init>
	
    while (1) 
    {
		Car_Control();
 2bc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Car_Control>
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <main+0x4>

000002c2 <MOTOR_voidInit>:
#include "MOTOR_Config.h"

void MOTOR_voidInit(void){
#if  NUM_OF_MOTORS == CONNECT_TWO_MOTOR
/*INIATE MOTOR ONE ON H-BRIDGE*/
DIO_voidSetPinDirection (MOTOR1_PORT, MOTOR1_PIN1,OUTPUT);
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,  MOTOR1_PIN2,OUTPUT);
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,MOTOR1_ENABLE,OUTPUT);
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>

/*INIATE MOTOR TWO ON H-BRIDGE*/
DIO_voidSetPinDirection (MOTOR2_PORT, MOTOR2_PIN1,OUTPUT);
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	64 e0       	ldi	r22, 0x04	; 4
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR2_PORT,  MOTOR2_PIN2,OUTPUT);
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	65 e0       	ldi	r22, 0x05	; 5
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR2_PORT,MOTOR2_ENABLE,OUTPUT);
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	63 e0       	ldi	r22, 0x03	; 3
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,  MOTOR1_PIN2,OUTPUT);
DIO_voidSetPinDirection(MOTOR1_PORT,MOTOR1_ENABLE,OUTPUT);

#endif
#if MOTOR_STATE ==  MOTOR_Generate_pwm
DIO_voidSetPinDirection (MOTOR_PORT, MOTOR_PIN1,OUTPUT);
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	65 e0       	ldi	r22, 0x05	; 5
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,  MOTOR_PIN2,OUTPUT);
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	66 e0       	ldi	r22, 0x06	; 6
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,MOTOR1_ENABLE,OUTPUT);
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_voidSetPinDirection>
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN1,HIGH);
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	65 e0       	ldi	r22, 0x05	; 5
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN2,LOW);
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	66 e0       	ldi	r22, 0x06	; 6
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
 330:	08 95       	ret

00000332 <MOTOR_voidRotateClkWise>:
#else
#endif
}

void MOTOR_voidRotateClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
 332:	cf 93       	push	r28
 334:	c6 2f       	mov	r28, r22
	if(copy_uint8_ttop == 1){
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	79 f4       	brne	.+30     	; 0x358 <MOTOR_voidRotateClkWise+0x26>
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,HIGH);
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE, HIGH);
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	63 e0       	ldi	r22, 0x03	; 3
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
 356:	0c c0       	rjmp	.+24     	; 0x370 <MOTOR_voidRotateClkWise+0x3e>
	}
	else if(copy_uint8_ttop == 0){
 358:	81 11       	cpse	r24, r1
 35a:	0a c0       	rjmp	.+20     	; 0x370 <MOTOR_voidRotateClkWise+0x3e>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
	}
	/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown== 1){
 370:	c1 30       	cpi	r28, 0x01	; 1
 372:	81 f4       	brne	.+32     	; 0x394 <MOTOR_voidRotateClkWise+0x62>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,HIGH);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	64 e0       	ldi	r22, 0x04	; 4
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	65 e0       	ldi	r22, 0x05	; 5
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_ENABLE, HIGH);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	63 e0       	ldi	r22, 0x03	; 3
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
 392:	0c c0       	rjmp	.+24     	; 0x3ac <MOTOR_voidRotateClkWise+0x7a>
	}
	else if(copy_uint8_tdown == 0){
 394:	c1 11       	cpse	r28, r1
 396:	0a c0       	rjmp	.+20     	; 0x3ac <MOTOR_voidRotateClkWise+0x7a>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN2,LOW);
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	65 e0       	ldi	r22, 0x05	; 5
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN2,LOW);
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	65 e0       	ldi	r22, 0x05	; 5
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
	}

}
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <MOTOR_voidRotateAntiClkWise>:
void MOTOR_voidRotateAntiClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
 3b0:	cf 93       	push	r28
 3b2:	c6 2f       	mov	r28, r22
	if (copy_uint8_ttop == 1)
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	79 f4       	brne	.+30     	; 0x3d6 <MOTOR_voidRotateAntiClkWise+0x26>
	{
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,  MOTOR1_PIN2,HIGH);
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	62 e0       	ldi	r22, 0x02	; 2
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE,HIGH);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	63 e0       	ldi	r22, 0x03	; 3
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
 3d4:	0c c0       	rjmp	.+24     	; 0x3ee <MOTOR_voidRotateAntiClkWise+0x3e>
	}
	else if(copy_uint8_ttop== 0)
 3d6:	81 11       	cpse	r24, r1
 3d8:	0a c0       	rjmp	.+20     	; 0x3ee <MOTOR_voidRotateAntiClkWise+0x3e>
	{
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
	}
		/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown == 1)
 3ee:	c1 30       	cpi	r28, 0x01	; 1
 3f0:	81 f4       	brne	.+32     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	64 e0       	ldi	r22, 0x04	; 4
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,HIGH);
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	65 e0       	ldi	r22, 0x05	; 5
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_ENABLE,HIGH);
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	63 e0       	ldi	r22, 0x03	; 3
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
 410:	0c c0       	rjmp	.+24     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	}


	else if(copy_uint8_tdown == 0 ){
 412:	c1 11       	cpse	r28, r1
 414:	0a c0       	rjmp	.+20     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	64 e0       	ldi	r22, 0x04	; 4
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	65 e0       	ldi	r22, 0x05	; 5
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
	}


}
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <MOTOR_voidGeneratePWM>:

void MOTOR_voidGeneratePWM(uint8_t copy_uint8_tdutycycle){
	
	TIMER0_voidPhaseCorrect(copy_uint8_tdutycycle, OCO_INVERTING);
 42e:	63 e0       	ldi	r22, 0x03	; 3
 430:	0e 94 35 05 	call	0xa6a	; 0xa6a <TIMER0_voidPhaseCorrect>
 434:	08 95       	ret

00000436 <MOTOR_voidStop>:
/*	Timer1_Load_OCR1(copy_uint8_tdutycycle);*/
}
void MOTOR_voidStop(void){
	DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN1,LOW);
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN2,LOW);
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	62 e0       	ldi	r22, 0x02	; 2
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN1,LOW);
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	64 e0       	ldi	r22, 0x04	; 4
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN2,LOW);
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	65 e0       	ldi	r22, 0x05	; 5
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_ENABLE,LOW);
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	63 e0       	ldi	r22, 0x03	; 3
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_voidSetPinValue>
 468:	08 95       	ret

0000046a <SWITCH_u8GetState>:

uint8_t SWITCH_u8GetState(uint8_t switch_num)
{
    uint8_t x, ret;

    if (switch_num == SWITCH0)
 46a:	81 11       	cpse	r24, r1
 46c:	09 c0       	rjmp	.+18     	; 0x480 <SWITCH_u8GetState+0x16>
    {
        #if (SWITCH_0_CONNECTION == PULLUP)
        {
            x=DIO_u8GetPinValue(SWITCH_0_PORT, SWITCH_0_PIN);
 46e:	62 e0       	ldi	r22, 0x02	; 2
 470:	83 e0       	ldi	r24, 0x03	; 3
 472:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <DIO_u8GetPinValue>
            {
                ret= PRESSED;
            }
            else
            {
                ret= NOT_PRESSED;
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	88 23       	and	r24, r24
 47a:	01 f1       	breq	.+64     	; 0x4bc <SWITCH_u8GetState+0x52>
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	1e c0       	rjmp	.+60     	; 0x4bc <SWITCH_u8GetState+0x52>
                ret= NOT_PRESSED;
            }
        }
        #endif
    }
    else if (switch_num == SWITCH1)
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	49 f4       	brne	.+18     	; 0x496 <SWITCH_u8GetState+0x2c>
    {
        #if (SWITCH_1_CONNECTION == PULLUP)
        {
            x=DIO_u8GetPinValue(SWITCH_1_PORT, SWITCH_1_PIN);
 484:	63 e0       	ldi	r22, 0x03	; 3
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <DIO_u8GetPinValue>
            {
                ret= PRESSED;
            }
            else
            {
                ret= NOT_PRESSED;
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	88 23       	and	r24, r24
 490:	a9 f0       	breq	.+42     	; 0x4bc <SWITCH_u8GetState+0x52>
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	13 c0       	rjmp	.+38     	; 0x4bc <SWITCH_u8GetState+0x52>
                ret= NOT_PRESSED;
            }
        }
        #endif
    }
	else if (switch_num == SWITCH2)
 496:	82 30       	cpi	r24, 0x02	; 2
 498:	41 f4       	brne	.+16     	; 0x4aa <SWITCH_u8GetState+0x40>
	{
		#if (SWITCH_2_CONNECTION == PULLUP)
		{
			x=DIO_u8GetPinValue(SWITCH_2_PORT, SWITCH_2_PIN);
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <DIO_u8GetPinValue>
            {
                ret= PRESSED;
            }
            else
            {
                ret= NOT_PRESSED;
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	88 23       	and	r24, r24
 4a4:	59 f0       	breq	.+22     	; 0x4bc <SWITCH_u8GetState+0x52>
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	09 c0       	rjmp	.+18     	; 0x4bc <SWITCH_u8GetState+0x52>
				ret= NOT_PRESSED;
			}
		}
		#endif
	}
	else if (switch_num == SWITCH3)
 4aa:	83 30       	cpi	r24, 0x03	; 3
 4ac:	39 f4       	brne	.+14     	; 0x4bc <SWITCH_u8GetState+0x52>
	{
		#if (SWITCH_2_CONNECTION == PULLUP)
		{
			x=DIO_u8GetPinValue(SWITCH_3_PORT, SWITCH_3_PIN);
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <DIO_u8GetPinValue>
            {
                ret= PRESSED;
            }
            else
            {
                ret= NOT_PRESSED;
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	81 11       	cpse	r24, r1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
		}
		#endif
	}
    return ret;
    
}
 4bc:	89 2f       	mov	r24, r25
 4be:	08 95       	ret

000004c0 <DIO_voidSetPinValue>:
        state = E_DIOPORT;
        break;
    }
    return state;

} /* DIO_voidSetPortDirection */
 4c0:	41 11       	cpse	r20, r1
 4c2:	3c c0       	rjmp	.+120    	; 0x53c <DIO_voidSetPinValue+0x7c>
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	99 f0       	breq	.+38     	; 0x4ee <DIO_voidSetPinValue+0x2e>
 4c8:	28 f0       	brcs	.+10     	; 0x4d4 <DIO_voidSetPinValue+0x14>
 4ca:	82 30       	cpi	r24, 0x02	; 2
 4cc:	e9 f0       	breq	.+58     	; 0x508 <DIO_voidSetPinValue+0x48>
 4ce:	83 30       	cpi	r24, 0x03	; 3
 4d0:	41 f1       	breq	.+80     	; 0x522 <DIO_voidSetPinValue+0x62>
 4d2:	6e c0       	rjmp	.+220    	; 0x5b0 <DIO_voidSetPinValue+0xf0>
 4d4:	2b b3       	in	r18, 0x1b	; 27
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_voidSetPinValue+0x20>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_voidSetPinValue+0x1c>
 4e4:	80 95       	com	r24
 4e6:	82 23       	and	r24, r18
 4e8:	8b bb       	out	0x1b, r24	; 27
 4ea:	84 e0       	ldi	r24, 0x04	; 4
 4ec:	08 95       	ret
 4ee:	28 b3       	in	r18, 0x18	; 24
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_voidSetPinValue+0x3a>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_voidSetPinValue+0x36>
 4fe:	80 95       	com	r24
 500:	82 23       	and	r24, r18
 502:	88 bb       	out	0x18, r24	; 24
 504:	84 e0       	ldi	r24, 0x04	; 4
 506:	08 95       	ret
 508:	25 b3       	in	r18, 0x15	; 21
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_voidSetPinValue+0x54>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_voidSetPinValue+0x50>
 518:	80 95       	com	r24
 51a:	82 23       	and	r24, r18
 51c:	85 bb       	out	0x15, r24	; 21
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	08 95       	ret
 522:	22 b3       	in	r18, 0x12	; 18
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_voidSetPinValue+0x6e>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_voidSetPinValue+0x6a>
 532:	80 95       	com	r24
 534:	82 23       	and	r24, r18
 536:	82 bb       	out	0x12, r24	; 18
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	08 95       	ret
 53c:	41 30       	cpi	r20, 0x01	; 1
 53e:	d1 f5       	brne	.+116    	; 0x5b4 <DIO_voidSetPinValue+0xf4>
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	91 f0       	breq	.+36     	; 0x568 <DIO_voidSetPinValue+0xa8>
 544:	28 f0       	brcs	.+10     	; 0x550 <DIO_voidSetPinValue+0x90>
 546:	82 30       	cpi	r24, 0x02	; 2
 548:	d9 f0       	breq	.+54     	; 0x580 <DIO_voidSetPinValue+0xc0>
 54a:	83 30       	cpi	r24, 0x03	; 3
 54c:	29 f1       	breq	.+74     	; 0x598 <DIO_voidSetPinValue+0xd8>
 54e:	34 c0       	rjmp	.+104    	; 0x5b8 <DIO_voidSetPinValue+0xf8>
 550:	2b b3       	in	r18, 0x1b	; 27
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_voidSetPinValue+0x9c>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_voidSetPinValue+0x98>
 560:	82 2b       	or	r24, r18
 562:	8b bb       	out	0x1b, r24	; 27
 564:	84 e0       	ldi	r24, 0x04	; 4
 566:	08 95       	ret
 568:	28 b3       	in	r18, 0x18	; 24
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_voidSetPinValue+0xb4>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_voidSetPinValue+0xb0>
 578:	82 2b       	or	r24, r18
 57a:	88 bb       	out	0x18, r24	; 24
 57c:	84 e0       	ldi	r24, 0x04	; 4
 57e:	08 95       	ret
 580:	25 b3       	in	r18, 0x15	; 21
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_voidSetPinValue+0xcc>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_voidSetPinValue+0xc8>
 590:	82 2b       	or	r24, r18
 592:	85 bb       	out	0x15, r24	; 21
 594:	84 e0       	ldi	r24, 0x04	; 4
 596:	08 95       	ret
 598:	22 b3       	in	r18, 0x12	; 18
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_voidSetPinValue+0xe4>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_voidSetPinValue+0xe0>
 5a8:	82 2b       	or	r24, r18
 5aa:	82 bb       	out	0x12, r24	; 18
 5ac:	84 e0       	ldi	r24, 0x04	; 4
 5ae:	08 95       	ret
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	08 95       	ret
 5b4:	84 e0       	ldi	r24, 0x04	; 4
 5b6:	08 95       	ret
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	08 95       	ret

000005bc <DIO_voidSetPinDirection>:
 5bc:	41 11       	cpse	r20, r1
 5be:	3c c0       	rjmp	.+120    	; 0x638 <DIO_voidSetPinDirection+0x7c>
 5c0:	81 30       	cpi	r24, 0x01	; 1
 5c2:	99 f0       	breq	.+38     	; 0x5ea <DIO_voidSetPinDirection+0x2e>
 5c4:	28 f0       	brcs	.+10     	; 0x5d0 <DIO_voidSetPinDirection+0x14>
 5c6:	82 30       	cpi	r24, 0x02	; 2
 5c8:	e9 f0       	breq	.+58     	; 0x604 <DIO_voidSetPinDirection+0x48>
 5ca:	83 30       	cpi	r24, 0x03	; 3
 5cc:	41 f1       	breq	.+80     	; 0x61e <DIO_voidSetPinDirection+0x62>
 5ce:	6e c0       	rjmp	.+220    	; 0x6ac <DIO_voidSetPinDirection+0xf0>
 5d0:	2a b3       	in	r18, 0x1a	; 26
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_voidSetPinDirection+0x20>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	6a 95       	dec	r22
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_voidSetPinDirection+0x1c>
 5e0:	80 95       	com	r24
 5e2:	82 23       	and	r24, r18
 5e4:	8a bb       	out	0x1a, r24	; 26
 5e6:	84 e0       	ldi	r24, 0x04	; 4
 5e8:	08 95       	ret
 5ea:	27 b3       	in	r18, 0x17	; 23
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_voidSetPinDirection+0x3a>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_voidSetPinDirection+0x36>
 5fa:	80 95       	com	r24
 5fc:	82 23       	and	r24, r18
 5fe:	87 bb       	out	0x17, r24	; 23
 600:	84 e0       	ldi	r24, 0x04	; 4
 602:	08 95       	ret
 604:	24 b3       	in	r18, 0x14	; 20
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_voidSetPinDirection+0x54>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_voidSetPinDirection+0x50>
 614:	80 95       	com	r24
 616:	82 23       	and	r24, r18
 618:	84 bb       	out	0x14, r24	; 20
 61a:	84 e0       	ldi	r24, 0x04	; 4
 61c:	08 95       	ret
 61e:	21 b3       	in	r18, 0x11	; 17
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_voidSetPinDirection+0x6e>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_voidSetPinDirection+0x6a>
 62e:	80 95       	com	r24
 630:	82 23       	and	r24, r18
 632:	81 bb       	out	0x11, r24	; 17
 634:	84 e0       	ldi	r24, 0x04	; 4
 636:	08 95       	ret
 638:	41 30       	cpi	r20, 0x01	; 1
 63a:	d1 f5       	brne	.+116    	; 0x6b0 <DIO_voidSetPinDirection+0xf4>
 63c:	81 30       	cpi	r24, 0x01	; 1
 63e:	91 f0       	breq	.+36     	; 0x664 <DIO_voidSetPinDirection+0xa8>
 640:	28 f0       	brcs	.+10     	; 0x64c <DIO_voidSetPinDirection+0x90>
 642:	82 30       	cpi	r24, 0x02	; 2
 644:	d9 f0       	breq	.+54     	; 0x67c <DIO_voidSetPinDirection+0xc0>
 646:	83 30       	cpi	r24, 0x03	; 3
 648:	29 f1       	breq	.+74     	; 0x694 <DIO_voidSetPinDirection+0xd8>
 64a:	34 c0       	rjmp	.+104    	; 0x6b4 <DIO_voidSetPinDirection+0xf8>
 64c:	2a b3       	in	r18, 0x1a	; 26
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_voidSetPinDirection+0x9c>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	6a 95       	dec	r22
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_voidSetPinDirection+0x98>
 65c:	82 2b       	or	r24, r18
 65e:	8a bb       	out	0x1a, r24	; 26
 660:	84 e0       	ldi	r24, 0x04	; 4
 662:	08 95       	ret
 664:	27 b3       	in	r18, 0x17	; 23
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_voidSetPinDirection+0xb4>
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	6a 95       	dec	r22
 672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_voidSetPinDirection+0xb0>
 674:	82 2b       	or	r24, r18
 676:	87 bb       	out	0x17, r24	; 23
 678:	84 e0       	ldi	r24, 0x04	; 4
 67a:	08 95       	ret
 67c:	24 b3       	in	r18, 0x14	; 20
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_voidSetPinDirection+0xcc>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	6a 95       	dec	r22
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_voidSetPinDirection+0xc8>
 68c:	82 2b       	or	r24, r18
 68e:	84 bb       	out	0x14, r24	; 20
 690:	84 e0       	ldi	r24, 0x04	; 4
 692:	08 95       	ret
 694:	21 b3       	in	r18, 0x11	; 17
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_voidSetPinDirection+0xe4>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	6a 95       	dec	r22
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_voidSetPinDirection+0xe0>
 6a4:	82 2b       	or	r24, r18
 6a6:	81 bb       	out	0x11, r24	; 17
 6a8:	84 e0       	ldi	r24, 0x04	; 4
 6aa:	08 95       	ret
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	08 95       	ret
 6b0:	84 e0       	ldi	r24, 0x04	; 4
 6b2:	08 95       	ret
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	08 95       	ret

000006b8 <DIO_u8GetPinValue>:
 6b8:	81 30       	cpi	r24, 0x01	; 1
 6ba:	81 f0       	breq	.+32     	; 0x6dc <DIO_u8GetPinValue+0x24>
 6bc:	28 f0       	brcs	.+10     	; 0x6c8 <DIO_u8GetPinValue+0x10>
 6be:	82 30       	cpi	r24, 0x02	; 2
 6c0:	b9 f0       	breq	.+46     	; 0x6f0 <DIO_u8GetPinValue+0x38>
 6c2:	83 30       	cpi	r24, 0x03	; 3
 6c4:	f9 f0       	breq	.+62     	; 0x704 <DIO_u8GetPinValue+0x4c>
 6c6:	27 c0       	rjmp	.+78     	; 0x716 <DIO_u8GetPinValue+0x5e>
 6c8:	89 b3       	in	r24, 0x19	; 25
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_u8GetPinValue+0x1a>
 6ce:	95 95       	asr	r25
 6d0:	87 95       	ror	r24
 6d2:	6a 95       	dec	r22
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_u8GetPinValue+0x16>
 6d6:	98 2f       	mov	r25, r24
 6d8:	91 70       	andi	r25, 0x01	; 1
 6da:	1d c0       	rjmp	.+58     	; 0x716 <DIO_u8GetPinValue+0x5e>
 6dc:	86 b3       	in	r24, 0x16	; 22
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_u8GetPinValue+0x2e>
 6e2:	95 95       	asr	r25
 6e4:	87 95       	ror	r24
 6e6:	6a 95       	dec	r22
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_u8GetPinValue+0x2a>
 6ea:	98 2f       	mov	r25, r24
 6ec:	91 70       	andi	r25, 0x01	; 1
 6ee:	13 c0       	rjmp	.+38     	; 0x716 <DIO_u8GetPinValue+0x5e>
 6f0:	83 b3       	in	r24, 0x13	; 19
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_u8GetPinValue+0x42>
 6f6:	95 95       	asr	r25
 6f8:	87 95       	ror	r24
 6fa:	6a 95       	dec	r22
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <DIO_u8GetPinValue+0x3e>
 6fe:	98 2f       	mov	r25, r24
 700:	91 70       	andi	r25, 0x01	; 1
 702:	09 c0       	rjmp	.+18     	; 0x716 <DIO_u8GetPinValue+0x5e>
 704:	80 b3       	in	r24, 0x10	; 16
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_u8GetPinValue+0x56>
 70a:	95 95       	asr	r25
 70c:	87 95       	ror	r24
 70e:	6a 95       	dec	r22
 710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_u8GetPinValue+0x52>
 712:	98 2f       	mov	r25, r24
 714:	91 70       	andi	r25, 0x01	; 1
 716:	89 2f       	mov	r24, r25
 718:	08 95       	ret

0000071a <DIO_voidInpullUp>:
 */
EN_DIOERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
    switch (EN_Port)
 71a:	81 30       	cpi	r24, 0x01	; 1
 71c:	b9 f0       	breq	.+46     	; 0x74c <DIO_voidInpullUp+0x32>
 71e:	28 f0       	brcs	.+10     	; 0x72a <DIO_voidInpullUp+0x10>
 720:	82 30       	cpi	r24, 0x02	; 2
 722:	29 f1       	breq	.+74     	; 0x76e <DIO_voidInpullUp+0x54>
 724:	83 30       	cpi	r24, 0x03	; 3
 726:	a1 f1       	breq	.+104    	; 0x790 <DIO_voidInpullUp+0x76>
 728:	44 c0       	rjmp	.+136    	; 0x7b2 <DIO_voidInpullUp+0x98>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
 72a:	2a b3       	in	r18, 0x1a	; 26
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_voidInpullUp+0x1c>
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	6a 95       	dec	r22
 738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_voidInpullUp+0x18>
 73a:	98 2f       	mov	r25, r24
 73c:	90 95       	com	r25
 73e:	92 23       	and	r25, r18
 740:	9a bb       	out	0x1a, r25	; 26
        SETBIT(PORTA, EN_Pin);
 742:	9b b3       	in	r25, 0x1b	; 27
 744:	89 2b       	or	r24, r25
 746:	8b bb       	out	0x1b, r24	; 27
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 748:	84 e0       	ldi	r24, 0x04	; 4
    switch (EN_Port)
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
        SETBIT(PORTA, EN_Pin);
        break;
 74a:	08 95       	ret
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
 74c:	27 b3       	in	r18, 0x17	; 23
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_voidInpullUp+0x3e>
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	6a 95       	dec	r22
 75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_voidInpullUp+0x3a>
 75c:	98 2f       	mov	r25, r24
 75e:	90 95       	com	r25
 760:	92 23       	and	r25, r18
 762:	97 bb       	out	0x17, r25	; 23
        SETBIT(PORTB, EN_Pin);
 764:	98 b3       	in	r25, 0x18	; 24
 766:	89 2b       	or	r24, r25
 768:	88 bb       	out	0x18, r24	; 24
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 76a:	84 e0       	ldi	r24, 0x04	; 4
        SETBIT(PORTA, EN_Pin);
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
        SETBIT(PORTB, EN_Pin);
        break;
 76c:	08 95       	ret
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
 76e:	24 b3       	in	r18, 0x14	; 20
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <DIO_voidInpullUp+0x60>
 776:	88 0f       	add	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	6a 95       	dec	r22
 77c:	e2 f7       	brpl	.-8      	; 0x776 <DIO_voidInpullUp+0x5c>
 77e:	98 2f       	mov	r25, r24
 780:	90 95       	com	r25
 782:	92 23       	and	r25, r18
 784:	94 bb       	out	0x14, r25	; 20
        SETBIT(PORTC, EN_Pin);
 786:	95 b3       	in	r25, 0x15	; 21
 788:	89 2b       	or	r24, r25
 78a:	85 bb       	out	0x15, r24	; 21
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 78c:	84 e0       	ldi	r24, 0x04	; 4
        SETBIT(PORTB, EN_Pin);
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
        SETBIT(PORTC, EN_Pin);
        break;
 78e:	08 95       	ret
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
 790:	21 b3       	in	r18, 0x11	; 17
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_voidInpullUp+0x82>
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	6a 95       	dec	r22
 79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_voidInpullUp+0x7e>
 7a0:	98 2f       	mov	r25, r24
 7a2:	90 95       	com	r25
 7a4:	92 23       	and	r25, r18
 7a6:	91 bb       	out	0x11, r25	; 17
        SETBIT(PORTD, EN_Pin);
 7a8:	92 b3       	in	r25, 0x12	; 18
 7aa:	89 2b       	or	r24, r25
 7ac:	82 bb       	out	0x12, r24	; 18
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 7ae:	84 e0       	ldi	r24, 0x04	; 4
        SETBIT(PORTC, EN_Pin);
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
        SETBIT(PORTD, EN_Pin);
        break;
 7b0:	08 95       	ret
    default:
        state = E_DIOPORT;
 7b2:	82 e0       	ldi	r24, 0x02	; 2
        break;
    }
    return state;
} /* DIO_voidInpullUp */
 7b4:	08 95       	ret

000007b6 <EXTI_ENEnable>:
	default:
		state = E_EXT_ERROR;
		break;
	}
	return state;
} /* EXTI_voidDisable */
 7b6:	81 30       	cpi	r24, 0x01	; 1
 7b8:	61 f0       	breq	.+24     	; 0x7d2 <EXTI_ENEnable+0x1c>
 7ba:	18 f0       	brcs	.+6      	; 0x7c2 <EXTI_ENEnable+0xc>
 7bc:	82 30       	cpi	r24, 0x02	; 2
 7be:	89 f0       	breq	.+34     	; 0x7e2 <EXTI_ENEnable+0x2c>
 7c0:	18 c0       	rjmp	.+48     	; 0x7f2 <EXTI_ENEnable+0x3c>
 7c2:	8b b7       	in	r24, 0x3b	; 59
 7c4:	80 64       	ori	r24, 0x40	; 64
 7c6:	8b bf       	out	0x3b, r24	; 59
 7c8:	8f b7       	in	r24, 0x3f	; 63
 7ca:	80 68       	ori	r24, 0x80	; 128
 7cc:	8f bf       	out	0x3f, r24	; 63
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	08 95       	ret
 7d2:	8b b7       	in	r24, 0x3b	; 59
 7d4:	80 68       	ori	r24, 0x80	; 128
 7d6:	8b bf       	out	0x3b, r24	; 59
 7d8:	8f b7       	in	r24, 0x3f	; 63
 7da:	80 68       	ori	r24, 0x80	; 128
 7dc:	8f bf       	out	0x3f, r24	; 63
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	08 95       	ret
 7e2:	8b b7       	in	r24, 0x3b	; 59
 7e4:	80 62       	ori	r24, 0x20	; 32
 7e6:	8b bf       	out	0x3b, r24	; 59
 7e8:	8f b7       	in	r24, 0x3f	; 63
 7ea:	80 68       	ori	r24, 0x80	; 128
 7ec:	8f bf       	out	0x3f, r24	; 63
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	08 95       	ret
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	08 95       	ret

000007f6 <EXTI_ENTriggerEdge>:
EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;

	switch (Interrupt)
 7f6:	81 30       	cpi	r24, 0x01	; 1
 7f8:	61 f0       	breq	.+24     	; 0x812 <EXTI_ENTriggerEdge+0x1c>
 7fa:	18 f0       	brcs	.+6      	; 0x802 <EXTI_ENTriggerEdge+0xc>
 7fc:	82 30       	cpi	r24, 0x02	; 2
 7fe:	89 f1       	breq	.+98     	; 0x862 <__stack+0x3>
 800:	3f c0       	rjmp	.+126    	; 0x880 <__stack+0x21>
	{
	case EXTI_INT0:
		MCUCR &= 0xFC;
 802:	85 b7       	in	r24, 0x35	; 53
 804:	8c 7f       	andi	r24, 0xFC	; 252
 806:	85 bf       	out	0x35, r24	; 53
		MCUCR |= Edge;
 808:	85 b7       	in	r24, 0x35	; 53
 80a:	68 2b       	or	r22, r24
 80c:	65 bf       	out	0x35, r22	; 53
} /* EXTI_voidDisable */

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
 80e:	80 e0       	ldi	r24, 0x00	; 0
	switch (Interrupt)
	{
	case EXTI_INT0:
		MCUCR &= 0xFC;
		MCUCR |= Edge;
		break;
 810:	08 95       	ret
	case EXTI_INT1:
		switch (Edge)
 812:	61 30       	cpi	r22, 0x01	; 1
 814:	71 f0       	breq	.+28     	; 0x832 <EXTI_ENTriggerEdge+0x3c>
 816:	28 f0       	brcs	.+10     	; 0x822 <EXTI_ENTriggerEdge+0x2c>
 818:	62 30       	cpi	r22, 0x02	; 2
 81a:	99 f0       	breq	.+38     	; 0x842 <EXTI_ENTriggerEdge+0x4c>
 81c:	63 30       	cpi	r22, 0x03	; 3
 81e:	c9 f0       	breq	.+50     	; 0x852 <EXTI_ENTriggerEdge+0x5c>
 820:	31 c0       	rjmp	.+98     	; 0x884 <__stack+0x25>
		{
		case LOW_LEVEL:
			CLRBIT(MCUCR, ISC10);
 822:	85 b7       	in	r24, 0x35	; 53
 824:	8b 7f       	andi	r24, 0xFB	; 251
 826:	85 bf       	out	0x35, r24	; 53
			CLRBIT(MCUCR, ISC11);
 828:	85 b7       	in	r24, 0x35	; 53
 82a:	87 7f       	andi	r24, 0xF7	; 247
 82c:	85 bf       	out	0x35, r24	; 53
} /* EXTI_voidDisable */

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
 82e:	80 e0       	ldi	r24, 0x00	; 0
		switch (Edge)
		{
		case LOW_LEVEL:
			CLRBIT(MCUCR, ISC10);
			CLRBIT(MCUCR, ISC11);
			break;
 830:	08 95       	ret
		case ANY_LOGIC_CHANGE:
			SETBIT(MCUCR, ISC10);
 832:	85 b7       	in	r24, 0x35	; 53
 834:	84 60       	ori	r24, 0x04	; 4
 836:	85 bf       	out	0x35, r24	; 53
			CLRBIT(MCUCR, ISC11);
 838:	85 b7       	in	r24, 0x35	; 53
 83a:	87 7f       	andi	r24, 0xF7	; 247
 83c:	85 bf       	out	0x35, r24	; 53
} /* EXTI_voidDisable */

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
 83e:	80 e0       	ldi	r24, 0x00	; 0
			CLRBIT(MCUCR, ISC11);
			break;
		case ANY_LOGIC_CHANGE:
			SETBIT(MCUCR, ISC10);
			CLRBIT(MCUCR, ISC11);
			break;
 840:	08 95       	ret
		case FALLING_EDGE:
			CLRBIT(MCUCR, ISC10);
 842:	85 b7       	in	r24, 0x35	; 53
 844:	8b 7f       	andi	r24, 0xFB	; 251
 846:	85 bf       	out	0x35, r24	; 53
			SETBIT(MCUCR, ISC11);
 848:	85 b7       	in	r24, 0x35	; 53
 84a:	88 60       	ori	r24, 0x08	; 8
 84c:	85 bf       	out	0x35, r24	; 53
} /* EXTI_voidDisable */

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
 84e:	80 e0       	ldi	r24, 0x00	; 0
			CLRBIT(MCUCR, ISC11);
			break;
		case FALLING_EDGE:
			CLRBIT(MCUCR, ISC10);
			SETBIT(MCUCR, ISC11);
			break;
 850:	08 95       	ret
		case RISING_EDGE:
			SETBIT(MCUCR, ISC10);
 852:	85 b7       	in	r24, 0x35	; 53
 854:	84 60       	ori	r24, 0x04	; 4
 856:	85 bf       	out	0x35, r24	; 53
			SETBIT(MCUCR, ISC11);
 858:	85 b7       	in	r24, 0x35	; 53
 85a:	88 60       	ori	r24, 0x08	; 8
 85c:	85 bf       	out	0x35, r24	; 53
} /* EXTI_voidDisable */

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
 85e:	80 e0       	ldi	r24, 0x00	; 0
			SETBIT(MCUCR, ISC11);
			break;
		case RISING_EDGE:
			SETBIT(MCUCR, ISC10);
			SETBIT(MCUCR, ISC11);
			break;
 860:	08 95       	ret
			state = E_EXT_ERROR;
			break;
		}
		break;
	case EXTI_INT2:
		switch (Edge)
 862:	62 30       	cpi	r22, 0x02	; 2
 864:	19 f0       	breq	.+6      	; 0x86c <__stack+0xd>
 866:	63 30       	cpi	r22, 0x03	; 3
 868:	31 f0       	breq	.+12     	; 0x876 <__stack+0x17>
 86a:	0e c0       	rjmp	.+28     	; 0x888 <__stack+0x29>
		{
		case FALLING_EDGE:
			CLRBIT(MCUCSR, ISC2);
 86c:	84 b7       	in	r24, 0x34	; 52
 86e:	8f 7b       	andi	r24, 0xBF	; 191
 870:	84 bf       	out	0x34, r24	; 52
} /* EXTI_voidDisable */

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
 872:	80 e0       	ldi	r24, 0x00	; 0
	case EXTI_INT2:
		switch (Edge)
		{
		case FALLING_EDGE:
			CLRBIT(MCUCSR, ISC2);
			break;
 874:	08 95       	ret
		case RISING_EDGE:
			SETBIT(MCUCSR, ISC2);
 876:	84 b7       	in	r24, 0x34	; 52
 878:	80 64       	ori	r24, 0x40	; 64
 87a:	84 bf       	out	0x34, r24	; 52
} /* EXTI_voidDisable */

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
 87c:	80 e0       	ldi	r24, 0x00	; 0
		case FALLING_EDGE:
			CLRBIT(MCUCSR, ISC2);
			break;
		case RISING_EDGE:
			SETBIT(MCUCSR, ISC2);
			break;
 87e:	08 95       	ret
			break;
		}
		break;

	default:
		state = E_EXT_ERROR;
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	08 95       	ret
		case RISING_EDGE:
			SETBIT(MCUCR, ISC10);
			SETBIT(MCUCR, ISC11);
			break;
		default:
			state = E_EXT_ERROR;
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	08 95       	ret
			break;
		case RISING_EDGE:
			SETBIT(MCUCSR, ISC2);
			break;
		default:
			state = E_EXT_ERROR;
 888:	81 e0       	ldi	r24, 0x01	; 1
	default:
		state = E_EXT_ERROR;
		break;
	}
	return state;
} /* EXTI_voidTriggerEdge */
 88a:	08 95       	ret

0000088c <EXTI_SetCallBack>:
EN_EXTIERRORSTATE_t EXTI_SetCallBack(EN_EXTI_t Interrupt, void (*LocalPtr)(void))
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;

	switch (Interrupt)
 88c:	81 30       	cpi	r24, 0x01	; 1
 88e:	51 f0       	breq	.+20     	; 0x8a4 <EXTI_SetCallBack+0x18>
 890:	18 f0       	brcs	.+6      	; 0x898 <EXTI_SetCallBack+0xc>
 892:	82 30       	cpi	r24, 0x02	; 2
 894:	69 f0       	breq	.+26     	; 0x8b0 <EXTI_SetCallBack+0x24>
 896:	12 c0       	rjmp	.+36     	; 0x8bc <EXTI_SetCallBack+0x30>
	{
	case EXTI_INT0:
		EXTI_INT0_FPtr = LocalPtr;
 898:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <EXTI_INT0_FPtr+0x1>
 89c:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <EXTI_INT0_FPtr>
} /* EXTI_voidTriggerEdge */

EN_EXTIERRORSTATE_t EXTI_SetCallBack(EN_EXTI_t Interrupt, void (*LocalPtr)(void))
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
 8a0:	80 e0       	ldi	r24, 0x00	; 0

	switch (Interrupt)
	{
	case EXTI_INT0:
		EXTI_INT0_FPtr = LocalPtr;
		break;
 8a2:	08 95       	ret
	case EXTI_INT1:
		EXTI_INT1_FPtr = LocalPtr;
 8a4:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <EXTI_INT1_FPtr+0x1>
 8a8:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <EXTI_INT1_FPtr>
} /* EXTI_voidTriggerEdge */

EN_EXTIERRORSTATE_t EXTI_SetCallBack(EN_EXTI_t Interrupt, void (*LocalPtr)(void))
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
 8ac:	80 e0       	ldi	r24, 0x00	; 0
	case EXTI_INT0:
		EXTI_INT0_FPtr = LocalPtr;
		break;
	case EXTI_INT1:
		EXTI_INT1_FPtr = LocalPtr;
		break;
 8ae:	08 95       	ret
	case EXTI_INT2:
		EXTI_INT2_FPtr = LocalPtr;
 8b0:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <EXTI_INT2_FPtr+0x1>
 8b4:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <EXTI_INT2_FPtr>
} /* EXTI_voidTriggerEdge */

EN_EXTIERRORSTATE_t EXTI_SetCallBack(EN_EXTI_t Interrupt, void (*LocalPtr)(void))
{
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
 8b8:	80 e0       	ldi	r24, 0x00	; 0
	case EXTI_INT1:
		EXTI_INT1_FPtr = LocalPtr;
		break;
	case EXTI_INT2:
		EXTI_INT2_FPtr = LocalPtr;
		break;
 8ba:	08 95       	ret
	default:
		state = E_EXT_ERROR;
 8bc:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return state;

} /* EXTI_SetCallBack */
 8be:	08 95       	ret

000008c0 <__vector_1>:

void __vector_1(void)
{
 8c0:	1f 92       	push	r1
 8c2:	0f 92       	push	r0
 8c4:	0f b6       	in	r0, 0x3f	; 63
 8c6:	0f 92       	push	r0
 8c8:	11 24       	eor	r1, r1
 8ca:	2f 93       	push	r18
 8cc:	3f 93       	push	r19
 8ce:	4f 93       	push	r20
 8d0:	5f 93       	push	r21
 8d2:	6f 93       	push	r22
 8d4:	7f 93       	push	r23
 8d6:	8f 93       	push	r24
 8d8:	9f 93       	push	r25
 8da:	af 93       	push	r26
 8dc:	bf 93       	push	r27
 8de:	ef 93       	push	r30
 8e0:	ff 93       	push	r31
	if (EXTI_INT0_FPtr != NULLPTR)
 8e2:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <EXTI_INT0_FPtr>
 8e6:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <EXTI_INT0_FPtr+0x1>
 8ea:	30 97       	sbiw	r30, 0x00	; 0
 8ec:	09 f0       	breq	.+2      	; 0x8f0 <__vector_1+0x30>
	{
		EXTI_INT0_FPtr();
 8ee:	09 95       	icall
	}
}
 8f0:	ff 91       	pop	r31
 8f2:	ef 91       	pop	r30
 8f4:	bf 91       	pop	r27
 8f6:	af 91       	pop	r26
 8f8:	9f 91       	pop	r25
 8fa:	8f 91       	pop	r24
 8fc:	7f 91       	pop	r23
 8fe:	6f 91       	pop	r22
 900:	5f 91       	pop	r21
 902:	4f 91       	pop	r20
 904:	3f 91       	pop	r19
 906:	2f 91       	pop	r18
 908:	0f 90       	pop	r0
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	0f 90       	pop	r0
 90e:	1f 90       	pop	r1
 910:	18 95       	reti

00000912 <__vector_2>:

void __vector_2(void)
{
 912:	1f 92       	push	r1
 914:	0f 92       	push	r0
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	0f 92       	push	r0
 91a:	11 24       	eor	r1, r1
 91c:	2f 93       	push	r18
 91e:	3f 93       	push	r19
 920:	4f 93       	push	r20
 922:	5f 93       	push	r21
 924:	6f 93       	push	r22
 926:	7f 93       	push	r23
 928:	8f 93       	push	r24
 92a:	9f 93       	push	r25
 92c:	af 93       	push	r26
 92e:	bf 93       	push	r27
 930:	ef 93       	push	r30
 932:	ff 93       	push	r31
	if (EXTI_INT1_FPtr != NULLPTR)
 934:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <EXTI_INT1_FPtr>
 938:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <EXTI_INT1_FPtr+0x1>
 93c:	30 97       	sbiw	r30, 0x00	; 0
 93e:	09 f0       	breq	.+2      	; 0x942 <__vector_2+0x30>
	{
		EXTI_INT1_FPtr();
 940:	09 95       	icall
	}
}
 942:	ff 91       	pop	r31
 944:	ef 91       	pop	r30
 946:	bf 91       	pop	r27
 948:	af 91       	pop	r26
 94a:	9f 91       	pop	r25
 94c:	8f 91       	pop	r24
 94e:	7f 91       	pop	r23
 950:	6f 91       	pop	r22
 952:	5f 91       	pop	r21
 954:	4f 91       	pop	r20
 956:	3f 91       	pop	r19
 958:	2f 91       	pop	r18
 95a:	0f 90       	pop	r0
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	0f 90       	pop	r0
 960:	1f 90       	pop	r1
 962:	18 95       	reti

00000964 <__vector_3>:

void __vector_3(void)
{
 964:	1f 92       	push	r1
 966:	0f 92       	push	r0
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	0f 92       	push	r0
 96c:	11 24       	eor	r1, r1
 96e:	2f 93       	push	r18
 970:	3f 93       	push	r19
 972:	4f 93       	push	r20
 974:	5f 93       	push	r21
 976:	6f 93       	push	r22
 978:	7f 93       	push	r23
 97a:	8f 93       	push	r24
 97c:	9f 93       	push	r25
 97e:	af 93       	push	r26
 980:	bf 93       	push	r27
 982:	ef 93       	push	r30
 984:	ff 93       	push	r31
	if (EXTI_INT2_FPtr != NULLPTR)
 986:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <EXTI_INT2_FPtr>
 98a:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <EXTI_INT2_FPtr+0x1>
 98e:	30 97       	sbiw	r30, 0x00	; 0
 990:	09 f0       	breq	.+2      	; 0x994 <__vector_3+0x30>
	{
		EXTI_INT2_FPtr();
 992:	09 95       	icall
	}
}
 994:	ff 91       	pop	r31
 996:	ef 91       	pop	r30
 998:	bf 91       	pop	r27
 99a:	af 91       	pop	r26
 99c:	9f 91       	pop	r25
 99e:	8f 91       	pop	r24
 9a0:	7f 91       	pop	r23
 9a2:	6f 91       	pop	r22
 9a4:	5f 91       	pop	r21
 9a6:	4f 91       	pop	r20
 9a8:	3f 91       	pop	r19
 9aa:	2f 91       	pop	r18
 9ac:	0f 90       	pop	r0
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <Timer0_Init>:
{
	Timer1_OCB_Fptr = LocalFptr;
}
void Timer1_ICU_SetCallBack(void (*LocalFptr)(void))
{
	Timer1_ICU_Fptr = LocalFptr;
 9b6:	81 30       	cpi	r24, 0x01	; 1
 9b8:	71 f0       	breq	.+28     	; 0x9d6 <Timer0_Init+0x20>
 9ba:	28 f0       	brcs	.+10     	; 0x9c6 <Timer0_Init+0x10>
 9bc:	82 30       	cpi	r24, 0x02	; 2
 9be:	99 f0       	breq	.+38     	; 0x9e6 <Timer0_Init+0x30>
 9c0:	83 30       	cpi	r24, 0x03	; 3
 9c2:	c9 f0       	breq	.+50     	; 0x9f6 <Timer0_Init+0x40>
 9c4:	20 c0       	rjmp	.+64     	; 0xa06 <Timer0_Init+0x50>
 9c6:	83 b7       	in	r24, 0x33	; 51
 9c8:	8f 7b       	andi	r24, 0xBF	; 191
 9ca:	83 bf       	out	0x33, r24	; 51
 9cc:	83 b7       	in	r24, 0x33	; 51
 9ce:	87 7f       	andi	r24, 0xF7	; 247
 9d0:	83 bf       	out	0x33, r24	; 51
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	19 c0       	rjmp	.+50     	; 0xa08 <Timer0_Init+0x52>
 9d6:	83 b7       	in	r24, 0x33	; 51
 9d8:	80 64       	ori	r24, 0x40	; 64
 9da:	83 bf       	out	0x33, r24	; 51
 9dc:	83 b7       	in	r24, 0x33	; 51
 9de:	87 7f       	andi	r24, 0xF7	; 247
 9e0:	83 bf       	out	0x33, r24	; 51
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	11 c0       	rjmp	.+34     	; 0xa08 <Timer0_Init+0x52>
 9e6:	83 b7       	in	r24, 0x33	; 51
 9e8:	8f 7b       	andi	r24, 0xBF	; 191
 9ea:	83 bf       	out	0x33, r24	; 51
 9ec:	83 b7       	in	r24, 0x33	; 51
 9ee:	88 60       	ori	r24, 0x08	; 8
 9f0:	83 bf       	out	0x33, r24	; 51
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	09 c0       	rjmp	.+18     	; 0xa08 <Timer0_Init+0x52>
 9f6:	83 b7       	in	r24, 0x33	; 51
 9f8:	80 64       	ori	r24, 0x40	; 64
 9fa:	83 bf       	out	0x33, r24	; 51
 9fc:	83 b7       	in	r24, 0x33	; 51
 9fe:	88 60       	ori	r24, 0x08	; 8
 a00:	83 bf       	out	0x33, r24	; 51
 a02:	80 e0       	ldi	r24, 0x00	; 0
 a04:	01 c0       	rjmp	.+2      	; 0xa08 <Timer0_Init+0x52>
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	93 b7       	in	r25, 0x33	; 51
 a0a:	98 7f       	andi	r25, 0xF8	; 248
 a0c:	93 bf       	out	0x33, r25	; 51
 a0e:	93 b7       	in	r25, 0x33	; 51
 a10:	96 2b       	or	r25, r22
 a12:	93 bf       	out	0x33, r25	; 51
 a14:	70 e0       	ldi	r23, 0x00	; 0
 a16:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <gPrescal+0x1>
 a1a:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <gPrescal>
 a1e:	41 30       	cpi	r20, 0x01	; 1
 a20:	69 f0       	breq	.+26     	; 0xa3c <Timer0_Init+0x86>
 a22:	28 f0       	brcs	.+10     	; 0xa2e <Timer0_Init+0x78>
 a24:	42 30       	cpi	r20, 0x02	; 2
 a26:	89 f0       	breq	.+34     	; 0xa4a <Timer0_Init+0x94>
 a28:	43 30       	cpi	r20, 0x03	; 3
 a2a:	b1 f0       	breq	.+44     	; 0xa58 <Timer0_Init+0xa2>
 a2c:	1c c0       	rjmp	.+56     	; 0xa66 <Timer0_Init+0xb0>
 a2e:	93 b7       	in	r25, 0x33	; 51
 a30:	9f 7e       	andi	r25, 0xEF	; 239
 a32:	93 bf       	out	0x33, r25	; 51
 a34:	93 b7       	in	r25, 0x33	; 51
 a36:	9f 7d       	andi	r25, 0xDF	; 223
 a38:	93 bf       	out	0x33, r25	; 51
 a3a:	08 95       	ret
 a3c:	93 b7       	in	r25, 0x33	; 51
 a3e:	90 61       	ori	r25, 0x10	; 16
 a40:	93 bf       	out	0x33, r25	; 51
 a42:	93 b7       	in	r25, 0x33	; 51
 a44:	9f 7d       	andi	r25, 0xDF	; 223
 a46:	93 bf       	out	0x33, r25	; 51
 a48:	08 95       	ret
 a4a:	93 b7       	in	r25, 0x33	; 51
 a4c:	9f 7e       	andi	r25, 0xEF	; 239
 a4e:	93 bf       	out	0x33, r25	; 51
 a50:	93 b7       	in	r25, 0x33	; 51
 a52:	90 62       	ori	r25, 0x20	; 32
 a54:	93 bf       	out	0x33, r25	; 51
 a56:	08 95       	ret
 a58:	93 b7       	in	r25, 0x33	; 51
 a5a:	90 61       	ori	r25, 0x10	; 16
 a5c:	93 bf       	out	0x33, r25	; 51
 a5e:	93 b7       	in	r25, 0x33	; 51
 a60:	90 62       	ori	r25, 0x20	; 32
 a62:	93 bf       	out	0x33, r25	; 51
 a64:	08 95       	ret
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	08 95       	ret

00000a6a <TIMER0_voidPhaseCorrect>:
 a6a:	63 30       	cpi	r22, 0x03	; 3
 a6c:	49 f4       	brne	.+18     	; 0xa80 <TIMER0_voidPhaseCorrect+0x16>
 a6e:	98 2f       	mov	r25, r24
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	64 e6       	ldi	r22, 0x64	; 100
 a74:	70 e0       	ldi	r23, 0x00	; 0
 a76:	0e 94 4b 06 	call	0xc96	; 0xc96 <__divmodhi4>
 a7a:	60 95       	com	r22
 a7c:	6c bf       	out	0x3c, r22	; 60
 a7e:	08 95       	ret
 a80:	62 30       	cpi	r22, 0x02	; 2
 a82:	49 f4       	brne	.+18     	; 0xa96 <TIMER0_voidPhaseCorrect+0x2c>
 a84:	2f ef       	ldi	r18, 0xFF	; 255
 a86:	82 9f       	mul	r24, r18
 a88:	c0 01       	movw	r24, r0
 a8a:	11 24       	eor	r1, r1
 a8c:	64 e6       	ldi	r22, 0x64	; 100
 a8e:	70 e0       	ldi	r23, 0x00	; 0
 a90:	0e 94 4b 06 	call	0xc96	; 0xc96 <__divmodhi4>
 a94:	6c bf       	out	0x3c, r22	; 60
 a96:	08 95       	ret

00000a98 <__vector_11>:
 a98:	1f 92       	push	r1
 a9a:	0f 92       	push	r0
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	0f 92       	push	r0
 aa0:	11 24       	eor	r1, r1
 aa2:	2f 93       	push	r18
 aa4:	3f 93       	push	r19
 aa6:	4f 93       	push	r20
 aa8:	5f 93       	push	r21
 aaa:	6f 93       	push	r22
 aac:	7f 93       	push	r23
 aae:	8f 93       	push	r24
 ab0:	9f 93       	push	r25
 ab2:	af 93       	push	r26
 ab4:	bf 93       	push	r27
 ab6:	ef 93       	push	r30
 ab8:	ff 93       	push	r31
 aba:	86 e0       	ldi	r24, 0x06	; 6
 abc:	82 bf       	out	0x32, r24	; 50
 abe:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <count.1766>
 ac2:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <count.1766+0x1>
 ac6:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <count.1766+0x2>
 aca:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <count.1766+0x3>
 ace:	01 96       	adiw	r24, 0x01	; 1
 ad0:	a1 1d       	adc	r26, r1
 ad2:	b1 1d       	adc	r27, r1
 ad4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <count.1766>
 ad8:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <count.1766+0x1>
 adc:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <count.1766+0x2>
 ae0:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <count.1766+0x3>
 ae4:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <Timer0_OVF_Fptr>
 ae8:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <Timer0_OVF_Fptr+0x1>
 aec:	30 97       	sbiw	r30, 0x00	; 0
 aee:	f1 f0       	breq	.+60     	; 0xb2c <__vector_11+0x94>
 af0:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <count.1766>
 af4:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <count.1766+0x1>
 af8:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <count.1766+0x2>
 afc:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <count.1766+0x3>
 b00:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gOVFNUM>
 b04:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <gOVFNUM+0x1>
 b08:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <gOVFNUM+0x2>
 b0c:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <gOVFNUM+0x3>
 b10:	48 17       	cp	r20, r24
 b12:	59 07       	cpc	r21, r25
 b14:	6a 07       	cpc	r22, r26
 b16:	7b 07       	cpc	r23, r27
 b18:	49 f4       	brne	.+18     	; 0xb2c <__vector_11+0x94>
 b1a:	09 95       	icall
 b1c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <count.1766>
 b20:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <count.1766+0x1>
 b24:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <count.1766+0x2>
 b28:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <count.1766+0x3>
 b2c:	ff 91       	pop	r31
 b2e:	ef 91       	pop	r30
 b30:	bf 91       	pop	r27
 b32:	af 91       	pop	r26
 b34:	9f 91       	pop	r25
 b36:	8f 91       	pop	r24
 b38:	7f 91       	pop	r23
 b3a:	6f 91       	pop	r22
 b3c:	5f 91       	pop	r21
 b3e:	4f 91       	pop	r20
 b40:	3f 91       	pop	r19
 b42:	2f 91       	pop	r18
 b44:	0f 90       	pop	r0
 b46:	0f be       	out	0x3f, r0	; 63
 b48:	0f 90       	pop	r0
 b4a:	1f 90       	pop	r1
 b4c:	18 95       	reti

00000b4e <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/
void __vector_9(void)
{
 b4e:	1f 92       	push	r1
 b50:	0f 92       	push	r0
 b52:	0f b6       	in	r0, 0x3f	; 63
 b54:	0f 92       	push	r0
 b56:	11 24       	eor	r1, r1
 b58:	2f 93       	push	r18
 b5a:	3f 93       	push	r19
 b5c:	4f 93       	push	r20
 b5e:	5f 93       	push	r21
 b60:	6f 93       	push	r22
 b62:	7f 93       	push	r23
 b64:	8f 93       	push	r24
 b66:	9f 93       	push	r25
 b68:	af 93       	push	r26
 b6a:	bf 93       	push	r27
 b6c:	ef 93       	push	r30
 b6e:	ff 93       	push	r31
	if (Timer1_OVF_Fptr != NULLPTR)
 b70:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <Timer1_OVF_Fptr>
 b74:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <Timer1_OVF_Fptr+0x1>
 b78:	30 97       	sbiw	r30, 0x00	; 0
 b7a:	09 f0       	breq	.+2      	; 0xb7e <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
 b7c:	09 95       	icall
	}
}
 b7e:	ff 91       	pop	r31
 b80:	ef 91       	pop	r30
 b82:	bf 91       	pop	r27
 b84:	af 91       	pop	r26
 b86:	9f 91       	pop	r25
 b88:	8f 91       	pop	r24
 b8a:	7f 91       	pop	r23
 b8c:	6f 91       	pop	r22
 b8e:	5f 91       	pop	r21
 b90:	4f 91       	pop	r20
 b92:	3f 91       	pop	r19
 b94:	2f 91       	pop	r18
 b96:	0f 90       	pop	r0
 b98:	0f be       	out	0x3f, r0	; 63
 b9a:	0f 90       	pop	r0
 b9c:	1f 90       	pop	r1
 b9e:	18 95       	reti

00000ba0 <__vector_7>:

void __vector_7(void)
{
 ba0:	1f 92       	push	r1
 ba2:	0f 92       	push	r0
 ba4:	0f b6       	in	r0, 0x3f	; 63
 ba6:	0f 92       	push	r0
 ba8:	11 24       	eor	r1, r1
 baa:	2f 93       	push	r18
 bac:	3f 93       	push	r19
 bae:	4f 93       	push	r20
 bb0:	5f 93       	push	r21
 bb2:	6f 93       	push	r22
 bb4:	7f 93       	push	r23
 bb6:	8f 93       	push	r24
 bb8:	9f 93       	push	r25
 bba:	af 93       	push	r26
 bbc:	bf 93       	push	r27
 bbe:	ef 93       	push	r30
 bc0:	ff 93       	push	r31
	if (Timer1_OCA_Fptr != NULLPTR)
 bc2:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <Timer1_OCA_Fptr>
 bc6:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <Timer1_OCA_Fptr+0x1>
 bca:	30 97       	sbiw	r30, 0x00	; 0
 bcc:	09 f0       	breq	.+2      	; 0xbd0 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
 bce:	09 95       	icall
	}
}
 bd0:	ff 91       	pop	r31
 bd2:	ef 91       	pop	r30
 bd4:	bf 91       	pop	r27
 bd6:	af 91       	pop	r26
 bd8:	9f 91       	pop	r25
 bda:	8f 91       	pop	r24
 bdc:	7f 91       	pop	r23
 bde:	6f 91       	pop	r22
 be0:	5f 91       	pop	r21
 be2:	4f 91       	pop	r20
 be4:	3f 91       	pop	r19
 be6:	2f 91       	pop	r18
 be8:	0f 90       	pop	r0
 bea:	0f be       	out	0x3f, r0	; 63
 bec:	0f 90       	pop	r0
 bee:	1f 90       	pop	r1
 bf0:	18 95       	reti

00000bf2 <__vector_8>:
void __vector_8(void)
{
 bf2:	1f 92       	push	r1
 bf4:	0f 92       	push	r0
 bf6:	0f b6       	in	r0, 0x3f	; 63
 bf8:	0f 92       	push	r0
 bfa:	11 24       	eor	r1, r1
 bfc:	2f 93       	push	r18
 bfe:	3f 93       	push	r19
 c00:	4f 93       	push	r20
 c02:	5f 93       	push	r21
 c04:	6f 93       	push	r22
 c06:	7f 93       	push	r23
 c08:	8f 93       	push	r24
 c0a:	9f 93       	push	r25
 c0c:	af 93       	push	r26
 c0e:	bf 93       	push	r27
 c10:	ef 93       	push	r30
 c12:	ff 93       	push	r31
	if (Timer1_OCB_Fptr != NULLPTR)
 c14:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <Timer1_OCB_Fptr>
 c18:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <Timer1_OCB_Fptr+0x1>
 c1c:	30 97       	sbiw	r30, 0x00	; 0
 c1e:	09 f0       	breq	.+2      	; 0xc22 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
 c20:	09 95       	icall
	}
}
 c22:	ff 91       	pop	r31
 c24:	ef 91       	pop	r30
 c26:	bf 91       	pop	r27
 c28:	af 91       	pop	r26
 c2a:	9f 91       	pop	r25
 c2c:	8f 91       	pop	r24
 c2e:	7f 91       	pop	r23
 c30:	6f 91       	pop	r22
 c32:	5f 91       	pop	r21
 c34:	4f 91       	pop	r20
 c36:	3f 91       	pop	r19
 c38:	2f 91       	pop	r18
 c3a:	0f 90       	pop	r0
 c3c:	0f be       	out	0x3f, r0	; 63
 c3e:	0f 90       	pop	r0
 c40:	1f 90       	pop	r1
 c42:	18 95       	reti

00000c44 <__vector_6>:
void __vector_6(void)
{
 c44:	1f 92       	push	r1
 c46:	0f 92       	push	r0
 c48:	0f b6       	in	r0, 0x3f	; 63
 c4a:	0f 92       	push	r0
 c4c:	11 24       	eor	r1, r1
 c4e:	2f 93       	push	r18
 c50:	3f 93       	push	r19
 c52:	4f 93       	push	r20
 c54:	5f 93       	push	r21
 c56:	6f 93       	push	r22
 c58:	7f 93       	push	r23
 c5a:	8f 93       	push	r24
 c5c:	9f 93       	push	r25
 c5e:	af 93       	push	r26
 c60:	bf 93       	push	r27
 c62:	ef 93       	push	r30
 c64:	ff 93       	push	r31
	if (Timer1_ICU_Fptr != NULLPTR)
 c66:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Timer1_ICU_Fptr>
 c6a:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Timer1_ICU_Fptr+0x1>
 c6e:	30 97       	sbiw	r30, 0x00	; 0
 c70:	09 f0       	breq	.+2      	; 0xc74 <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
 c72:	09 95       	icall
	}
 c74:	ff 91       	pop	r31
 c76:	ef 91       	pop	r30
 c78:	bf 91       	pop	r27
 c7a:	af 91       	pop	r26
 c7c:	9f 91       	pop	r25
 c7e:	8f 91       	pop	r24
 c80:	7f 91       	pop	r23
 c82:	6f 91       	pop	r22
 c84:	5f 91       	pop	r21
 c86:	4f 91       	pop	r20
 c88:	3f 91       	pop	r19
 c8a:	2f 91       	pop	r18
 c8c:	0f 90       	pop	r0
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	0f 90       	pop	r0
 c92:	1f 90       	pop	r1
 c94:	18 95       	reti

00000c96 <__divmodhi4>:
 c96:	97 fb       	bst	r25, 7
 c98:	07 2e       	mov	r0, r23
 c9a:	16 f4       	brtc	.+4      	; 0xca0 <__divmodhi4+0xa>
 c9c:	00 94       	com	r0
 c9e:	07 d0       	rcall	.+14     	; 0xcae <__divmodhi4_neg1>
 ca0:	77 fd       	sbrc	r23, 7
 ca2:	09 d0       	rcall	.+18     	; 0xcb6 <__divmodhi4_neg2>
 ca4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__udivmodhi4>
 ca8:	07 fc       	sbrc	r0, 7
 caa:	05 d0       	rcall	.+10     	; 0xcb6 <__divmodhi4_neg2>
 cac:	3e f4       	brtc	.+14     	; 0xcbc <__divmodhi4_exit>

00000cae <__divmodhi4_neg1>:
 cae:	90 95       	com	r25
 cb0:	81 95       	neg	r24
 cb2:	9f 4f       	sbci	r25, 0xFF	; 255
 cb4:	08 95       	ret

00000cb6 <__divmodhi4_neg2>:
 cb6:	70 95       	com	r23
 cb8:	61 95       	neg	r22
 cba:	7f 4f       	sbci	r23, 0xFF	; 255

00000cbc <__divmodhi4_exit>:
 cbc:	08 95       	ret

00000cbe <__udivmodhi4>:
 cbe:	aa 1b       	sub	r26, r26
 cc0:	bb 1b       	sub	r27, r27
 cc2:	51 e1       	ldi	r21, 0x11	; 17
 cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <__udivmodhi4_ep>

00000cc6 <__udivmodhi4_loop>:
 cc6:	aa 1f       	adc	r26, r26
 cc8:	bb 1f       	adc	r27, r27
 cca:	a6 17       	cp	r26, r22
 ccc:	b7 07       	cpc	r27, r23
 cce:	10 f0       	brcs	.+4      	; 0xcd4 <__udivmodhi4_ep>
 cd0:	a6 1b       	sub	r26, r22
 cd2:	b7 0b       	sbc	r27, r23

00000cd4 <__udivmodhi4_ep>:
 cd4:	88 1f       	adc	r24, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	5a 95       	dec	r21
 cda:	a9 f7       	brne	.-22     	; 0xcc6 <__udivmodhi4_loop>
 cdc:	80 95       	com	r24
 cde:	90 95       	com	r25
 ce0:	bc 01       	movw	r22, r24
 ce2:	cd 01       	movw	r24, r26
 ce4:	08 95       	ret

00000ce6 <_exit>:
 ce6:	f8 94       	cli

00000ce8 <__stop_program>:
 ce8:	ff cf       	rjmp	.-2      	; 0xce8 <__stop_program>
