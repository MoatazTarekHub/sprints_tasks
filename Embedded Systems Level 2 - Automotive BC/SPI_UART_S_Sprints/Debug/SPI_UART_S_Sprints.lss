
SPI_UART_S_Sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000db0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000144c  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000f0b  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a3 06 	call	0xd46	; 0xd46 <main>
  64:	0c 94 d6 06 	jmp	0xdac	; 0xdac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_Init>:



}
*/
void UART_Init(uint32_t BoudRate){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <UART_Init+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <UART_Init+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	6a 83       	std	Y+2, r22	; 0x02
  7c:	7b 83       	std	Y+3, r23	; 0x03
  7e:	8c 83       	std	Y+4, r24	; 0x04
  80:	9d 83       	std	Y+5, r25	; 0x05

	DIO_voidSetPinDirection(PORT_D,PIN1,OUTPUT);
  82:	83 e0       	ldi	r24, 0x03	; 3
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_D,PIN0,INPUT);
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_voidSetPinDirection>
UBRR_HELP=(F_CPU/(16*BoudRate))-1;
UBRRL=(uint8_t)(UBRR_HELP>>8);
UBRRH=(uint8_t)(UBRR_HELP);
*/
//select normal mode
 CLRBIT(UCSRA,1);
  96:	ab e2       	ldi	r26, 0x2B	; 43
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	eb e2       	ldi	r30, 0x2B	; 43
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	8c 93       	st	X, r24
 CLRBIT(UCSRA,0);
  a4:	ab e2       	ldi	r26, 0x2B	; 43
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	eb e2       	ldi	r30, 0x2B	; 43
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	8c 93       	st	X, r24

SETBIT(UCSRB,3);
  b2:	aa e2       	ldi	r26, 0x2A	; 42
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	ea e2       	ldi	r30, 0x2A	; 42
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8c 93       	st	X, r24
SETBIT(UCSRB,4);
  c0:	aa e2       	ldi	r26, 0x2A	; 42
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	ea e2       	ldi	r30, 0x2A	; 42
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	8c 93       	st	X, r24

uint8_t UCSRC_HELP=0;
  ce:	19 82       	std	Y+1, r1	; 0x01
SETBIT(UCSRC_HELP,7);
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	89 83       	std	Y+1, r24	; 0x01
// 8bit data
CLRBIT(UCSRB,2);
  d6:	aa e2       	ldi	r26, 0x2A	; 42
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ea e2       	ldi	r30, 0x2A	; 42
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8b 7f       	andi	r24, 0xFB	; 251
  e2:	8c 93       	st	X, r24
SETBIT(UCSRC_HELP,2);
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	89 83       	std	Y+1, r24	; 0x01
SETBIT(UCSRC_HELP,1);
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	89 83       	std	Y+1, r24	; 0x01
//asynch.
CLRBIT(UCSRC_HELP,6);
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	89 83       	std	Y+1, r24	; 0x01
//patity mode =disable
CLRBIT(UCSRC_HELP,4);
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	8f 7e       	andi	r24, 0xEF	; 239
  fa:	89 83       	std	Y+1, r24	; 0x01
CLRBIT(UCSRC_HELP,5);
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	8f 7d       	andi	r24, 0xDF	; 223
 100:	89 83       	std	Y+1, r24	; 0x01
// 1 stop bit
CLRBIT(UCSRC_HELP,3);
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	87 7f       	andi	r24, 0xF7	; 247
 106:	89 83       	std	Y+1, r24	; 0x01

UCSRC=UCSRC_HELP;
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	80 83       	st	Z, r24
UBRRL=51;
 110:	e9 e2       	ldi	r30, 0x29	; 41
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	83 e3       	ldi	r24, 0x33	; 51
 116:	80 83       	st	Z, r24
UBRRH=0;
 118:	e0 e4       	ldi	r30, 0x40	; 64
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 82       	st	Z, r1
}
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	08 95       	ret

0000012e <UART_Recive>:

uint8_t UART_Recive(void){
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	0f 92       	push	r0
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
uint8_t recived_data;
	while (0==GETBIT(UCSRA,7));
 138:	eb e2       	ldi	r30, 0x2B	; 43
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	dc f7       	brge	.-10     	; 0x138 <UART_Recive+0xa>
recived_data=UDR;
 142:	ec e2       	ldi	r30, 0x2C	; 44
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	89 83       	std	Y+1, r24	; 0x01
return recived_data;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
}
 14c:	0f 90       	pop	r0
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

00000154 <UART_Transmite>:
		UART_Transmite( Copy_Puint8_tString[Counter] );
	}

}
*/
void UART_Transmite(uint8_t Data){
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	0f 92       	push	r0
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	89 83       	std	Y+1, r24	; 0x01
	while (0==GETBIT(UCSRA,5));
 160:	eb e2       	ldi	r30, 0x2B	; 43
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	82 95       	swap	r24
 168:	86 95       	lsr	r24
 16a:	87 70       	andi	r24, 0x07	; 7
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	81 70       	andi	r24, 0x01	; 1
 172:	90 70       	andi	r25, 0x00	; 0
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	a1 f3       	breq	.-24     	; 0x160 <UART_Transmite+0xc>
	UDR=Data;
 178:	ec e2       	ldi	r30, 0x2C	; 44
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	80 83       	st	Z, r24
}
 180:	0f 90       	pop	r0
 182:	cf 91       	pop	r28
 184:	df 91       	pop	r29
 186:	08 95       	ret

00000188 <UART_Transmite_String>:

void UART_Transmite_String(uint8_t *str){
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	00 d0       	rcall	.+0      	; 0x18e <UART_Transmite_String+0x6>
 18e:	0f 92       	push	r0
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	9b 83       	std	Y+3, r25	; 0x03
 196:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
 198:	19 82       	std	Y+1, r1	; 0x01
 19a:	0e c0       	rjmp	.+28     	; 0x1b8 <UART_Transmite_String+0x30>
	while (str[i]!='\0'){
	UART_Transmite(str[i]);
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	9b 81       	ldd	r25, Y+3	; 0x03
 1a6:	fc 01       	movw	r30, r24
 1a8:	e2 0f       	add	r30, r18
 1aa:	f3 1f       	adc	r31, r19
 1ac:	80 81       	ld	r24, Z
 1ae:	0e 94 aa 00 	call	0x154	; 0x154 <UART_Transmite>
	i++;
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	89 83       	std	Y+1, r24	; 0x01
	UDR=Data;
}

void UART_Transmite_String(uint8_t *str){
	uint8_t i=0;
	while (str[i]!='\0'){
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	9b 81       	ldd	r25, Y+3	; 0x03
 1c2:	fc 01       	movw	r30, r24
 1c4:	e2 0f       	add	r30, r18
 1c6:	f3 1f       	adc	r31, r19
 1c8:	80 81       	ld	r24, Z
 1ca:	88 23       	and	r24, r24
 1cc:	39 f7       	brne	.-50     	; 0x19c <UART_Transmite_String+0x14>
	UART_Transmite(str[i]);
	i++;
}

}
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	cf 91       	pop	r28
 1d6:	df 91       	pop	r29
 1d8:	08 95       	ret

000001da <UART_Recive_String>:


void UART_Recive_String(uint8_t *str){
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	df 93       	push	r29
 1e0:	cf 93       	push	r28
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <UART_Recive_String+0xa>
 1e4:	0f 92       	push	r0
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	9b 83       	std	Y+3, r25	; 0x03
 1ec:	8a 83       	std	Y+2, r24	; 0x02
uint8_t i=0;
 1ee:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_Recive();
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	28 2f       	mov	r18, r24
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	9b 81       	ldd	r25, Y+3	; 0x03
 1fa:	8c 01       	movw	r16, r24
 1fc:	02 0f       	add	r16, r18
 1fe:	13 1f       	adc	r17, r19
 200:	0e 94 97 00 	call	0x12e	; 0x12e <UART_Recive>
 204:	f8 01       	movw	r30, r16
 206:	80 83       	st	Z, r24
 208:	0f c0       	rjmp	.+30     	; 0x228 <UART_Recive_String+0x4e>
	while(str[i]!='#'){

		i++;
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_Recive();
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	9b 81       	ldd	r25, Y+3	; 0x03
 21a:	8c 01       	movw	r16, r24
 21c:	02 0f       	add	r16, r18
 21e:	13 1f       	adc	r17, r19
 220:	0e 94 97 00 	call	0x12e	; 0x12e <UART_Recive>
 224:	f8 01       	movw	r30, r16
 226:	80 83       	st	Z, r24


void UART_Recive_String(uint8_t *str){
uint8_t i=0;
	str[i]=UART_Recive();
	while(str[i]!='#'){
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	9b 81       	ldd	r25, Y+3	; 0x03
 232:	fc 01       	movw	r30, r24
 234:	e2 0f       	add	r30, r18
 236:	f3 1f       	adc	r31, r19
 238:	80 81       	ld	r24, Z
 23a:	83 32       	cpi	r24, 0x23	; 35
 23c:	31 f7       	brne	.-52     	; 0x20a <UART_Recive_String+0x30>

		i++;
		str[i]=UART_Recive();

	}
	str[i]='\0';
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	9b 81       	ldd	r25, Y+3	; 0x03
 248:	fc 01       	movw	r30, r24
 24a:	e2 0f       	add	r30, r18
 24c:	f3 1f       	adc	r31, r19
 24e:	10 82       	st	Z, r1
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	cf 91       	pop	r28
 258:	df 91       	pop	r29
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	08 95       	ret

00000260 <SPI_MasterInit>:
#include "SPI_Config.h"




void SPI_MasterInit(void){
 260:	df 93       	push	r29
 262:	cf 93       	push	r28
 264:	0f 92       	push	r0
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62

	uint8_t SPCR_HELP=0;
 26a:	19 82       	std	Y+1, r1	; 0x01
	SETBIT(SPCR_HELP,6);//spi enable
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	80 64       	ori	r24, 0x40	; 64
 270:	89 83       	std	Y+1, r24	; 0x01

	SETBIT(SPCR_HELP,5);//lsb
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	80 62       	ori	r24, 0x20	; 32
 276:	89 83       	std	Y+1, r24	; 0x01
	SETBIT(SPCR_HELP,4);//master
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	80 61       	ori	r24, 0x10	; 16
 27c:	89 83       	std	Y+1, r24	; 0x01
	CLRBIT(SPCR_HELP,3);//rising
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	87 7f       	andi	r24, 0xF7	; 247
 282:	89 83       	std	Y+1, r24	; 0x01
	SETBIT(SPCR_HELP,2);//setup then sample
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	84 60       	ori	r24, 0x04	; 4
 288:	89 83       	std	Y+1, r24	; 0x01
	//clk f/4
	CLRBIT(SPCR_HELP,1);
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	8d 7f       	andi	r24, 0xFD	; 253
 28e:	89 83       	std	Y+1, r24	; 0x01
	CLRBIT(SPCR_HELP,0);
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	8e 7f       	andi	r24, 0xFE	; 254
 294:	89 83       	std	Y+1, r24	; 0x01
	CLRBIT(SPSR,0);
 296:	ae e2       	ldi	r26, 0x2E	; 46
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	ee e2       	ldi	r30, 0x2E	; 46
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	8e 7f       	andi	r24, 0xFE	; 254
 2a2:	8c 93       	st	X, r24
	SPCR=SPCR_HELP;
 2a4:	ed e2       	ldi	r30, 0x2D	; 45
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	80 83       	st	Z, r24
	DIO_voidSetPinDirection(PORT_B,PIN4,OUTPUT);//ss
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	64 e0       	ldi	r22, 0x04	; 4
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_voidSetPinDirection>
	//DIO_VidSetPinValue(DIO_PORTB,DIO_PIN4,DIO_LOW);//ss

	DIO_voidSetPinDirection(PORT_B,PIN5,OUTPUT);//mosi
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	65 e0       	ldi	r22, 0x05	; 5
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN6,INPUT);//miso
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	66 e0       	ldi	r22, 0x06	; 6
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN7,OUTPUT);//clk
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	67 e0       	ldi	r22, 0x07	; 7
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_voidSetPinDirection>



}
 2d4:	0f 90       	pop	r0
 2d6:	cf 91       	pop	r28
 2d8:	df 91       	pop	r29
 2da:	08 95       	ret

000002dc <SPI_SlaveInit>:
void SPI_SlaveInit(void){
 2dc:	df 93       	push	r29
 2de:	cf 93       	push	r28
 2e0:	0f 92       	push	r0
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t SPCR_HELP=0;
 2e6:	19 82       	std	Y+1, r1	; 0x01



	SETBIT(SPCR_HELP,6);//spi enable
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	89 83       	std	Y+1, r24	; 0x01

	//SETBIT(SPCR_HELP,5);//lsb
	CLRBIT(SPCR_HELP,4);//slave
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	8f 7e       	andi	r24, 0xEF	; 239
 2f2:	89 83       	std	Y+1, r24	; 0x01
	//SETBIT(SPCR_HELP,3);//rising
	//SETBIT(SPCR_HELP,2);//setup then sample
	//clk f/4
	//CLRBIT(SPCR_HELP,1);
	//CLRBIT(SPCR_HELP,0);
	CLRBIT(SPSR,0);
 2f4:	ae e2       	ldi	r26, 0x2E	; 46
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	ee e2       	ldi	r30, 0x2E	; 46
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	8e 7f       	andi	r24, 0xFE	; 254
 300:	8c 93       	st	X, r24

	SPCR=SPCR_HELP;
 302:	ed e2       	ldi	r30, 0x2D	; 45
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	80 83       	st	Z, r24
	DIO_voidSetPinDirection(PORT_B,PIN4,INPUT);//ss
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	64 e0       	ldi	r22, 0x04	; 4
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORT_B,PIN4,LOW);//ss
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	64 e0       	ldi	r22, 0x04	; 4
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(PORT_B,PIN5,INPUT);//mosi
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	65 e0       	ldi	r22, 0x05	; 5
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN6,OUTPUT);//miso
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	66 e0       	ldi	r22, 0x06	; 6
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN7,INPUT);//clk
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	67 e0       	ldi	r22, 0x07	; 7
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_voidSetPinDirection>
}
 33c:	0f 90       	pop	r0
 33e:	cf 91       	pop	r28
 340:	df 91       	pop	r29
 342:	08 95       	ret

00000344 <SPI_MasterTransmit>:


void SPI_MasterTransmit(uint8_t cData){
 344:	df 93       	push	r29
 346:	cf 93       	push	r28
 348:	0f 92       	push	r0
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = cData;
 350:	ef e2       	ldi	r30, 0x2F	; 47
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	80 83       	st	Z, r24
	while(0==GETBIT(SPSR,7));
 358:	ee e2       	ldi	r30, 0x2E	; 46
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	88 23       	and	r24, r24
 360:	dc f7       	brge	.-10     	; 0x358 <SPI_MasterTransmit+0x14>

	//return SPDR;

}
 362:	0f 90       	pop	r0
 364:	cf 91       	pop	r28
 366:	df 91       	pop	r29
 368:	08 95       	ret

0000036a <SPI_SlaveReceive>:


uint8_t SPI_SlaveReceive(void){
 36a:	df 93       	push	r29
 36c:	cf 93       	push	r28
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62

	while(!(GETBIT(SPSR,7)));
 372:	ee e2       	ldi	r30, 0x2E	; 46
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	88 23       	and	r24, r24
 37a:	dc f7       	brge	.-10     	; 0x372 <SPI_SlaveReceive+0x8>
	return SPDR;
 37c:	ef e2       	ldi	r30, 0x2F	; 47
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z

}
 382:	cf 91       	pop	r28
 384:	df 91       	pop	r29
 386:	08 95       	ret

00000388 <SPI_Transmite_String>:
void SPI_Transmite_String(uint8_t *str){
 388:	df 93       	push	r29
 38a:	cf 93       	push	r28
 38c:	00 d0       	rcall	.+0      	; 0x38e <SPI_Transmite_String+0x6>
 38e:	0f 92       	push	r0
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	9b 83       	std	Y+3, r25	; 0x03
 396:	8a 83       	std	Y+2, r24	; 0x02
 398:	0e c0       	rjmp	.+28     	; 0x3b6 <SPI_Transmite_String+0x2e>
	uint8_t i;
	while (str[i]!='\0'){
		SPI_MasterTransmit(str[i]);
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	28 2f       	mov	r18, r24
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	9b 81       	ldd	r25, Y+3	; 0x03
 3a4:	fc 01       	movw	r30, r24
 3a6:	e2 0f       	add	r30, r18
 3a8:	f3 1f       	adc	r31, r19
 3aa:	80 81       	ld	r24, Z
 3ac:	0e 94 a2 01 	call	0x344	; 0x344 <SPI_MasterTransmit>
		i++;
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	89 83       	std	Y+1, r24	; 0x01
	return SPDR;

}
void SPI_Transmite_String(uint8_t *str){
	uint8_t i;
	while (str[i]!='\0'){
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	28 2f       	mov	r18, r24
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	9b 81       	ldd	r25, Y+3	; 0x03
 3c0:	fc 01       	movw	r30, r24
 3c2:	e2 0f       	add	r30, r18
 3c4:	f3 1f       	adc	r31, r19
 3c6:	80 81       	ld	r24, Z
 3c8:	88 23       	and	r24, r24
 3ca:	39 f7       	brne	.-50     	; 0x39a <SPI_Transmite_String+0x12>
		SPI_MasterTransmit(str[i]);
		i++;
	}
}
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	cf 91       	pop	r28
 3d4:	df 91       	pop	r29
 3d6:	08 95       	ret

000003d8 <SPI_Recive_String>:
void SPI_Recive_String(uint8_t *str){
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	df 93       	push	r29
 3de:	cf 93       	push	r28
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <SPI_Recive_String+0xa>
 3e2:	0f 92       	push	r0
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	9b 83       	std	Y+3, r25	; 0x03
 3ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
 3ec:	19 82       	std	Y+1, r1	; 0x01
	str[i]=SPI_SlaveReceive();
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	28 2f       	mov	r18, r24
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	9b 81       	ldd	r25, Y+3	; 0x03
 3f8:	8c 01       	movw	r16, r24
 3fa:	02 0f       	add	r16, r18
 3fc:	13 1f       	adc	r17, r19
 3fe:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_SlaveReceive>
 402:	f8 01       	movw	r30, r16
 404:	80 83       	st	Z, r24
 406:	0f c0       	rjmp	.+30     	; 0x426 <SPI_Recive_String+0x4e>
	while(str[i]!='#'){
	i++;
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	8f 5f       	subi	r24, 0xFF	; 255
 40c:	89 83       	std	Y+1, r24	; 0x01
		str[i]=SPI_SlaveReceive();
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	9b 81       	ldd	r25, Y+3	; 0x03
 418:	8c 01       	movw	r16, r24
 41a:	02 0f       	add	r16, r18
 41c:	13 1f       	adc	r17, r19
 41e:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_SlaveReceive>
 422:	f8 01       	movw	r30, r16
 424:	80 83       	st	Z, r24
	}
}
void SPI_Recive_String(uint8_t *str){
	uint8_t i=0;
	str[i]=SPI_SlaveReceive();
	while(str[i]!='#'){
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	8a 81       	ldd	r24, Y+2	; 0x02
 42e:	9b 81       	ldd	r25, Y+3	; 0x03
 430:	fc 01       	movw	r30, r24
 432:	e2 0f       	add	r30, r18
 434:	f3 1f       	adc	r31, r19
 436:	80 81       	ld	r24, Z
 438:	83 32       	cpi	r24, 0x23	; 35
 43a:	31 f7       	brne	.-52     	; 0x408 <SPI_Recive_String+0x30>
	i++;
		str[i]=SPI_SlaveReceive();
	}
	str[i]='\0';
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	9b 81       	ldd	r25, Y+3	; 0x03
 446:	fc 01       	movw	r30, r24
 448:	e2 0f       	add	r30, r18
 44a:	f3 1f       	adc	r31, r19
 44c:	10 82       	st	Z, r1

}
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	cf 91       	pop	r28
 456:	df 91       	pop	r29
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <DIO_voidSetPinValue>:
 * @param EN_Pin    PIN Number
 * @param EN_Value  HIGH or LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
 45e:	df 93       	push	r29
 460:	cf 93       	push	r28
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	28 97       	sbiw	r28, 0x08	; 8
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
 472:	8a 83       	std	Y+2, r24	; 0x02
 474:	6b 83       	std	Y+3, r22	; 0x03
 476:	4c 83       	std	Y+4, r20	; 0x04
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 478:	84 e0       	ldi	r24, 0x04	; 4
 47a:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Value == LOW)
 47c:	8c 81       	ldd	r24, Y+4	; 0x04
 47e:	88 23       	and	r24, r24
 480:	09 f0       	breq	.+2      	; 0x484 <DIO_voidSetPinValue+0x26>
 482:	76 c0       	rjmp	.+236    	; 0x570 <DIO_voidSetPinValue+0x112>
    {
        switch (EN_Port)
 484:	8a 81       	ldd	r24, Y+2	; 0x02
 486:	28 2f       	mov	r18, r24
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	38 87       	std	Y+8, r19	; 0x08
 48c:	2f 83       	std	Y+7, r18	; 0x07
 48e:	8f 81       	ldd	r24, Y+7	; 0x07
 490:	98 85       	ldd	r25, Y+8	; 0x08
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	91 05       	cpc	r25, r1
 496:	59 f1       	breq	.+86     	; 0x4ee <DIO_voidSetPinValue+0x90>
 498:	2f 81       	ldd	r18, Y+7	; 0x07
 49a:	38 85       	ldd	r19, Y+8	; 0x08
 49c:	22 30       	cpi	r18, 0x02	; 2
 49e:	31 05       	cpc	r19, r1
 4a0:	2c f4       	brge	.+10     	; 0x4ac <DIO_voidSetPinValue+0x4e>
 4a2:	8f 81       	ldd	r24, Y+7	; 0x07
 4a4:	98 85       	ldd	r25, Y+8	; 0x08
 4a6:	00 97       	sbiw	r24, 0x00	; 0
 4a8:	69 f0       	breq	.+26     	; 0x4c4 <DIO_voidSetPinValue+0x66>
 4aa:	60 c0       	rjmp	.+192    	; 0x56c <DIO_voidSetPinValue+0x10e>
 4ac:	2f 81       	ldd	r18, Y+7	; 0x07
 4ae:	38 85       	ldd	r19, Y+8	; 0x08
 4b0:	22 30       	cpi	r18, 0x02	; 2
 4b2:	31 05       	cpc	r19, r1
 4b4:	89 f1       	breq	.+98     	; 0x518 <DIO_voidSetPinValue+0xba>
 4b6:	8f 81       	ldd	r24, Y+7	; 0x07
 4b8:	98 85       	ldd	r25, Y+8	; 0x08
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	91 05       	cpc	r25, r1
 4be:	09 f4       	brne	.+2      	; 0x4c2 <DIO_voidSetPinValue+0x64>
 4c0:	40 c0       	rjmp	.+128    	; 0x542 <DIO_voidSetPinValue+0xe4>
 4c2:	54 c0       	rjmp	.+168    	; 0x56c <DIO_voidSetPinValue+0x10e>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
 4c4:	ab e3       	ldi	r26, 0x3B	; 59
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	eb e3       	ldi	r30, 0x3B	; 59
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	48 2f       	mov	r20, r24
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	28 2f       	mov	r18, r24
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 2e       	mov	r0, r18
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_voidSetPinValue+0x84>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	0a 94       	dec	r0
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_voidSetPinValue+0x80>
 4e6:	80 95       	com	r24
 4e8:	84 23       	and	r24, r20
 4ea:	8c 93       	st	X, r24
 4ec:	b5 c0       	rjmp	.+362    	; 0x658 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
 4ee:	a8 e3       	ldi	r26, 0x38	; 56
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	e8 e3       	ldi	r30, 0x38	; 56
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	8b 81       	ldd	r24, Y+3	; 0x03
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 2e       	mov	r0, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_voidSetPinValue+0xae>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_voidSetPinValue+0xaa>
 510:	80 95       	com	r24
 512:	84 23       	and	r24, r20
 514:	8c 93       	st	X, r24
 516:	a0 c0       	rjmp	.+320    	; 0x658 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
 518:	a5 e3       	ldi	r26, 0x35	; 53
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	e5 e3       	ldi	r30, 0x35	; 53
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	48 2f       	mov	r20, r24
 524:	8b 81       	ldd	r24, Y+3	; 0x03
 526:	28 2f       	mov	r18, r24
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 2e       	mov	r0, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_voidSetPinValue+0xd8>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_voidSetPinValue+0xd4>
 53a:	80 95       	com	r24
 53c:	84 23       	and	r24, r20
 53e:	8c 93       	st	X, r24
 540:	8b c0       	rjmp	.+278    	; 0x658 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
 542:	a2 e3       	ldi	r26, 0x32	; 50
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	e2 e3       	ldi	r30, 0x32	; 50
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	48 2f       	mov	r20, r24
 54e:	8b 81       	ldd	r24, Y+3	; 0x03
 550:	28 2f       	mov	r18, r24
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	02 2e       	mov	r0, r18
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_voidSetPinValue+0x102>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	0a 94       	dec	r0
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_voidSetPinValue+0xfe>
 564:	80 95       	com	r24
 566:	84 23       	and	r24, r20
 568:	8c 93       	st	X, r24
 56a:	76 c0       	rjmp	.+236    	; 0x658 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_DIOValue;
 56c:	19 82       	std	Y+1, r1	; 0x01
 56e:	74 c0       	rjmp	.+232    	; 0x658 <DIO_voidSetPinValue+0x1fa>
            break;
        }
    }
    else if (EN_Value == HIGH)
 570:	8c 81       	ldd	r24, Y+4	; 0x04
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	09 f0       	breq	.+2      	; 0x578 <DIO_voidSetPinValue+0x11a>
 576:	70 c0       	rjmp	.+224    	; 0x658 <DIO_voidSetPinValue+0x1fa>
    {
        switch (EN_Port)
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	28 2f       	mov	r18, r24
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	3e 83       	std	Y+6, r19	; 0x06
 580:	2d 83       	std	Y+5, r18	; 0x05
 582:	8d 81       	ldd	r24, Y+5	; 0x05
 584:	9e 81       	ldd	r25, Y+6	; 0x06
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	91 05       	cpc	r25, r1
 58a:	49 f1       	breq	.+82     	; 0x5de <DIO_voidSetPinValue+0x180>
 58c:	2d 81       	ldd	r18, Y+5	; 0x05
 58e:	3e 81       	ldd	r19, Y+6	; 0x06
 590:	22 30       	cpi	r18, 0x02	; 2
 592:	31 05       	cpc	r19, r1
 594:	2c f4       	brge	.+10     	; 0x5a0 <DIO_voidSetPinValue+0x142>
 596:	8d 81       	ldd	r24, Y+5	; 0x05
 598:	9e 81       	ldd	r25, Y+6	; 0x06
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	61 f0       	breq	.+24     	; 0x5b6 <DIO_voidSetPinValue+0x158>
 59e:	5b c0       	rjmp	.+182    	; 0x656 <DIO_voidSetPinValue+0x1f8>
 5a0:	2d 81       	ldd	r18, Y+5	; 0x05
 5a2:	3e 81       	ldd	r19, Y+6	; 0x06
 5a4:	22 30       	cpi	r18, 0x02	; 2
 5a6:	31 05       	cpc	r19, r1
 5a8:	71 f1       	breq	.+92     	; 0x606 <DIO_voidSetPinValue+0x1a8>
 5aa:	8d 81       	ldd	r24, Y+5	; 0x05
 5ac:	9e 81       	ldd	r25, Y+6	; 0x06
 5ae:	83 30       	cpi	r24, 0x03	; 3
 5b0:	91 05       	cpc	r25, r1
 5b2:	e9 f1       	breq	.+122    	; 0x62e <DIO_voidSetPinValue+0x1d0>
 5b4:	50 c0       	rjmp	.+160    	; 0x656 <DIO_voidSetPinValue+0x1f8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
 5b6:	ab e3       	ldi	r26, 0x3B	; 59
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	eb e3       	ldi	r30, 0x3B	; 59
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	48 2f       	mov	r20, r24
 5c2:	8b 81       	ldd	r24, Y+3	; 0x03
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 2e       	mov	r0, r18
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_voidSetPinValue+0x176>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	0a 94       	dec	r0
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_voidSetPinValue+0x172>
 5d8:	84 2b       	or	r24, r20
 5da:	8c 93       	st	X, r24
 5dc:	3d c0       	rjmp	.+122    	; 0x658 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
 5de:	a8 e3       	ldi	r26, 0x38	; 56
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	e8 e3       	ldi	r30, 0x38	; 56
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	48 2f       	mov	r20, r24
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	28 2f       	mov	r18, r24
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 2e       	mov	r0, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_voidSetPinValue+0x19e>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	0a 94       	dec	r0
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_voidSetPinValue+0x19a>
 600:	84 2b       	or	r24, r20
 602:	8c 93       	st	X, r24
 604:	29 c0       	rjmp	.+82     	; 0x658 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
 606:	a5 e3       	ldi	r26, 0x35	; 53
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	e5 e3       	ldi	r30, 0x35	; 53
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	48 2f       	mov	r20, r24
 612:	8b 81       	ldd	r24, Y+3	; 0x03
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 2e       	mov	r0, r18
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_voidSetPinValue+0x1c6>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	0a 94       	dec	r0
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_voidSetPinValue+0x1c2>
 628:	84 2b       	or	r24, r20
 62a:	8c 93       	st	X, r24
 62c:	15 c0       	rjmp	.+42     	; 0x658 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
 62e:	a2 e3       	ldi	r26, 0x32	; 50
 630:	b0 e0       	ldi	r27, 0x00	; 0
 632:	e2 e3       	ldi	r30, 0x32	; 50
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	48 2f       	mov	r20, r24
 63a:	8b 81       	ldd	r24, Y+3	; 0x03
 63c:	28 2f       	mov	r18, r24
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 2e       	mov	r0, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_voidSetPinValue+0x1ee>
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	0a 94       	dec	r0
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_voidSetPinValue+0x1ea>
 650:	84 2b       	or	r24, r20
 652:	8c 93       	st	X, r24
 654:	01 c0       	rjmp	.+2      	; 0x658 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_DIOValue;
 656:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
 658:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinValue */
 65a:	28 96       	adiw	r28, 0x08	; 8
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	f8 94       	cli
 660:	de bf       	out	0x3e, r29	; 62
 662:	0f be       	out	0x3f, r0	; 63
 664:	cd bf       	out	0x3d, r28	; 61
 666:	cf 91       	pop	r28
 668:	df 91       	pop	r29
 66a:	08 95       	ret

0000066c <DIO_voidSetPinDirection>:
 * @param EN_Pin  PIN Number
 * @param EN_Direction Direction of the Pin INPUT | OUTPUT
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
 66c:	df 93       	push	r29
 66e:	cf 93       	push	r28
 670:	cd b7       	in	r28, 0x3d	; 61
 672:	de b7       	in	r29, 0x3e	; 62
 674:	28 97       	sbiw	r28, 0x08	; 8
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	f8 94       	cli
 67a:	de bf       	out	0x3e, r29	; 62
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	cd bf       	out	0x3d, r28	; 61
 680:	8a 83       	std	Y+2, r24	; 0x02
 682:	6b 83       	std	Y+3, r22	; 0x03
 684:	4c 83       	std	Y+4, r20	; 0x04
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 686:	84 e0       	ldi	r24, 0x04	; 4
 688:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Direction == INPUT)
 68a:	8c 81       	ldd	r24, Y+4	; 0x04
 68c:	88 23       	and	r24, r24
 68e:	09 f0       	breq	.+2      	; 0x692 <DIO_voidSetPinDirection+0x26>
 690:	77 c0       	rjmp	.+238    	; 0x780 <DIO_voidSetPinDirection+0x114>
    {
        switch (EN_port)
 692:	8a 81       	ldd	r24, Y+2	; 0x02
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	38 87       	std	Y+8, r19	; 0x08
 69a:	2f 83       	std	Y+7, r18	; 0x07
 69c:	8f 81       	ldd	r24, Y+7	; 0x07
 69e:	98 85       	ldd	r25, Y+8	; 0x08
 6a0:	81 30       	cpi	r24, 0x01	; 1
 6a2:	91 05       	cpc	r25, r1
 6a4:	59 f1       	breq	.+86     	; 0x6fc <DIO_voidSetPinDirection+0x90>
 6a6:	2f 81       	ldd	r18, Y+7	; 0x07
 6a8:	38 85       	ldd	r19, Y+8	; 0x08
 6aa:	22 30       	cpi	r18, 0x02	; 2
 6ac:	31 05       	cpc	r19, r1
 6ae:	2c f4       	brge	.+10     	; 0x6ba <DIO_voidSetPinDirection+0x4e>
 6b0:	8f 81       	ldd	r24, Y+7	; 0x07
 6b2:	98 85       	ldd	r25, Y+8	; 0x08
 6b4:	00 97       	sbiw	r24, 0x00	; 0
 6b6:	69 f0       	breq	.+26     	; 0x6d2 <DIO_voidSetPinDirection+0x66>
 6b8:	60 c0       	rjmp	.+192    	; 0x77a <DIO_voidSetPinDirection+0x10e>
 6ba:	2f 81       	ldd	r18, Y+7	; 0x07
 6bc:	38 85       	ldd	r19, Y+8	; 0x08
 6be:	22 30       	cpi	r18, 0x02	; 2
 6c0:	31 05       	cpc	r19, r1
 6c2:	89 f1       	breq	.+98     	; 0x726 <DIO_voidSetPinDirection+0xba>
 6c4:	8f 81       	ldd	r24, Y+7	; 0x07
 6c6:	98 85       	ldd	r25, Y+8	; 0x08
 6c8:	83 30       	cpi	r24, 0x03	; 3
 6ca:	91 05       	cpc	r25, r1
 6cc:	09 f4       	brne	.+2      	; 0x6d0 <DIO_voidSetPinDirection+0x64>
 6ce:	40 c0       	rjmp	.+128    	; 0x750 <DIO_voidSetPinDirection+0xe4>
 6d0:	54 c0       	rjmp	.+168    	; 0x77a <DIO_voidSetPinDirection+0x10e>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
 6d2:	aa e3       	ldi	r26, 0x3A	; 58
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	ea e3       	ldi	r30, 0x3A	; 58
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	48 2f       	mov	r20, r24
 6de:	8b 81       	ldd	r24, Y+3	; 0x03
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	02 2e       	mov	r0, r18
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_voidSetPinDirection+0x84>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	0a 94       	dec	r0
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_voidSetPinDirection+0x80>
 6f4:	80 95       	com	r24
 6f6:	84 23       	and	r24, r20
 6f8:	8c 93       	st	X, r24
 6fa:	b7 c0       	rjmp	.+366    	; 0x86a <__stack+0xb>
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
 6fc:	a7 e3       	ldi	r26, 0x37	; 55
 6fe:	b0 e0       	ldi	r27, 0x00	; 0
 700:	e7 e3       	ldi	r30, 0x37	; 55
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	48 2f       	mov	r20, r24
 708:	8b 81       	ldd	r24, Y+3	; 0x03
 70a:	28 2f       	mov	r18, r24
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	02 2e       	mov	r0, r18
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_voidSetPinDirection+0xae>
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	0a 94       	dec	r0
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_voidSetPinDirection+0xaa>
 71e:	80 95       	com	r24
 720:	84 23       	and	r24, r20
 722:	8c 93       	st	X, r24
 724:	a2 c0       	rjmp	.+324    	; 0x86a <__stack+0xb>
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
 726:	a4 e3       	ldi	r26, 0x34	; 52
 728:	b0 e0       	ldi	r27, 0x00	; 0
 72a:	e4 e3       	ldi	r30, 0x34	; 52
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 81       	ld	r24, Z
 730:	48 2f       	mov	r20, r24
 732:	8b 81       	ldd	r24, Y+3	; 0x03
 734:	28 2f       	mov	r18, r24
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 2e       	mov	r0, r18
 73e:	02 c0       	rjmp	.+4      	; 0x744 <DIO_voidSetPinDirection+0xd8>
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	0a 94       	dec	r0
 746:	e2 f7       	brpl	.-8      	; 0x740 <DIO_voidSetPinDirection+0xd4>
 748:	80 95       	com	r24
 74a:	84 23       	and	r24, r20
 74c:	8c 93       	st	X, r24
 74e:	8d c0       	rjmp	.+282    	; 0x86a <__stack+0xb>
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
 750:	a1 e3       	ldi	r26, 0x31	; 49
 752:	b0 e0       	ldi	r27, 0x00	; 0
 754:	e1 e3       	ldi	r30, 0x31	; 49
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	80 81       	ld	r24, Z
 75a:	48 2f       	mov	r20, r24
 75c:	8b 81       	ldd	r24, Y+3	; 0x03
 75e:	28 2f       	mov	r18, r24
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 2e       	mov	r0, r18
 768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_voidSetPinDirection+0x102>
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	0a 94       	dec	r0
 770:	e2 f7       	brpl	.-8      	; 0x76a <DIO_voidSetPinDirection+0xfe>
 772:	80 95       	com	r24
 774:	84 23       	and	r24, r20
 776:	8c 93       	st	X, r24
 778:	78 c0       	rjmp	.+240    	; 0x86a <__stack+0xb>
            break;
        default:
            state = E_DIODirec;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	89 83       	std	Y+1, r24	; 0x01
 77e:	75 c0       	rjmp	.+234    	; 0x86a <__stack+0xb>
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
 780:	8c 81       	ldd	r24, Y+4	; 0x04
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	09 f0       	breq	.+2      	; 0x788 <DIO_voidSetPinDirection+0x11c>
 786:	71 c0       	rjmp	.+226    	; 0x86a <__stack+0xb>
    {
        switch (EN_port)
 788:	8a 81       	ldd	r24, Y+2	; 0x02
 78a:	28 2f       	mov	r18, r24
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	3e 83       	std	Y+6, r19	; 0x06
 790:	2d 83       	std	Y+5, r18	; 0x05
 792:	8d 81       	ldd	r24, Y+5	; 0x05
 794:	9e 81       	ldd	r25, Y+6	; 0x06
 796:	81 30       	cpi	r24, 0x01	; 1
 798:	91 05       	cpc	r25, r1
 79a:	49 f1       	breq	.+82     	; 0x7ee <DIO_voidSetPinDirection+0x182>
 79c:	2d 81       	ldd	r18, Y+5	; 0x05
 79e:	3e 81       	ldd	r19, Y+6	; 0x06
 7a0:	22 30       	cpi	r18, 0x02	; 2
 7a2:	31 05       	cpc	r19, r1
 7a4:	2c f4       	brge	.+10     	; 0x7b0 <DIO_voidSetPinDirection+0x144>
 7a6:	8d 81       	ldd	r24, Y+5	; 0x05
 7a8:	9e 81       	ldd	r25, Y+6	; 0x06
 7aa:	00 97       	sbiw	r24, 0x00	; 0
 7ac:	61 f0       	breq	.+24     	; 0x7c6 <DIO_voidSetPinDirection+0x15a>
 7ae:	5b c0       	rjmp	.+182    	; 0x866 <__stack+0x7>
 7b0:	2d 81       	ldd	r18, Y+5	; 0x05
 7b2:	3e 81       	ldd	r19, Y+6	; 0x06
 7b4:	22 30       	cpi	r18, 0x02	; 2
 7b6:	31 05       	cpc	r19, r1
 7b8:	71 f1       	breq	.+92     	; 0x816 <DIO_voidSetPinDirection+0x1aa>
 7ba:	8d 81       	ldd	r24, Y+5	; 0x05
 7bc:	9e 81       	ldd	r25, Y+6	; 0x06
 7be:	83 30       	cpi	r24, 0x03	; 3
 7c0:	91 05       	cpc	r25, r1
 7c2:	e9 f1       	breq	.+122    	; 0x83e <DIO_voidSetPinDirection+0x1d2>
 7c4:	50 c0       	rjmp	.+160    	; 0x866 <__stack+0x7>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
 7c6:	aa e3       	ldi	r26, 0x3A	; 58
 7c8:	b0 e0       	ldi	r27, 0x00	; 0
 7ca:	ea e3       	ldi	r30, 0x3A	; 58
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	48 2f       	mov	r20, r24
 7d2:	8b 81       	ldd	r24, Y+3	; 0x03
 7d4:	28 2f       	mov	r18, r24
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	02 2e       	mov	r0, r18
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <DIO_voidSetPinDirection+0x178>
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	0a 94       	dec	r0
 7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <DIO_voidSetPinDirection+0x174>
 7e8:	84 2b       	or	r24, r20
 7ea:	8c 93       	st	X, r24
 7ec:	3e c0       	rjmp	.+124    	; 0x86a <__stack+0xb>
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
 7ee:	a7 e3       	ldi	r26, 0x37	; 55
 7f0:	b0 e0       	ldi	r27, 0x00	; 0
 7f2:	e7 e3       	ldi	r30, 0x37	; 55
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	80 81       	ld	r24, Z
 7f8:	48 2f       	mov	r20, r24
 7fa:	8b 81       	ldd	r24, Y+3	; 0x03
 7fc:	28 2f       	mov	r18, r24
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	02 2e       	mov	r0, r18
 806:	02 c0       	rjmp	.+4      	; 0x80c <DIO_voidSetPinDirection+0x1a0>
 808:	88 0f       	add	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	0a 94       	dec	r0
 80e:	e2 f7       	brpl	.-8      	; 0x808 <DIO_voidSetPinDirection+0x19c>
 810:	84 2b       	or	r24, r20
 812:	8c 93       	st	X, r24
 814:	2a c0       	rjmp	.+84     	; 0x86a <__stack+0xb>
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
 816:	a4 e3       	ldi	r26, 0x34	; 52
 818:	b0 e0       	ldi	r27, 0x00	; 0
 81a:	e4 e3       	ldi	r30, 0x34	; 52
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	80 81       	ld	r24, Z
 820:	48 2f       	mov	r20, r24
 822:	8b 81       	ldd	r24, Y+3	; 0x03
 824:	28 2f       	mov	r18, r24
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	02 2e       	mov	r0, r18
 82e:	02 c0       	rjmp	.+4      	; 0x834 <DIO_voidSetPinDirection+0x1c8>
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	0a 94       	dec	r0
 836:	e2 f7       	brpl	.-8      	; 0x830 <DIO_voidSetPinDirection+0x1c4>
 838:	84 2b       	or	r24, r20
 83a:	8c 93       	st	X, r24
 83c:	16 c0       	rjmp	.+44     	; 0x86a <__stack+0xb>
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
 83e:	a1 e3       	ldi	r26, 0x31	; 49
 840:	b0 e0       	ldi	r27, 0x00	; 0
 842:	e1 e3       	ldi	r30, 0x31	; 49
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	48 2f       	mov	r20, r24
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	28 2f       	mov	r18, r24
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	02 2e       	mov	r0, r18
 856:	02 c0       	rjmp	.+4      	; 0x85c <DIO_voidSetPinDirection+0x1f0>
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	0a 94       	dec	r0
 85e:	e2 f7       	brpl	.-8      	; 0x858 <DIO_voidSetPinDirection+0x1ec>
 860:	84 2b       	or	r24, r20
 862:	8c 93       	st	X, r24
 864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
            break;
        default:
            state = E_DIODirec;
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }
    return state;
 86a:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinDirection */
 86c:	28 96       	adiw	r28, 0x08	; 8
 86e:	0f b6       	in	r0, 0x3f	; 63
 870:	f8 94       	cli
 872:	de bf       	out	0x3e, r29	; 62
 874:	0f be       	out	0x3f, r0	; 63
 876:	cd bf       	out	0x3d, r28	; 61
 878:	cf 91       	pop	r28
 87a:	df 91       	pop	r29
 87c:	08 95       	ret

0000087e <DIO_u8GetPinValue>:
 * @param EN_Port           PORT Name
 * @param EN_Pin            PIN Number
 * @return EN_value_type    return Pin HIGH | LOW
 */
EN_value_type DIO_u8GetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
 87e:	df 93       	push	r29
 880:	cf 93       	push	r28
 882:	00 d0       	rcall	.+0      	; 0x884 <DIO_u8GetPinValue+0x6>
 884:	00 d0       	rcall	.+0      	; 0x886 <DIO_u8GetPinValue+0x8>
 886:	0f 92       	push	r0
 888:	cd b7       	in	r28, 0x3d	; 61
 88a:	de b7       	in	r29, 0x3e	; 62
 88c:	8a 83       	std	Y+2, r24	; 0x02
 88e:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
 890:	8a 81       	ldd	r24, Y+2	; 0x02
 892:	28 2f       	mov	r18, r24
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	3d 83       	std	Y+5, r19	; 0x05
 898:	2c 83       	std	Y+4, r18	; 0x04
 89a:	4c 81       	ldd	r20, Y+4	; 0x04
 89c:	5d 81       	ldd	r21, Y+5	; 0x05
 89e:	41 30       	cpi	r20, 0x01	; 1
 8a0:	51 05       	cpc	r21, r1
 8a2:	41 f1       	breq	.+80     	; 0x8f4 <DIO_u8GetPinValue+0x76>
 8a4:	8c 81       	ldd	r24, Y+4	; 0x04
 8a6:	9d 81       	ldd	r25, Y+5	; 0x05
 8a8:	82 30       	cpi	r24, 0x02	; 2
 8aa:	91 05       	cpc	r25, r1
 8ac:	34 f4       	brge	.+12     	; 0x8ba <DIO_u8GetPinValue+0x3c>
 8ae:	2c 81       	ldd	r18, Y+4	; 0x04
 8b0:	3d 81       	ldd	r19, Y+5	; 0x05
 8b2:	21 15       	cp	r18, r1
 8b4:	31 05       	cpc	r19, r1
 8b6:	61 f0       	breq	.+24     	; 0x8d0 <DIO_u8GetPinValue+0x52>
 8b8:	52 c0       	rjmp	.+164    	; 0x95e <DIO_u8GetPinValue+0xe0>
 8ba:	4c 81       	ldd	r20, Y+4	; 0x04
 8bc:	5d 81       	ldd	r21, Y+5	; 0x05
 8be:	42 30       	cpi	r20, 0x02	; 2
 8c0:	51 05       	cpc	r21, r1
 8c2:	51 f1       	breq	.+84     	; 0x918 <DIO_u8GetPinValue+0x9a>
 8c4:	8c 81       	ldd	r24, Y+4	; 0x04
 8c6:	9d 81       	ldd	r25, Y+5	; 0x05
 8c8:	83 30       	cpi	r24, 0x03	; 3
 8ca:	91 05       	cpc	r25, r1
 8cc:	b9 f1       	breq	.+110    	; 0x93c <DIO_u8GetPinValue+0xbe>
 8ce:	47 c0       	rjmp	.+142    	; 0x95e <DIO_u8GetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
 8d0:	e9 e3       	ldi	r30, 0x39	; 57
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	28 2f       	mov	r18, r24
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	8b 81       	ldd	r24, Y+3	; 0x03
 8dc:	88 2f       	mov	r24, r24
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	a9 01       	movw	r20, r18
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <DIO_u8GetPinValue+0x6a>
 8e4:	55 95       	asr	r21
 8e6:	47 95       	ror	r20
 8e8:	8a 95       	dec	r24
 8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <DIO_u8GetPinValue+0x66>
 8ec:	ca 01       	movw	r24, r20
 8ee:	81 70       	andi	r24, 0x01	; 1
 8f0:	89 83       	std	Y+1, r24	; 0x01
 8f2:	35 c0       	rjmp	.+106    	; 0x95e <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
 8f4:	e6 e3       	ldi	r30, 0x36	; 54
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 81       	ld	r24, Z
 8fa:	28 2f       	mov	r18, r24
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	8b 81       	ldd	r24, Y+3	; 0x03
 900:	88 2f       	mov	r24, r24
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	a9 01       	movw	r20, r18
 906:	02 c0       	rjmp	.+4      	; 0x90c <DIO_u8GetPinValue+0x8e>
 908:	55 95       	asr	r21
 90a:	47 95       	ror	r20
 90c:	8a 95       	dec	r24
 90e:	e2 f7       	brpl	.-8      	; 0x908 <DIO_u8GetPinValue+0x8a>
 910:	ca 01       	movw	r24, r20
 912:	81 70       	andi	r24, 0x01	; 1
 914:	89 83       	std	Y+1, r24	; 0x01
 916:	23 c0       	rjmp	.+70     	; 0x95e <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
 918:	e3 e3       	ldi	r30, 0x33	; 51
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 81       	ld	r24, Z
 91e:	28 2f       	mov	r18, r24
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	8b 81       	ldd	r24, Y+3	; 0x03
 924:	88 2f       	mov	r24, r24
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	a9 01       	movw	r20, r18
 92a:	02 c0       	rjmp	.+4      	; 0x930 <DIO_u8GetPinValue+0xb2>
 92c:	55 95       	asr	r21
 92e:	47 95       	ror	r20
 930:	8a 95       	dec	r24
 932:	e2 f7       	brpl	.-8      	; 0x92c <DIO_u8GetPinValue+0xae>
 934:	ca 01       	movw	r24, r20
 936:	81 70       	andi	r24, 0x01	; 1
 938:	89 83       	std	Y+1, r24	; 0x01
 93a:	11 c0       	rjmp	.+34     	; 0x95e <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
 93c:	e0 e3       	ldi	r30, 0x30	; 48
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	28 2f       	mov	r18, r24
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	8b 81       	ldd	r24, Y+3	; 0x03
 948:	88 2f       	mov	r24, r24
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	a9 01       	movw	r20, r18
 94e:	02 c0       	rjmp	.+4      	; 0x954 <DIO_u8GetPinValue+0xd6>
 950:	55 95       	asr	r21
 952:	47 95       	ror	r20
 954:	8a 95       	dec	r24
 956:	e2 f7       	brpl	.-8      	; 0x950 <DIO_u8GetPinValue+0xd2>
 958:	ca 01       	movw	r24, r20
 95a:	81 70       	andi	r24, 0x01	; 1
 95c:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
 95e:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_u8GetPinValue */
 960:	0f 90       	pop	r0
 962:	0f 90       	pop	r0
 964:	0f 90       	pop	r0
 966:	0f 90       	pop	r0
 968:	0f 90       	pop	r0
 96a:	cf 91       	pop	r28
 96c:	df 91       	pop	r29
 96e:	08 95       	ret

00000970 <DIO_voidTogPin>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidTogPin(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
 970:	df 93       	push	r29
 972:	cf 93       	push	r28
 974:	00 d0       	rcall	.+0      	; 0x976 <DIO_voidTogPin+0x6>
 976:	00 d0       	rcall	.+0      	; 0x978 <DIO_voidTogPin+0x8>
 978:	0f 92       	push	r0
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
 97e:	8a 83       	std	Y+2, r24	; 0x02
 980:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 982:	84 e0       	ldi	r24, 0x04	; 4
 984:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
 986:	8a 81       	ldd	r24, Y+2	; 0x02
 988:	28 2f       	mov	r18, r24
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	3d 83       	std	Y+5, r19	; 0x05
 98e:	2c 83       	std	Y+4, r18	; 0x04
 990:	8c 81       	ldd	r24, Y+4	; 0x04
 992:	9d 81       	ldd	r25, Y+5	; 0x05
 994:	81 30       	cpi	r24, 0x01	; 1
 996:	91 05       	cpc	r25, r1
 998:	49 f1       	breq	.+82     	; 0x9ec <DIO_voidTogPin+0x7c>
 99a:	2c 81       	ldd	r18, Y+4	; 0x04
 99c:	3d 81       	ldd	r19, Y+5	; 0x05
 99e:	22 30       	cpi	r18, 0x02	; 2
 9a0:	31 05       	cpc	r19, r1
 9a2:	2c f4       	brge	.+10     	; 0x9ae <DIO_voidTogPin+0x3e>
 9a4:	8c 81       	ldd	r24, Y+4	; 0x04
 9a6:	9d 81       	ldd	r25, Y+5	; 0x05
 9a8:	00 97       	sbiw	r24, 0x00	; 0
 9aa:	61 f0       	breq	.+24     	; 0x9c4 <DIO_voidTogPin+0x54>
 9ac:	5b c0       	rjmp	.+182    	; 0xa64 <DIO_voidTogPin+0xf4>
 9ae:	2c 81       	ldd	r18, Y+4	; 0x04
 9b0:	3d 81       	ldd	r19, Y+5	; 0x05
 9b2:	22 30       	cpi	r18, 0x02	; 2
 9b4:	31 05       	cpc	r19, r1
 9b6:	71 f1       	breq	.+92     	; 0xa14 <DIO_voidTogPin+0xa4>
 9b8:	8c 81       	ldd	r24, Y+4	; 0x04
 9ba:	9d 81       	ldd	r25, Y+5	; 0x05
 9bc:	83 30       	cpi	r24, 0x03	; 3
 9be:	91 05       	cpc	r25, r1
 9c0:	e9 f1       	breq	.+122    	; 0xa3c <DIO_voidTogPin+0xcc>
 9c2:	50 c0       	rjmp	.+160    	; 0xa64 <DIO_voidTogPin+0xf4>
    {
    case PORT_A:
        TGLBIT(PORTA, EN_Pin);
 9c4:	ab e3       	ldi	r26, 0x3B	; 59
 9c6:	b0 e0       	ldi	r27, 0x00	; 0
 9c8:	eb e3       	ldi	r30, 0x3B	; 59
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	80 81       	ld	r24, Z
 9ce:	48 2f       	mov	r20, r24
 9d0:	8b 81       	ldd	r24, Y+3	; 0x03
 9d2:	28 2f       	mov	r18, r24
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	02 2e       	mov	r0, r18
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <DIO_voidTogPin+0x72>
 9de:	88 0f       	add	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	0a 94       	dec	r0
 9e4:	e2 f7       	brpl	.-8      	; 0x9de <DIO_voidTogPin+0x6e>
 9e6:	84 27       	eor	r24, r20
 9e8:	8c 93       	st	X, r24
 9ea:	3e c0       	rjmp	.+124    	; 0xa68 <DIO_voidTogPin+0xf8>
        break;
    case PORT_B:
        TGLBIT(PORTB, EN_Pin);
 9ec:	a8 e3       	ldi	r26, 0x38	; 56
 9ee:	b0 e0       	ldi	r27, 0x00	; 0
 9f0:	e8 e3       	ldi	r30, 0x38	; 56
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	48 2f       	mov	r20, r24
 9f8:	8b 81       	ldd	r24, Y+3	; 0x03
 9fa:	28 2f       	mov	r18, r24
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	02 2e       	mov	r0, r18
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <DIO_voidTogPin+0x9a>
 a06:	88 0f       	add	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	0a 94       	dec	r0
 a0c:	e2 f7       	brpl	.-8      	; 0xa06 <DIO_voidTogPin+0x96>
 a0e:	84 27       	eor	r24, r20
 a10:	8c 93       	st	X, r24
 a12:	2a c0       	rjmp	.+84     	; 0xa68 <DIO_voidTogPin+0xf8>
        break;
    case PORT_C:
        TGLBIT(PORTC, EN_Pin);
 a14:	a5 e3       	ldi	r26, 0x35	; 53
 a16:	b0 e0       	ldi	r27, 0x00	; 0
 a18:	e5 e3       	ldi	r30, 0x35	; 53
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	48 2f       	mov	r20, r24
 a20:	8b 81       	ldd	r24, Y+3	; 0x03
 a22:	28 2f       	mov	r18, r24
 a24:	30 e0       	ldi	r19, 0x00	; 0
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	02 2e       	mov	r0, r18
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <DIO_voidTogPin+0xc2>
 a2e:	88 0f       	add	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	0a 94       	dec	r0
 a34:	e2 f7       	brpl	.-8      	; 0xa2e <DIO_voidTogPin+0xbe>
 a36:	84 27       	eor	r24, r20
 a38:	8c 93       	st	X, r24
 a3a:	16 c0       	rjmp	.+44     	; 0xa68 <DIO_voidTogPin+0xf8>
        break;
    case PORT_D:
        TGLBIT(PORTD, EN_Pin);
 a3c:	a2 e3       	ldi	r26, 0x32	; 50
 a3e:	b0 e0       	ldi	r27, 0x00	; 0
 a40:	e2 e3       	ldi	r30, 0x32	; 50
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	80 81       	ld	r24, Z
 a46:	48 2f       	mov	r20, r24
 a48:	8b 81       	ldd	r24, Y+3	; 0x03
 a4a:	28 2f       	mov	r18, r24
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	02 2e       	mov	r0, r18
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <DIO_voidTogPin+0xea>
 a56:	88 0f       	add	r24, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	0a 94       	dec	r0
 a5c:	e2 f7       	brpl	.-8      	; 0xa56 <DIO_voidTogPin+0xe6>
 a5e:	84 27       	eor	r24, r20
 a60:	8c 93       	st	X, r24
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <DIO_voidTogPin+0xf8>
        break;
    default:
        state = E_DIOPORT;
 a64:	82 e0       	ldi	r24, 0x02	; 2
 a66:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return state;
 a68:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidTogPin */
 a6a:	0f 90       	pop	r0
 a6c:	0f 90       	pop	r0
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	0f 90       	pop	r0
 a74:	cf 91       	pop	r28
 a76:	df 91       	pop	r29
 a78:	08 95       	ret

00000a7a <DIO_voidSetPortValue>:
 * @param EN_Port PORT Name
 * @param EN_Value HIGH | LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
 a7a:	df 93       	push	r29
 a7c:	cf 93       	push	r28
 a7e:	00 d0       	rcall	.+0      	; 0xa80 <DIO_voidSetPortValue+0x6>
 a80:	00 d0       	rcall	.+0      	; 0xa82 <DIO_voidSetPortValue+0x8>
 a82:	0f 92       	push	r0
 a84:	cd b7       	in	r28, 0x3d	; 61
 a86:	de b7       	in	r29, 0x3e	; 62
 a88:	8a 83       	std	Y+2, r24	; 0x02
 a8a:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 a8c:	84 e0       	ldi	r24, 0x04	; 4
 a8e:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
 a90:	8a 81       	ldd	r24, Y+2	; 0x02
 a92:	28 2f       	mov	r18, r24
 a94:	30 e0       	ldi	r19, 0x00	; 0
 a96:	3d 83       	std	Y+5, r19	; 0x05
 a98:	2c 83       	std	Y+4, r18	; 0x04
 a9a:	8c 81       	ldd	r24, Y+4	; 0x04
 a9c:	9d 81       	ldd	r25, Y+5	; 0x05
 a9e:	81 30       	cpi	r24, 0x01	; 1
 aa0:	91 05       	cpc	r25, r1
 aa2:	d1 f0       	breq	.+52     	; 0xad8 <DIO_voidSetPortValue+0x5e>
 aa4:	2c 81       	ldd	r18, Y+4	; 0x04
 aa6:	3d 81       	ldd	r19, Y+5	; 0x05
 aa8:	22 30       	cpi	r18, 0x02	; 2
 aaa:	31 05       	cpc	r19, r1
 aac:	2c f4       	brge	.+10     	; 0xab8 <DIO_voidSetPortValue+0x3e>
 aae:	8c 81       	ldd	r24, Y+4	; 0x04
 ab0:	9d 81       	ldd	r25, Y+5	; 0x05
 ab2:	00 97       	sbiw	r24, 0x00	; 0
 ab4:	61 f0       	breq	.+24     	; 0xace <DIO_voidSetPortValue+0x54>
 ab6:	1f c0       	rjmp	.+62     	; 0xaf6 <DIO_voidSetPortValue+0x7c>
 ab8:	2c 81       	ldd	r18, Y+4	; 0x04
 aba:	3d 81       	ldd	r19, Y+5	; 0x05
 abc:	22 30       	cpi	r18, 0x02	; 2
 abe:	31 05       	cpc	r19, r1
 ac0:	81 f0       	breq	.+32     	; 0xae2 <DIO_voidSetPortValue+0x68>
 ac2:	8c 81       	ldd	r24, Y+4	; 0x04
 ac4:	9d 81       	ldd	r25, Y+5	; 0x05
 ac6:	83 30       	cpi	r24, 0x03	; 3
 ac8:	91 05       	cpc	r25, r1
 aca:	81 f0       	breq	.+32     	; 0xaec <DIO_voidSetPortValue+0x72>
 acc:	14 c0       	rjmp	.+40     	; 0xaf6 <DIO_voidSetPortValue+0x7c>
    {
    case PORT_A:
        PORTA = EN_Value;
 ace:	eb e3       	ldi	r30, 0x3B	; 59
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	8b 81       	ldd	r24, Y+3	; 0x03
 ad4:	80 83       	st	Z, r24
 ad6:	11 c0       	rjmp	.+34     	; 0xafa <DIO_voidSetPortValue+0x80>
        break;
    case PORT_B:
        PORTB = EN_Value;
 ad8:	e8 e3       	ldi	r30, 0x38	; 56
 ada:	f0 e0       	ldi	r31, 0x00	; 0
 adc:	8b 81       	ldd	r24, Y+3	; 0x03
 ade:	80 83       	st	Z, r24
 ae0:	0c c0       	rjmp	.+24     	; 0xafa <DIO_voidSetPortValue+0x80>
        break;
    case PORT_C:
        PORTC = EN_Value;
 ae2:	e5 e3       	ldi	r30, 0x35	; 53
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	8b 81       	ldd	r24, Y+3	; 0x03
 ae8:	80 83       	st	Z, r24
 aea:	07 c0       	rjmp	.+14     	; 0xafa <DIO_voidSetPortValue+0x80>
        break;
    case PORT_D:
        PORTD = EN_Value;
 aec:	e2 e3       	ldi	r30, 0x32	; 50
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	8b 81       	ldd	r24, Y+3	; 0x03
 af2:	80 83       	st	Z, r24
 af4:	02 c0       	rjmp	.+4      	; 0xafa <DIO_voidSetPortValue+0x80>
        break;
    default:
        state = E_DIOPORT;
 af6:	82 e0       	ldi	r24, 0x02	; 2
 af8:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
 afa:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPortValue */
 afc:	0f 90       	pop	r0
 afe:	0f 90       	pop	r0
 b00:	0f 90       	pop	r0
 b02:	0f 90       	pop	r0
 b04:	0f 90       	pop	r0
 b06:	cf 91       	pop	r28
 b08:	df 91       	pop	r29
 b0a:	08 95       	ret

00000b0c <DIO_voidSetPortDirection>:
 * @param EN_Port PORT Name
 * @param EN_Direction PORT Direction
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
 b0c:	df 93       	push	r29
 b0e:	cf 93       	push	r28
 b10:	00 d0       	rcall	.+0      	; 0xb12 <DIO_voidSetPortDirection+0x6>
 b12:	00 d0       	rcall	.+0      	; 0xb14 <DIO_voidSetPortDirection+0x8>
 b14:	0f 92       	push	r0
 b16:	cd b7       	in	r28, 0x3d	; 61
 b18:	de b7       	in	r29, 0x3e	; 62
 b1a:	8a 83       	std	Y+2, r24	; 0x02
 b1c:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 b1e:	84 e0       	ldi	r24, 0x04	; 4
 b20:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
 b22:	8a 81       	ldd	r24, Y+2	; 0x02
 b24:	28 2f       	mov	r18, r24
 b26:	30 e0       	ldi	r19, 0x00	; 0
 b28:	3d 83       	std	Y+5, r19	; 0x05
 b2a:	2c 83       	std	Y+4, r18	; 0x04
 b2c:	8c 81       	ldd	r24, Y+4	; 0x04
 b2e:	9d 81       	ldd	r25, Y+5	; 0x05
 b30:	81 30       	cpi	r24, 0x01	; 1
 b32:	91 05       	cpc	r25, r1
 b34:	d1 f0       	breq	.+52     	; 0xb6a <DIO_voidSetPortDirection+0x5e>
 b36:	2c 81       	ldd	r18, Y+4	; 0x04
 b38:	3d 81       	ldd	r19, Y+5	; 0x05
 b3a:	22 30       	cpi	r18, 0x02	; 2
 b3c:	31 05       	cpc	r19, r1
 b3e:	2c f4       	brge	.+10     	; 0xb4a <DIO_voidSetPortDirection+0x3e>
 b40:	8c 81       	ldd	r24, Y+4	; 0x04
 b42:	9d 81       	ldd	r25, Y+5	; 0x05
 b44:	00 97       	sbiw	r24, 0x00	; 0
 b46:	61 f0       	breq	.+24     	; 0xb60 <DIO_voidSetPortDirection+0x54>
 b48:	1f c0       	rjmp	.+62     	; 0xb88 <DIO_voidSetPortDirection+0x7c>
 b4a:	2c 81       	ldd	r18, Y+4	; 0x04
 b4c:	3d 81       	ldd	r19, Y+5	; 0x05
 b4e:	22 30       	cpi	r18, 0x02	; 2
 b50:	31 05       	cpc	r19, r1
 b52:	81 f0       	breq	.+32     	; 0xb74 <DIO_voidSetPortDirection+0x68>
 b54:	8c 81       	ldd	r24, Y+4	; 0x04
 b56:	9d 81       	ldd	r25, Y+5	; 0x05
 b58:	83 30       	cpi	r24, 0x03	; 3
 b5a:	91 05       	cpc	r25, r1
 b5c:	81 f0       	breq	.+32     	; 0xb7e <DIO_voidSetPortDirection+0x72>
 b5e:	14 c0       	rjmp	.+40     	; 0xb88 <DIO_voidSetPortDirection+0x7c>
    {
    case PORT_A:
        DDRA = EN_Direction;
 b60:	ea e3       	ldi	r30, 0x3A	; 58
 b62:	f0 e0       	ldi	r31, 0x00	; 0
 b64:	8b 81       	ldd	r24, Y+3	; 0x03
 b66:	80 83       	st	Z, r24
 b68:	11 c0       	rjmp	.+34     	; 0xb8c <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_B:
        DDRB = EN_Direction;
 b6a:	e7 e3       	ldi	r30, 0x37	; 55
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	8b 81       	ldd	r24, Y+3	; 0x03
 b70:	80 83       	st	Z, r24
 b72:	0c c0       	rjmp	.+24     	; 0xb8c <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_C:
        DDRC = EN_Direction;
 b74:	e4 e3       	ldi	r30, 0x34	; 52
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	8b 81       	ldd	r24, Y+3	; 0x03
 b7a:	80 83       	st	Z, r24
 b7c:	07 c0       	rjmp	.+14     	; 0xb8c <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_D:
        DDRD = EN_Direction;
 b7e:	e1 e3       	ldi	r30, 0x31	; 49
 b80:	f0 e0       	ldi	r31, 0x00	; 0
 b82:	8b 81       	ldd	r24, Y+3	; 0x03
 b84:	80 83       	st	Z, r24
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <DIO_voidSetPortDirection+0x80>
        break;
    default:
        state = E_DIOPORT;
 b88:	82 e0       	ldi	r24, 0x02	; 2
 b8a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
 b8c:	89 81       	ldd	r24, Y+1	; 0x01

} /* DIO_voidSetPortDirection */
 b8e:	0f 90       	pop	r0
 b90:	0f 90       	pop	r0
 b92:	0f 90       	pop	r0
 b94:	0f 90       	pop	r0
 b96:	0f 90       	pop	r0
 b98:	cf 91       	pop	r28
 b9a:	df 91       	pop	r29
 b9c:	08 95       	ret

00000b9e <DIO_voidInpullUp>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
 b9e:	df 93       	push	r29
 ba0:	cf 93       	push	r28
 ba2:	00 d0       	rcall	.+0      	; 0xba4 <DIO_voidInpullUp+0x6>
 ba4:	00 d0       	rcall	.+0      	; 0xba6 <DIO_voidInpullUp+0x8>
 ba6:	0f 92       	push	r0
 ba8:	cd b7       	in	r28, 0x3d	; 61
 baa:	de b7       	in	r29, 0x3e	; 62
 bac:	8a 83       	std	Y+2, r24	; 0x02
 bae:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 bb0:	84 e0       	ldi	r24, 0x04	; 4
 bb2:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
 bb4:	8a 81       	ldd	r24, Y+2	; 0x02
 bb6:	28 2f       	mov	r18, r24
 bb8:	30 e0       	ldi	r19, 0x00	; 0
 bba:	3d 83       	std	Y+5, r19	; 0x05
 bbc:	2c 83       	std	Y+4, r18	; 0x04
 bbe:	8c 81       	ldd	r24, Y+4	; 0x04
 bc0:	9d 81       	ldd	r25, Y+5	; 0x05
 bc2:	81 30       	cpi	r24, 0x01	; 1
 bc4:	91 05       	cpc	r25, r1
 bc6:	09 f4       	brne	.+2      	; 0xbca <DIO_voidInpullUp+0x2c>
 bc8:	3e c0       	rjmp	.+124    	; 0xc46 <DIO_voidInpullUp+0xa8>
 bca:	2c 81       	ldd	r18, Y+4	; 0x04
 bcc:	3d 81       	ldd	r19, Y+5	; 0x05
 bce:	22 30       	cpi	r18, 0x02	; 2
 bd0:	31 05       	cpc	r19, r1
 bd2:	2c f4       	brge	.+10     	; 0xbde <DIO_voidInpullUp+0x40>
 bd4:	8c 81       	ldd	r24, Y+4	; 0x04
 bd6:	9d 81       	ldd	r25, Y+5	; 0x05
 bd8:	00 97       	sbiw	r24, 0x00	; 0
 bda:	71 f0       	breq	.+28     	; 0xbf8 <DIO_voidInpullUp+0x5a>
 bdc:	a9 c0       	rjmp	.+338    	; 0xd30 <DIO_voidInpullUp+0x192>
 bde:	2c 81       	ldd	r18, Y+4	; 0x04
 be0:	3d 81       	ldd	r19, Y+5	; 0x05
 be2:	22 30       	cpi	r18, 0x02	; 2
 be4:	31 05       	cpc	r19, r1
 be6:	09 f4       	brne	.+2      	; 0xbea <DIO_voidInpullUp+0x4c>
 be8:	55 c0       	rjmp	.+170    	; 0xc94 <DIO_voidInpullUp+0xf6>
 bea:	8c 81       	ldd	r24, Y+4	; 0x04
 bec:	9d 81       	ldd	r25, Y+5	; 0x05
 bee:	83 30       	cpi	r24, 0x03	; 3
 bf0:	91 05       	cpc	r25, r1
 bf2:	09 f4       	brne	.+2      	; 0xbf6 <DIO_voidInpullUp+0x58>
 bf4:	76 c0       	rjmp	.+236    	; 0xce2 <DIO_voidInpullUp+0x144>
 bf6:	9c c0       	rjmp	.+312    	; 0xd30 <DIO_voidInpullUp+0x192>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
 bf8:	aa e3       	ldi	r26, 0x3A	; 58
 bfa:	b0 e0       	ldi	r27, 0x00	; 0
 bfc:	ea e3       	ldi	r30, 0x3A	; 58
 bfe:	f0 e0       	ldi	r31, 0x00	; 0
 c00:	80 81       	ld	r24, Z
 c02:	48 2f       	mov	r20, r24
 c04:	8b 81       	ldd	r24, Y+3	; 0x03
 c06:	28 2f       	mov	r18, r24
 c08:	30 e0       	ldi	r19, 0x00	; 0
 c0a:	81 e0       	ldi	r24, 0x01	; 1
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_voidInpullUp+0x76>
 c10:	88 0f       	add	r24, r24
 c12:	99 1f       	adc	r25, r25
 c14:	2a 95       	dec	r18
 c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_voidInpullUp+0x72>
 c18:	80 95       	com	r24
 c1a:	84 23       	and	r24, r20
 c1c:	8c 93       	st	X, r24
        SETBIT(PORTA, EN_Pin);
 c1e:	ab e3       	ldi	r26, 0x3B	; 59
 c20:	b0 e0       	ldi	r27, 0x00	; 0
 c22:	eb e3       	ldi	r30, 0x3B	; 59
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	80 81       	ld	r24, Z
 c28:	48 2f       	mov	r20, r24
 c2a:	8b 81       	ldd	r24, Y+3	; 0x03
 c2c:	28 2f       	mov	r18, r24
 c2e:	30 e0       	ldi	r19, 0x00	; 0
 c30:	81 e0       	ldi	r24, 0x01	; 1
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	02 2e       	mov	r0, r18
 c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_voidInpullUp+0x9e>
 c38:	88 0f       	add	r24, r24
 c3a:	99 1f       	adc	r25, r25
 c3c:	0a 94       	dec	r0
 c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_voidInpullUp+0x9a>
 c40:	84 2b       	or	r24, r20
 c42:	8c 93       	st	X, r24
 c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_voidInpullUp+0x196>
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
 c46:	a7 e3       	ldi	r26, 0x37	; 55
 c48:	b0 e0       	ldi	r27, 0x00	; 0
 c4a:	e7 e3       	ldi	r30, 0x37	; 55
 c4c:	f0 e0       	ldi	r31, 0x00	; 0
 c4e:	80 81       	ld	r24, Z
 c50:	48 2f       	mov	r20, r24
 c52:	8b 81       	ldd	r24, Y+3	; 0x03
 c54:	28 2f       	mov	r18, r24
 c56:	30 e0       	ldi	r19, 0x00	; 0
 c58:	81 e0       	ldi	r24, 0x01	; 1
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_voidInpullUp+0xc4>
 c5e:	88 0f       	add	r24, r24
 c60:	99 1f       	adc	r25, r25
 c62:	2a 95       	dec	r18
 c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_voidInpullUp+0xc0>
 c66:	80 95       	com	r24
 c68:	84 23       	and	r24, r20
 c6a:	8c 93       	st	X, r24
        SETBIT(PORTB, EN_Pin);
 c6c:	a8 e3       	ldi	r26, 0x38	; 56
 c6e:	b0 e0       	ldi	r27, 0x00	; 0
 c70:	e8 e3       	ldi	r30, 0x38	; 56
 c72:	f0 e0       	ldi	r31, 0x00	; 0
 c74:	80 81       	ld	r24, Z
 c76:	48 2f       	mov	r20, r24
 c78:	8b 81       	ldd	r24, Y+3	; 0x03
 c7a:	28 2f       	mov	r18, r24
 c7c:	30 e0       	ldi	r19, 0x00	; 0
 c7e:	81 e0       	ldi	r24, 0x01	; 1
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	02 2e       	mov	r0, r18
 c84:	02 c0       	rjmp	.+4      	; 0xc8a <DIO_voidInpullUp+0xec>
 c86:	88 0f       	add	r24, r24
 c88:	99 1f       	adc	r25, r25
 c8a:	0a 94       	dec	r0
 c8c:	e2 f7       	brpl	.-8      	; 0xc86 <DIO_voidInpullUp+0xe8>
 c8e:	84 2b       	or	r24, r20
 c90:	8c 93       	st	X, r24
 c92:	50 c0       	rjmp	.+160    	; 0xd34 <DIO_voidInpullUp+0x196>
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
 c94:	a4 e3       	ldi	r26, 0x34	; 52
 c96:	b0 e0       	ldi	r27, 0x00	; 0
 c98:	e4 e3       	ldi	r30, 0x34	; 52
 c9a:	f0 e0       	ldi	r31, 0x00	; 0
 c9c:	80 81       	ld	r24, Z
 c9e:	48 2f       	mov	r20, r24
 ca0:	8b 81       	ldd	r24, Y+3	; 0x03
 ca2:	28 2f       	mov	r18, r24
 ca4:	30 e0       	ldi	r19, 0x00	; 0
 ca6:	81 e0       	ldi	r24, 0x01	; 1
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	02 c0       	rjmp	.+4      	; 0xcb0 <DIO_voidInpullUp+0x112>
 cac:	88 0f       	add	r24, r24
 cae:	99 1f       	adc	r25, r25
 cb0:	2a 95       	dec	r18
 cb2:	e2 f7       	brpl	.-8      	; 0xcac <DIO_voidInpullUp+0x10e>
 cb4:	80 95       	com	r24
 cb6:	84 23       	and	r24, r20
 cb8:	8c 93       	st	X, r24
        SETBIT(PORTC, EN_Pin);
 cba:	a5 e3       	ldi	r26, 0x35	; 53
 cbc:	b0 e0       	ldi	r27, 0x00	; 0
 cbe:	e5 e3       	ldi	r30, 0x35	; 53
 cc0:	f0 e0       	ldi	r31, 0x00	; 0
 cc2:	80 81       	ld	r24, Z
 cc4:	48 2f       	mov	r20, r24
 cc6:	8b 81       	ldd	r24, Y+3	; 0x03
 cc8:	28 2f       	mov	r18, r24
 cca:	30 e0       	ldi	r19, 0x00	; 0
 ccc:	81 e0       	ldi	r24, 0x01	; 1
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	02 2e       	mov	r0, r18
 cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_voidInpullUp+0x13a>
 cd4:	88 0f       	add	r24, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	0a 94       	dec	r0
 cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_voidInpullUp+0x136>
 cdc:	84 2b       	or	r24, r20
 cde:	8c 93       	st	X, r24
 ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_voidInpullUp+0x196>
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
 ce2:	a1 e3       	ldi	r26, 0x31	; 49
 ce4:	b0 e0       	ldi	r27, 0x00	; 0
 ce6:	e1 e3       	ldi	r30, 0x31	; 49
 ce8:	f0 e0       	ldi	r31, 0x00	; 0
 cea:	80 81       	ld	r24, Z
 cec:	48 2f       	mov	r20, r24
 cee:	8b 81       	ldd	r24, Y+3	; 0x03
 cf0:	28 2f       	mov	r18, r24
 cf2:	30 e0       	ldi	r19, 0x00	; 0
 cf4:	81 e0       	ldi	r24, 0x01	; 1
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_voidInpullUp+0x160>
 cfa:	88 0f       	add	r24, r24
 cfc:	99 1f       	adc	r25, r25
 cfe:	2a 95       	dec	r18
 d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_voidInpullUp+0x15c>
 d02:	80 95       	com	r24
 d04:	84 23       	and	r24, r20
 d06:	8c 93       	st	X, r24
        SETBIT(PORTD, EN_Pin);
 d08:	a2 e3       	ldi	r26, 0x32	; 50
 d0a:	b0 e0       	ldi	r27, 0x00	; 0
 d0c:	e2 e3       	ldi	r30, 0x32	; 50
 d0e:	f0 e0       	ldi	r31, 0x00	; 0
 d10:	80 81       	ld	r24, Z
 d12:	48 2f       	mov	r20, r24
 d14:	8b 81       	ldd	r24, Y+3	; 0x03
 d16:	28 2f       	mov	r18, r24
 d18:	30 e0       	ldi	r19, 0x00	; 0
 d1a:	81 e0       	ldi	r24, 0x01	; 1
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	02 2e       	mov	r0, r18
 d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_voidInpullUp+0x188>
 d22:	88 0f       	add	r24, r24
 d24:	99 1f       	adc	r25, r25
 d26:	0a 94       	dec	r0
 d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_voidInpullUp+0x184>
 d2a:	84 2b       	or	r24, r20
 d2c:	8c 93       	st	X, r24
 d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_voidInpullUp+0x196>
        break;
    default:
        state = E_DIOPORT;
 d30:	82 e0       	ldi	r24, 0x02	; 2
 d32:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
 d34:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidInpullUp */
 d36:	0f 90       	pop	r0
 d38:	0f 90       	pop	r0
 d3a:	0f 90       	pop	r0
 d3c:	0f 90       	pop	r0
 d3e:	0f 90       	pop	r0
 d40:	cf 91       	pop	r28
 d42:	df 91       	pop	r29
 d44:	08 95       	ret

00000d46 <main>:
#include <util/delay.h>
#include "Uart_Interface.h"

#include "SPI_Interface.h"

int main(void){
 d46:	df 93       	push	r29
 d48:	cf 93       	push	r28
 d4a:	cd b7       	in	r28, 0x3d	; 61
 d4c:	de b7       	in	r29, 0x3e	; 62
 d4e:	c5 56       	subi	r28, 0x65	; 101
 d50:	d0 40       	sbci	r29, 0x00	; 0
 d52:	0f b6       	in	r0, 0x3f	; 63
 d54:	f8 94       	cli
 d56:	de bf       	out	0x3e, r29	; 62
 d58:	0f be       	out	0x3f, r0	; 63
 d5a:	cd bf       	out	0x3d, r28	; 61
	uint8_t data=0;
 d5c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t string[100]={0};
 d5e:	84 e6       	ldi	r24, 0x64	; 100
 d60:	fe 01       	movw	r30, r28
 d62:	32 96       	adiw	r30, 0x02	; 2
 d64:	df 01       	movw	r26, r30
 d66:	98 2f       	mov	r25, r24
 d68:	1d 92       	st	X+, r1
 d6a:	9a 95       	dec	r25
 d6c:	e9 f7       	brne	.-6      	; 0xd68 <main+0x22>
			SPI_SlaveInit();
 d6e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <SPI_SlaveInit>
			UART_Init(9600);
 d72:	60 e8       	ldi	r22, 0x80	; 128
 d74:	75 e2       	ldi	r23, 0x25	; 37
 d76:	80 e0       	ldi	r24, 0x00	; 0
 d78:	90 e0       	ldi	r25, 0x00	; 0
 d7a:	0e 94 36 00 	call	0x6c	; 0x6c <UART_Init>
			DIO_voidSetPinDirection(PORT_A,PIN0,OUTPUT);
 d7e:	80 e0       	ldi	r24, 0x00	; 0
 d80:	60 e0       	ldi	r22, 0x00	; 0
 d82:	41 e0       	ldi	r20, 0x01	; 1
 d84:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_voidSetPinDirection>
					DIO_voidSetPinValue(PORT_A,PIN0,LOW);
 d88:	80 e0       	ldi	r24, 0x00	; 0
 d8a:	60 e0       	ldi	r22, 0x00	; 0
 d8c:	40 e0       	ldi	r20, 0x00	; 0
 d8e:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_voidSetPinValue>
	while(1){

		SPI_Recive_String(string);
 d92:	ce 01       	movw	r24, r28
 d94:	02 96       	adiw	r24, 0x02	; 2
 d96:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <SPI_Recive_String>
		DIO_voidTogPin(PORT_A,PIN0);
 d9a:	80 e0       	ldi	r24, 0x00	; 0
 d9c:	60 e0       	ldi	r22, 0x00	; 0
 d9e:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_voidTogPin>

		UART_Transmite_String(string);
 da2:	ce 01       	movw	r24, r28
 da4:	02 96       	adiw	r24, 0x02	; 2
 da6:	0e 94 c4 00 	call	0x188	; 0x188 <UART_Transmite_String>
 daa:	f3 cf       	rjmp	.-26     	; 0xd92 <main+0x4c>

00000dac <_exit>:
 dac:	f8 94       	cli

00000dae <__stop_program>:
 dae:	ff cf       	rjmp	.-2      	; 0xdae <__stop_program>
