
SPI_Avr_M_Sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b8c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000105c  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000eab  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 aa 05 	call	0xb54	; 0xb54 <main>
  64:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_MasterInit>:
#include "SPI_Config.h"




void SPI_MasterInit(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORT_B,PIN4,OUTPUT);//ss
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	64 e0       	ldi	r22, 0x04	; 4
  7a:	41 e0       	ldi	r20, 0x01	; 1
  7c:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORT_B,PIN7,LOW);//ss
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	67 e0       	ldi	r22, 0x07	; 7
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(PORT_B,PIN5,OUTPUT);//mosi
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	65 e0       	ldi	r22, 0x05	; 5
  8e:	41 e0       	ldi	r20, 0x01	; 1
  90:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN6,INPUT);//miso
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	66 e0       	ldi	r22, 0x06	; 6
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN7,OUTPUT);//clk
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	67 e0       	ldi	r22, 0x07	; 7
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_voidSetPinDirection>

	uint8_t SPCR_HELP=0;
  a8:	19 82       	std	Y+1, r1	; 0x01
		SETBIT(SPCR_HELP,6);//spi enable
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	89 83       	std	Y+1, r24	; 0x01

		//SETBIT(SPCR_HELP,5);//lsb
		SETBIT(SPCR_HELP,4);//master
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	89 83       	std	Y+1, r24	; 0x01
		//SETBIT(SPCR_HELP,3);//rising
		//SETBIT(SPCR_HELP,2);//setup then sample
		//clk f/4
		CLRBIT(SPCR_HELP,1);
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	89 83       	std	Y+1, r24	; 0x01
		CLRBIT(SPCR_HELP,0);
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	89 83       	std	Y+1, r24	; 0x01
		CLRBIT(SPSR,0);
  c2:	ae e2       	ldi	r26, 0x2E	; 46
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	ee e2       	ldi	r30, 0x2E	; 46
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	8c 93       	st	X, r24
	SPCR=SPCR_HELP;
  d0:	ed e2       	ldi	r30, 0x2D	; 45
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	80 83       	st	Z, r24




}
  d8:	0f 90       	pop	r0
  da:	cf 91       	pop	r28
  dc:	df 91       	pop	r29
  de:	08 95       	ret

000000e0 <SPI_SlaveInit>:
SPDR = cData;
 Wait for transmission complete
while(!(SPSR & (1<<SPIF)))
;
}*/
void SPI_SlaveInit(void){
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	0f 92       	push	r0
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
	uint8_t SPCR_HELP=0;
  ea:	19 82       	std	Y+1, r1	; 0x01

	DIO_voidSetPinDirection(PORT_B,PIN4,INPUT);//ss
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	64 e0       	ldi	r22, 0x04	; 4
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_voidSetPinDirection>
		//DIO_VidSetPinValue(DIO_PORTB,DIO_PIN4,DIO_LOW);//ss

	DIO_voidSetPinDirection(PORT_B,PIN5,INPUT);//mosi
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	65 e0       	ldi	r22, 0x05	; 5
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN6,OUTPUT);//miso
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	66 e0       	ldi	r22, 0x06	; 6
 104:	41 e0       	ldi	r20, 0x01	; 1
 106:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN7,INPUT);//clk
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	67 e0       	ldi	r22, 0x07	; 7
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_voidSetPinDirection>
			SETBIT(SPCR_HELP,6);//spi enable
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	80 64       	ori	r24, 0x40	; 64
 118:	89 83       	std	Y+1, r24	; 0x01

				//SETBIT(SPCR_HELP,5);//lsb
				CLRBIT(SPCR_HELP,4);//slave
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	89 83       	std	Y+1, r24	; 0x01
				SETBIT(SPCR_HELP,3);//rising
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	88 60       	ori	r24, 0x08	; 8
 124:	89 83       	std	Y+1, r24	; 0x01
				CLRBIT(SPCR_HELP,2);//setup then sample
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	89 83       	std	Y+1, r24	; 0x01
				//clk f/4
				CLRBIT(SPCR_HELP,1);
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	8d 7f       	andi	r24, 0xFD	; 253
 130:	89 83       	std	Y+1, r24	; 0x01
				CLRBIT(SPCR_HELP,0);
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	89 83       	std	Y+1, r24	; 0x01
				//CLRBIT(SPSR,0);

			SPCR=SPCR_HELP;
 138:	ed e2       	ldi	r30, 0x2D	; 45
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	80 83       	st	Z, r24

}
 140:	0f 90       	pop	r0
 142:	cf 91       	pop	r28
 144:	df 91       	pop	r29
 146:	08 95       	ret

00000148 <SPI_MasterTransmit>:


void SPI_MasterTransmit(uint8_t cData){
 148:	df 93       	push	r29
 14a:	cf 93       	push	r28
 14c:	0f 92       	push	r0
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	89 83       	std	Y+1, r24	; 0x01
	SPDR = cData;
 154:	ef e2       	ldi	r30, 0x2F	; 47
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	80 83       	st	Z, r24
while(!(GETBIT(SPSR,7)));
 15c:	ee e2       	ldi	r30, 0x2E	; 46
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 23       	and	r24, r24
 164:	dc f7       	brge	.-10     	; 0x15c <SPI_MasterTransmit+0x14>

cData=SPDR;
 166:	ef e2       	ldi	r30, 0x2F	; 47
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	89 83       	std	Y+1, r24	; 0x01
}
 16e:	0f 90       	pop	r0
 170:	cf 91       	pop	r28
 172:	df 91       	pop	r29
 174:	08 95       	ret

00000176 <SPI_SlaveReceive>:


uint8_t SPI_SlaveReceive(void){
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62

	while(0==GETBIT(SPSR,7));
 17e:	ee e2       	ldi	r30, 0x2E	; 46
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	dc f7       	brge	.-10     	; 0x17e <SPI_SlaveReceive+0x8>
	return SPDR;
 188:	ef e2       	ldi	r30, 0x2F	; 47
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z

}
 18e:	cf 91       	pop	r28
 190:	df 91       	pop	r29
 192:	08 95       	ret

00000194 <SPI_Transmite_String>:
void SPI_Transmite_String(uint8_t *str){
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	00 d0       	rcall	.+0      	; 0x19a <SPI_Transmite_String+0x6>
 19a:	0f 92       	push	r0
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	9b 83       	std	Y+3, r25	; 0x03
 1a2:	8a 83       	std	Y+2, r24	; 0x02
 1a4:	0e c0       	rjmp	.+28     	; 0x1c2 <SPI_Transmite_String+0x2e>
	uint8_t i;
	while (str[i]!='\0'){
		SPI_MasterTransmit(str[i]);
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	28 2f       	mov	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	9b 81       	ldd	r25, Y+3	; 0x03
 1b0:	fc 01       	movw	r30, r24
 1b2:	e2 0f       	add	r30, r18
 1b4:	f3 1f       	adc	r31, r19
 1b6:	80 81       	ld	r24, Z
 1b8:	0e 94 a4 00 	call	0x148	; 0x148 <SPI_MasterTransmit>
	i++;
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	89 83       	std	Y+1, r24	; 0x01
	return SPDR;

}
void SPI_Transmite_String(uint8_t *str){
	uint8_t i;
	while (str[i]!='\0'){
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	9b 81       	ldd	r25, Y+3	; 0x03
 1cc:	fc 01       	movw	r30, r24
 1ce:	e2 0f       	add	r30, r18
 1d0:	f3 1f       	adc	r31, r19
 1d2:	80 81       	ld	r24, Z
 1d4:	88 23       	and	r24, r24
 1d6:	39 f7       	brne	.-50     	; 0x1a6 <SPI_Transmite_String+0x12>
		SPI_MasterTransmit(str[i]);
	i++;
	}
}
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	cf 91       	pop	r28
 1e0:	df 91       	pop	r29
 1e2:	08 95       	ret

000001e4 <SPI_Recive_String>:
void SPI_Recive_String(uint8_t *str){
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	df 93       	push	r29
 1ea:	cf 93       	push	r28
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <SPI_Recive_String+0xa>
 1ee:	0f 92       	push	r0
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	9b 83       	std	Y+3, r25	; 0x03
 1f6:	8a 83       	std	Y+2, r24	; 0x02
uint8_t i=0;
 1f8:	19 82       	std	Y+1, r1	; 0x01
	str[i]=SPI_SlaveReceive();
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	9b 81       	ldd	r25, Y+3	; 0x03
 204:	8c 01       	movw	r16, r24
 206:	02 0f       	add	r16, r18
 208:	13 1f       	adc	r17, r19
 20a:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_SlaveReceive>
 20e:	f8 01       	movw	r30, r16
 210:	80 83       	st	Z, r24
 212:	0f c0       	rjmp	.+30     	; 0x232 <SPI_Recive_String+0x4e>
	while(str[i]!='#'){

		i++;
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	89 83       	std	Y+1, r24	; 0x01
		str[i]=SPI_SlaveReceive();
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	28 2f       	mov	r18, r24
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	8a 81       	ldd	r24, Y+2	; 0x02
 222:	9b 81       	ldd	r25, Y+3	; 0x03
 224:	8c 01       	movw	r16, r24
 226:	02 0f       	add	r16, r18
 228:	13 1f       	adc	r17, r19
 22a:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_SlaveReceive>
 22e:	f8 01       	movw	r30, r16
 230:	80 83       	st	Z, r24
	}
}
void SPI_Recive_String(uint8_t *str){
uint8_t i=0;
	str[i]=SPI_SlaveReceive();
	while(str[i]!='#'){
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	28 2f       	mov	r18, r24
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	8a 81       	ldd	r24, Y+2	; 0x02
 23a:	9b 81       	ldd	r25, Y+3	; 0x03
 23c:	fc 01       	movw	r30, r24
 23e:	e2 0f       	add	r30, r18
 240:	f3 1f       	adc	r31, r19
 242:	80 81       	ld	r24, Z
 244:	83 32       	cpi	r24, 0x23	; 35
 246:	31 f7       	brne	.-52     	; 0x214 <SPI_Recive_String+0x30>

		i++;
		str[i]=SPI_SlaveReceive();

	}
	str[i]='\n';
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	28 2f       	mov	r18, r24
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	9b 81       	ldd	r25, Y+3	; 0x03
 252:	fc 01       	movw	r30, r24
 254:	e2 0f       	add	r30, r18
 256:	f3 1f       	adc	r31, r19
 258:	8a e0       	ldi	r24, 0x0A	; 10
 25a:	80 83       	st	Z, r24
}
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	cf 91       	pop	r28
 264:	df 91       	pop	r29
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <DIO_voidSetPinValue>:
 * @param EN_Pin    PIN Number
 * @param EN_Value  HIGH or LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	28 97       	sbiw	r28, 0x08	; 8
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	8a 83       	std	Y+2, r24	; 0x02
 282:	6b 83       	std	Y+3, r22	; 0x03
 284:	4c 83       	std	Y+4, r20	; 0x04
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 286:	84 e0       	ldi	r24, 0x04	; 4
 288:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Value == LOW)
 28a:	8c 81       	ldd	r24, Y+4	; 0x04
 28c:	88 23       	and	r24, r24
 28e:	09 f0       	breq	.+2      	; 0x292 <DIO_voidSetPinValue+0x26>
 290:	76 c0       	rjmp	.+236    	; 0x37e <DIO_voidSetPinValue+0x112>
    {
        switch (EN_Port)
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	38 87       	std	Y+8, r19	; 0x08
 29a:	2f 83       	std	Y+7, r18	; 0x07
 29c:	8f 81       	ldd	r24, Y+7	; 0x07
 29e:	98 85       	ldd	r25, Y+8	; 0x08
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	91 05       	cpc	r25, r1
 2a4:	59 f1       	breq	.+86     	; 0x2fc <DIO_voidSetPinValue+0x90>
 2a6:	2f 81       	ldd	r18, Y+7	; 0x07
 2a8:	38 85       	ldd	r19, Y+8	; 0x08
 2aa:	22 30       	cpi	r18, 0x02	; 2
 2ac:	31 05       	cpc	r19, r1
 2ae:	2c f4       	brge	.+10     	; 0x2ba <DIO_voidSetPinValue+0x4e>
 2b0:	8f 81       	ldd	r24, Y+7	; 0x07
 2b2:	98 85       	ldd	r25, Y+8	; 0x08
 2b4:	00 97       	sbiw	r24, 0x00	; 0
 2b6:	69 f0       	breq	.+26     	; 0x2d2 <DIO_voidSetPinValue+0x66>
 2b8:	60 c0       	rjmp	.+192    	; 0x37a <DIO_voidSetPinValue+0x10e>
 2ba:	2f 81       	ldd	r18, Y+7	; 0x07
 2bc:	38 85       	ldd	r19, Y+8	; 0x08
 2be:	22 30       	cpi	r18, 0x02	; 2
 2c0:	31 05       	cpc	r19, r1
 2c2:	89 f1       	breq	.+98     	; 0x326 <DIO_voidSetPinValue+0xba>
 2c4:	8f 81       	ldd	r24, Y+7	; 0x07
 2c6:	98 85       	ldd	r25, Y+8	; 0x08
 2c8:	83 30       	cpi	r24, 0x03	; 3
 2ca:	91 05       	cpc	r25, r1
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <DIO_voidSetPinValue+0x64>
 2ce:	40 c0       	rjmp	.+128    	; 0x350 <DIO_voidSetPinValue+0xe4>
 2d0:	54 c0       	rjmp	.+168    	; 0x37a <DIO_voidSetPinValue+0x10e>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
 2d2:	ab e3       	ldi	r26, 0x3B	; 59
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	eb e3       	ldi	r30, 0x3B	; 59
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	48 2f       	mov	r20, r24
 2de:	8b 81       	ldd	r24, Y+3	; 0x03
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 2e       	mov	r0, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_voidSetPinValue+0x84>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_voidSetPinValue+0x80>
 2f4:	80 95       	com	r24
 2f6:	84 23       	and	r24, r20
 2f8:	8c 93       	st	X, r24
 2fa:	b5 c0       	rjmp	.+362    	; 0x466 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
 2fc:	a8 e3       	ldi	r26, 0x38	; 56
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	e8 e3       	ldi	r30, 0x38	; 56
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	48 2f       	mov	r20, r24
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	28 2f       	mov	r18, r24
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 2e       	mov	r0, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_voidSetPinValue+0xae>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_voidSetPinValue+0xaa>
 31e:	80 95       	com	r24
 320:	84 23       	and	r24, r20
 322:	8c 93       	st	X, r24
 324:	a0 c0       	rjmp	.+320    	; 0x466 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
 326:	a5 e3       	ldi	r26, 0x35	; 53
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e5 e3       	ldi	r30, 0x35	; 53
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	48 2f       	mov	r20, r24
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	28 2f       	mov	r18, r24
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 2e       	mov	r0, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_voidSetPinValue+0xd8>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_voidSetPinValue+0xd4>
 348:	80 95       	com	r24
 34a:	84 23       	and	r24, r20
 34c:	8c 93       	st	X, r24
 34e:	8b c0       	rjmp	.+278    	; 0x466 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
 350:	a2 e3       	ldi	r26, 0x32	; 50
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e2 e3       	ldi	r30, 0x32	; 50
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	8b 81       	ldd	r24, Y+3	; 0x03
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidSetPinValue+0x102>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidSetPinValue+0xfe>
 372:	80 95       	com	r24
 374:	84 23       	and	r24, r20
 376:	8c 93       	st	X, r24
 378:	76 c0       	rjmp	.+236    	; 0x466 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_DIOValue;
 37a:	19 82       	std	Y+1, r1	; 0x01
 37c:	74 c0       	rjmp	.+232    	; 0x466 <DIO_voidSetPinValue+0x1fa>
            break;
        }
    }
    else if (EN_Value == HIGH)
 37e:	8c 81       	ldd	r24, Y+4	; 0x04
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	09 f0       	breq	.+2      	; 0x386 <DIO_voidSetPinValue+0x11a>
 384:	70 c0       	rjmp	.+224    	; 0x466 <DIO_voidSetPinValue+0x1fa>
    {
        switch (EN_Port)
 386:	8a 81       	ldd	r24, Y+2	; 0x02
 388:	28 2f       	mov	r18, r24
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	3e 83       	std	Y+6, r19	; 0x06
 38e:	2d 83       	std	Y+5, r18	; 0x05
 390:	8d 81       	ldd	r24, Y+5	; 0x05
 392:	9e 81       	ldd	r25, Y+6	; 0x06
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	91 05       	cpc	r25, r1
 398:	49 f1       	breq	.+82     	; 0x3ec <DIO_voidSetPinValue+0x180>
 39a:	2d 81       	ldd	r18, Y+5	; 0x05
 39c:	3e 81       	ldd	r19, Y+6	; 0x06
 39e:	22 30       	cpi	r18, 0x02	; 2
 3a0:	31 05       	cpc	r19, r1
 3a2:	2c f4       	brge	.+10     	; 0x3ae <DIO_voidSetPinValue+0x142>
 3a4:	8d 81       	ldd	r24, Y+5	; 0x05
 3a6:	9e 81       	ldd	r25, Y+6	; 0x06
 3a8:	00 97       	sbiw	r24, 0x00	; 0
 3aa:	61 f0       	breq	.+24     	; 0x3c4 <DIO_voidSetPinValue+0x158>
 3ac:	5b c0       	rjmp	.+182    	; 0x464 <DIO_voidSetPinValue+0x1f8>
 3ae:	2d 81       	ldd	r18, Y+5	; 0x05
 3b0:	3e 81       	ldd	r19, Y+6	; 0x06
 3b2:	22 30       	cpi	r18, 0x02	; 2
 3b4:	31 05       	cpc	r19, r1
 3b6:	71 f1       	breq	.+92     	; 0x414 <DIO_voidSetPinValue+0x1a8>
 3b8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ba:	9e 81       	ldd	r25, Y+6	; 0x06
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	91 05       	cpc	r25, r1
 3c0:	e9 f1       	breq	.+122    	; 0x43c <DIO_voidSetPinValue+0x1d0>
 3c2:	50 c0       	rjmp	.+160    	; 0x464 <DIO_voidSetPinValue+0x1f8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
 3c4:	ab e3       	ldi	r26, 0x3B	; 59
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	eb e3       	ldi	r30, 0x3B	; 59
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	48 2f       	mov	r20, r24
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 2e       	mov	r0, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_voidSetPinValue+0x176>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_voidSetPinValue+0x172>
 3e6:	84 2b       	or	r24, r20
 3e8:	8c 93       	st	X, r24
 3ea:	3d c0       	rjmp	.+122    	; 0x466 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
 3ec:	a8 e3       	ldi	r26, 0x38	; 56
 3ee:	b0 e0       	ldi	r27, 0x00	; 0
 3f0:	e8 e3       	ldi	r30, 0x38	; 56
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	48 2f       	mov	r20, r24
 3f8:	8b 81       	ldd	r24, Y+3	; 0x03
 3fa:	28 2f       	mov	r18, r24
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 2e       	mov	r0, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_voidSetPinValue+0x19e>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_voidSetPinValue+0x19a>
 40e:	84 2b       	or	r24, r20
 410:	8c 93       	st	X, r24
 412:	29 c0       	rjmp	.+82     	; 0x466 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
 414:	a5 e3       	ldi	r26, 0x35	; 53
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	e5 e3       	ldi	r30, 0x35	; 53
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	48 2f       	mov	r20, r24
 420:	8b 81       	ldd	r24, Y+3	; 0x03
 422:	28 2f       	mov	r18, r24
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 2e       	mov	r0, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_voidSetPinValue+0x1c6>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_voidSetPinValue+0x1c2>
 436:	84 2b       	or	r24, r20
 438:	8c 93       	st	X, r24
 43a:	15 c0       	rjmp	.+42     	; 0x466 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
 43c:	a2 e3       	ldi	r26, 0x32	; 50
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e2 e3       	ldi	r30, 0x32	; 50
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	48 2f       	mov	r20, r24
 448:	8b 81       	ldd	r24, Y+3	; 0x03
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 2e       	mov	r0, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_voidSetPinValue+0x1ee>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	0a 94       	dec	r0
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_voidSetPinValue+0x1ea>
 45e:	84 2b       	or	r24, r20
 460:	8c 93       	st	X, r24
 462:	01 c0       	rjmp	.+2      	; 0x466 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_DIOValue;
 464:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
 466:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinValue */
 468:	28 96       	adiw	r28, 0x08	; 8
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	de bf       	out	0x3e, r29	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	cd bf       	out	0x3d, r28	; 61
 474:	cf 91       	pop	r28
 476:	df 91       	pop	r29
 478:	08 95       	ret

0000047a <DIO_voidSetPinDirection>:
 * @param EN_Pin  PIN Number
 * @param EN_Direction Direction of the Pin INPUT | OUTPUT
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
 47a:	df 93       	push	r29
 47c:	cf 93       	push	r28
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	28 97       	sbiw	r28, 0x08	; 8
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	8a 83       	std	Y+2, r24	; 0x02
 490:	6b 83       	std	Y+3, r22	; 0x03
 492:	4c 83       	std	Y+4, r20	; 0x04
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 494:	84 e0       	ldi	r24, 0x04	; 4
 496:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Direction == INPUT)
 498:	8c 81       	ldd	r24, Y+4	; 0x04
 49a:	88 23       	and	r24, r24
 49c:	09 f0       	breq	.+2      	; 0x4a0 <DIO_voidSetPinDirection+0x26>
 49e:	77 c0       	rjmp	.+238    	; 0x58e <DIO_voidSetPinDirection+0x114>
    {
        switch (EN_port)
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	38 87       	std	Y+8, r19	; 0x08
 4a8:	2f 83       	std	Y+7, r18	; 0x07
 4aa:	8f 81       	ldd	r24, Y+7	; 0x07
 4ac:	98 85       	ldd	r25, Y+8	; 0x08
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	91 05       	cpc	r25, r1
 4b2:	59 f1       	breq	.+86     	; 0x50a <DIO_voidSetPinDirection+0x90>
 4b4:	2f 81       	ldd	r18, Y+7	; 0x07
 4b6:	38 85       	ldd	r19, Y+8	; 0x08
 4b8:	22 30       	cpi	r18, 0x02	; 2
 4ba:	31 05       	cpc	r19, r1
 4bc:	2c f4       	brge	.+10     	; 0x4c8 <DIO_voidSetPinDirection+0x4e>
 4be:	8f 81       	ldd	r24, Y+7	; 0x07
 4c0:	98 85       	ldd	r25, Y+8	; 0x08
 4c2:	00 97       	sbiw	r24, 0x00	; 0
 4c4:	69 f0       	breq	.+26     	; 0x4e0 <DIO_voidSetPinDirection+0x66>
 4c6:	60 c0       	rjmp	.+192    	; 0x588 <DIO_voidSetPinDirection+0x10e>
 4c8:	2f 81       	ldd	r18, Y+7	; 0x07
 4ca:	38 85       	ldd	r19, Y+8	; 0x08
 4cc:	22 30       	cpi	r18, 0x02	; 2
 4ce:	31 05       	cpc	r19, r1
 4d0:	89 f1       	breq	.+98     	; 0x534 <DIO_voidSetPinDirection+0xba>
 4d2:	8f 81       	ldd	r24, Y+7	; 0x07
 4d4:	98 85       	ldd	r25, Y+8	; 0x08
 4d6:	83 30       	cpi	r24, 0x03	; 3
 4d8:	91 05       	cpc	r25, r1
 4da:	09 f4       	brne	.+2      	; 0x4de <DIO_voidSetPinDirection+0x64>
 4dc:	40 c0       	rjmp	.+128    	; 0x55e <DIO_voidSetPinDirection+0xe4>
 4de:	54 c0       	rjmp	.+168    	; 0x588 <DIO_voidSetPinDirection+0x10e>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
 4e0:	aa e3       	ldi	r26, 0x3A	; 58
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	ea e3       	ldi	r30, 0x3A	; 58
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	48 2f       	mov	r20, r24
 4ec:	8b 81       	ldd	r24, Y+3	; 0x03
 4ee:	28 2f       	mov	r18, r24
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 2e       	mov	r0, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_voidSetPinDirection+0x84>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_voidSetPinDirection+0x80>
 502:	80 95       	com	r24
 504:	84 23       	and	r24, r20
 506:	8c 93       	st	X, r24
 508:	b7 c0       	rjmp	.+366    	; 0x678 <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
 50a:	a7 e3       	ldi	r26, 0x37	; 55
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	e7 e3       	ldi	r30, 0x37	; 55
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	48 2f       	mov	r20, r24
 516:	8b 81       	ldd	r24, Y+3	; 0x03
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 2e       	mov	r0, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_voidSetPinDirection+0xae>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	0a 94       	dec	r0
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_voidSetPinDirection+0xaa>
 52c:	80 95       	com	r24
 52e:	84 23       	and	r24, r20
 530:	8c 93       	st	X, r24
 532:	a2 c0       	rjmp	.+324    	; 0x678 <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
 534:	a4 e3       	ldi	r26, 0x34	; 52
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	e4 e3       	ldi	r30, 0x34	; 52
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	48 2f       	mov	r20, r24
 540:	8b 81       	ldd	r24, Y+3	; 0x03
 542:	28 2f       	mov	r18, r24
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 2e       	mov	r0, r18
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_voidSetPinDirection+0xd8>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	0a 94       	dec	r0
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_voidSetPinDirection+0xd4>
 556:	80 95       	com	r24
 558:	84 23       	and	r24, r20
 55a:	8c 93       	st	X, r24
 55c:	8d c0       	rjmp	.+282    	; 0x678 <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
 55e:	a1 e3       	ldi	r26, 0x31	; 49
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	e1 e3       	ldi	r30, 0x31	; 49
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	48 2f       	mov	r20, r24
 56a:	8b 81       	ldd	r24, Y+3	; 0x03
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 2e       	mov	r0, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_voidSetPinDirection+0x102>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	0a 94       	dec	r0
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_voidSetPinDirection+0xfe>
 580:	80 95       	com	r24
 582:	84 23       	and	r24, r20
 584:	8c 93       	st	X, r24
 586:	78 c0       	rjmp	.+240    	; 0x678 <DIO_voidSetPinDirection+0x1fe>
            break;
        default:
            state = E_DIODirec;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	89 83       	std	Y+1, r24	; 0x01
 58c:	75 c0       	rjmp	.+234    	; 0x678 <DIO_voidSetPinDirection+0x1fe>
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
 58e:	8c 81       	ldd	r24, Y+4	; 0x04
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	09 f0       	breq	.+2      	; 0x596 <DIO_voidSetPinDirection+0x11c>
 594:	71 c0       	rjmp	.+226    	; 0x678 <DIO_voidSetPinDirection+0x1fe>
    {
        switch (EN_port)
 596:	8a 81       	ldd	r24, Y+2	; 0x02
 598:	28 2f       	mov	r18, r24
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	3e 83       	std	Y+6, r19	; 0x06
 59e:	2d 83       	std	Y+5, r18	; 0x05
 5a0:	8d 81       	ldd	r24, Y+5	; 0x05
 5a2:	9e 81       	ldd	r25, Y+6	; 0x06
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	91 05       	cpc	r25, r1
 5a8:	49 f1       	breq	.+82     	; 0x5fc <DIO_voidSetPinDirection+0x182>
 5aa:	2d 81       	ldd	r18, Y+5	; 0x05
 5ac:	3e 81       	ldd	r19, Y+6	; 0x06
 5ae:	22 30       	cpi	r18, 0x02	; 2
 5b0:	31 05       	cpc	r19, r1
 5b2:	2c f4       	brge	.+10     	; 0x5be <DIO_voidSetPinDirection+0x144>
 5b4:	8d 81       	ldd	r24, Y+5	; 0x05
 5b6:	9e 81       	ldd	r25, Y+6	; 0x06
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	61 f0       	breq	.+24     	; 0x5d4 <DIO_voidSetPinDirection+0x15a>
 5bc:	5b c0       	rjmp	.+182    	; 0x674 <DIO_voidSetPinDirection+0x1fa>
 5be:	2d 81       	ldd	r18, Y+5	; 0x05
 5c0:	3e 81       	ldd	r19, Y+6	; 0x06
 5c2:	22 30       	cpi	r18, 0x02	; 2
 5c4:	31 05       	cpc	r19, r1
 5c6:	71 f1       	breq	.+92     	; 0x624 <DIO_voidSetPinDirection+0x1aa>
 5c8:	8d 81       	ldd	r24, Y+5	; 0x05
 5ca:	9e 81       	ldd	r25, Y+6	; 0x06
 5cc:	83 30       	cpi	r24, 0x03	; 3
 5ce:	91 05       	cpc	r25, r1
 5d0:	e9 f1       	breq	.+122    	; 0x64c <DIO_voidSetPinDirection+0x1d2>
 5d2:	50 c0       	rjmp	.+160    	; 0x674 <DIO_voidSetPinDirection+0x1fa>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
 5d4:	aa e3       	ldi	r26, 0x3A	; 58
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	ea e3       	ldi	r30, 0x3A	; 58
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	48 2f       	mov	r20, r24
 5e0:	8b 81       	ldd	r24, Y+3	; 0x03
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 2e       	mov	r0, r18
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_voidSetPinDirection+0x178>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	0a 94       	dec	r0
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_voidSetPinDirection+0x174>
 5f6:	84 2b       	or	r24, r20
 5f8:	8c 93       	st	X, r24
 5fa:	3e c0       	rjmp	.+124    	; 0x678 <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
 5fc:	a7 e3       	ldi	r26, 0x37	; 55
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	e7 e3       	ldi	r30, 0x37	; 55
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	48 2f       	mov	r20, r24
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 2e       	mov	r0, r18
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_voidSetPinDirection+0x1a0>
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	0a 94       	dec	r0
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_voidSetPinDirection+0x19c>
 61e:	84 2b       	or	r24, r20
 620:	8c 93       	st	X, r24
 622:	2a c0       	rjmp	.+84     	; 0x678 <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
 624:	a4 e3       	ldi	r26, 0x34	; 52
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e4 e3       	ldi	r30, 0x34	; 52
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	48 2f       	mov	r20, r24
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	28 2f       	mov	r18, r24
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 2e       	mov	r0, r18
 63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_voidSetPinDirection+0x1c8>
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	0a 94       	dec	r0
 644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_voidSetPinDirection+0x1c4>
 646:	84 2b       	or	r24, r20
 648:	8c 93       	st	X, r24
 64a:	16 c0       	rjmp	.+44     	; 0x678 <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
 64c:	a1 e3       	ldi	r26, 0x31	; 49
 64e:	b0 e0       	ldi	r27, 0x00	; 0
 650:	e1 e3       	ldi	r30, 0x31	; 49
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	80 81       	ld	r24, Z
 656:	48 2f       	mov	r20, r24
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	28 2f       	mov	r18, r24
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	02 2e       	mov	r0, r18
 664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_voidSetPinDirection+0x1f0>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	0a 94       	dec	r0
 66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_voidSetPinDirection+0x1ec>
 66e:	84 2b       	or	r24, r20
 670:	8c 93       	st	X, r24
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_voidSetPinDirection+0x1fe>
            break;
        default:
            state = E_DIODirec;
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }
    return state;
 678:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinDirection */
 67a:	28 96       	adiw	r28, 0x08	; 8
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	f8 94       	cli
 680:	de bf       	out	0x3e, r29	; 62
 682:	0f be       	out	0x3f, r0	; 63
 684:	cd bf       	out	0x3d, r28	; 61
 686:	cf 91       	pop	r28
 688:	df 91       	pop	r29
 68a:	08 95       	ret

0000068c <DIO_u8GetPinValue>:
 * @param EN_Port           PORT Name
 * @param EN_Pin            PIN Number
 * @return EN_value_type    return Pin HIGH | LOW
 */
EN_value_type DIO_u8GetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
 68c:	df 93       	push	r29
 68e:	cf 93       	push	r28
 690:	00 d0       	rcall	.+0      	; 0x692 <DIO_u8GetPinValue+0x6>
 692:	00 d0       	rcall	.+0      	; 0x694 <DIO_u8GetPinValue+0x8>
 694:	0f 92       	push	r0
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	8a 83       	std	Y+2, r24	; 0x02
 69c:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
 69e:	8a 81       	ldd	r24, Y+2	; 0x02
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	3d 83       	std	Y+5, r19	; 0x05
 6a6:	2c 83       	std	Y+4, r18	; 0x04
 6a8:	4c 81       	ldd	r20, Y+4	; 0x04
 6aa:	5d 81       	ldd	r21, Y+5	; 0x05
 6ac:	41 30       	cpi	r20, 0x01	; 1
 6ae:	51 05       	cpc	r21, r1
 6b0:	41 f1       	breq	.+80     	; 0x702 <DIO_u8GetPinValue+0x76>
 6b2:	8c 81       	ldd	r24, Y+4	; 0x04
 6b4:	9d 81       	ldd	r25, Y+5	; 0x05
 6b6:	82 30       	cpi	r24, 0x02	; 2
 6b8:	91 05       	cpc	r25, r1
 6ba:	34 f4       	brge	.+12     	; 0x6c8 <DIO_u8GetPinValue+0x3c>
 6bc:	2c 81       	ldd	r18, Y+4	; 0x04
 6be:	3d 81       	ldd	r19, Y+5	; 0x05
 6c0:	21 15       	cp	r18, r1
 6c2:	31 05       	cpc	r19, r1
 6c4:	61 f0       	breq	.+24     	; 0x6de <DIO_u8GetPinValue+0x52>
 6c6:	52 c0       	rjmp	.+164    	; 0x76c <DIO_u8GetPinValue+0xe0>
 6c8:	4c 81       	ldd	r20, Y+4	; 0x04
 6ca:	5d 81       	ldd	r21, Y+5	; 0x05
 6cc:	42 30       	cpi	r20, 0x02	; 2
 6ce:	51 05       	cpc	r21, r1
 6d0:	51 f1       	breq	.+84     	; 0x726 <DIO_u8GetPinValue+0x9a>
 6d2:	8c 81       	ldd	r24, Y+4	; 0x04
 6d4:	9d 81       	ldd	r25, Y+5	; 0x05
 6d6:	83 30       	cpi	r24, 0x03	; 3
 6d8:	91 05       	cpc	r25, r1
 6da:	b9 f1       	breq	.+110    	; 0x74a <DIO_u8GetPinValue+0xbe>
 6dc:	47 c0       	rjmp	.+142    	; 0x76c <DIO_u8GetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
 6de:	e9 e3       	ldi	r30, 0x39	; 57
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	28 2f       	mov	r18, r24
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ea:	88 2f       	mov	r24, r24
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	a9 01       	movw	r20, r18
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_u8GetPinValue+0x6a>
 6f2:	55 95       	asr	r21
 6f4:	47 95       	ror	r20
 6f6:	8a 95       	dec	r24
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_u8GetPinValue+0x66>
 6fa:	ca 01       	movw	r24, r20
 6fc:	81 70       	andi	r24, 0x01	; 1
 6fe:	89 83       	std	Y+1, r24	; 0x01
 700:	35 c0       	rjmp	.+106    	; 0x76c <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
 702:	e6 e3       	ldi	r30, 0x36	; 54
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	28 2f       	mov	r18, r24
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	8b 81       	ldd	r24, Y+3	; 0x03
 70e:	88 2f       	mov	r24, r24
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	a9 01       	movw	r20, r18
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_u8GetPinValue+0x8e>
 716:	55 95       	asr	r21
 718:	47 95       	ror	r20
 71a:	8a 95       	dec	r24
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_u8GetPinValue+0x8a>
 71e:	ca 01       	movw	r24, r20
 720:	81 70       	andi	r24, 0x01	; 1
 722:	89 83       	std	Y+1, r24	; 0x01
 724:	23 c0       	rjmp	.+70     	; 0x76c <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
 726:	e3 e3       	ldi	r30, 0x33	; 51
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	28 2f       	mov	r18, r24
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	8b 81       	ldd	r24, Y+3	; 0x03
 732:	88 2f       	mov	r24, r24
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	a9 01       	movw	r20, r18
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_u8GetPinValue+0xb2>
 73a:	55 95       	asr	r21
 73c:	47 95       	ror	r20
 73e:	8a 95       	dec	r24
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_u8GetPinValue+0xae>
 742:	ca 01       	movw	r24, r20
 744:	81 70       	andi	r24, 0x01	; 1
 746:	89 83       	std	Y+1, r24	; 0x01
 748:	11 c0       	rjmp	.+34     	; 0x76c <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
 74a:	e0 e3       	ldi	r30, 0x30	; 48
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	28 2f       	mov	r18, r24
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	8b 81       	ldd	r24, Y+3	; 0x03
 756:	88 2f       	mov	r24, r24
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	a9 01       	movw	r20, r18
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_u8GetPinValue+0xd6>
 75e:	55 95       	asr	r21
 760:	47 95       	ror	r20
 762:	8a 95       	dec	r24
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_u8GetPinValue+0xd2>
 766:	ca 01       	movw	r24, r20
 768:	81 70       	andi	r24, 0x01	; 1
 76a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
 76c:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_u8GetPinValue */
 76e:	0f 90       	pop	r0
 770:	0f 90       	pop	r0
 772:	0f 90       	pop	r0
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	cf 91       	pop	r28
 77a:	df 91       	pop	r29
 77c:	08 95       	ret

0000077e <DIO_voidTogPin>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidTogPin(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
 77e:	df 93       	push	r29
 780:	cf 93       	push	r28
 782:	00 d0       	rcall	.+0      	; 0x784 <DIO_voidTogPin+0x6>
 784:	00 d0       	rcall	.+0      	; 0x786 <DIO_voidTogPin+0x8>
 786:	0f 92       	push	r0
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
 78c:	8a 83       	std	Y+2, r24	; 0x02
 78e:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 790:	84 e0       	ldi	r24, 0x04	; 4
 792:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
 794:	8a 81       	ldd	r24, Y+2	; 0x02
 796:	28 2f       	mov	r18, r24
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	3d 83       	std	Y+5, r19	; 0x05
 79c:	2c 83       	std	Y+4, r18	; 0x04
 79e:	8c 81       	ldd	r24, Y+4	; 0x04
 7a0:	9d 81       	ldd	r25, Y+5	; 0x05
 7a2:	81 30       	cpi	r24, 0x01	; 1
 7a4:	91 05       	cpc	r25, r1
 7a6:	49 f1       	breq	.+82     	; 0x7fa <DIO_voidTogPin+0x7c>
 7a8:	2c 81       	ldd	r18, Y+4	; 0x04
 7aa:	3d 81       	ldd	r19, Y+5	; 0x05
 7ac:	22 30       	cpi	r18, 0x02	; 2
 7ae:	31 05       	cpc	r19, r1
 7b0:	2c f4       	brge	.+10     	; 0x7bc <DIO_voidTogPin+0x3e>
 7b2:	8c 81       	ldd	r24, Y+4	; 0x04
 7b4:	9d 81       	ldd	r25, Y+5	; 0x05
 7b6:	00 97       	sbiw	r24, 0x00	; 0
 7b8:	61 f0       	breq	.+24     	; 0x7d2 <DIO_voidTogPin+0x54>
 7ba:	5b c0       	rjmp	.+182    	; 0x872 <__stack+0x13>
 7bc:	2c 81       	ldd	r18, Y+4	; 0x04
 7be:	3d 81       	ldd	r19, Y+5	; 0x05
 7c0:	22 30       	cpi	r18, 0x02	; 2
 7c2:	31 05       	cpc	r19, r1
 7c4:	71 f1       	breq	.+92     	; 0x822 <DIO_voidTogPin+0xa4>
 7c6:	8c 81       	ldd	r24, Y+4	; 0x04
 7c8:	9d 81       	ldd	r25, Y+5	; 0x05
 7ca:	83 30       	cpi	r24, 0x03	; 3
 7cc:	91 05       	cpc	r25, r1
 7ce:	e9 f1       	breq	.+122    	; 0x84a <DIO_voidTogPin+0xcc>
 7d0:	50 c0       	rjmp	.+160    	; 0x872 <__stack+0x13>
    {
    case PORT_A:
        TGLBIT(PORTA, EN_Pin);
 7d2:	ab e3       	ldi	r26, 0x3B	; 59
 7d4:	b0 e0       	ldi	r27, 0x00	; 0
 7d6:	eb e3       	ldi	r30, 0x3B	; 59
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	48 2f       	mov	r20, r24
 7de:	8b 81       	ldd	r24, Y+3	; 0x03
 7e0:	28 2f       	mov	r18, r24
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	02 2e       	mov	r0, r18
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_voidTogPin+0x72>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	0a 94       	dec	r0
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_voidTogPin+0x6e>
 7f4:	84 27       	eor	r24, r20
 7f6:	8c 93       	st	X, r24
 7f8:	3e c0       	rjmp	.+124    	; 0x876 <__stack+0x17>
        break;
    case PORT_B:
        TGLBIT(PORTB, EN_Pin);
 7fa:	a8 e3       	ldi	r26, 0x38	; 56
 7fc:	b0 e0       	ldi	r27, 0x00	; 0
 7fe:	e8 e3       	ldi	r30, 0x38	; 56
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	48 2f       	mov	r20, r24
 806:	8b 81       	ldd	r24, Y+3	; 0x03
 808:	28 2f       	mov	r18, r24
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	02 2e       	mov	r0, r18
 812:	02 c0       	rjmp	.+4      	; 0x818 <DIO_voidTogPin+0x9a>
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	0a 94       	dec	r0
 81a:	e2 f7       	brpl	.-8      	; 0x814 <DIO_voidTogPin+0x96>
 81c:	84 27       	eor	r24, r20
 81e:	8c 93       	st	X, r24
 820:	2a c0       	rjmp	.+84     	; 0x876 <__stack+0x17>
        break;
    case PORT_C:
        TGLBIT(PORTC, EN_Pin);
 822:	a5 e3       	ldi	r26, 0x35	; 53
 824:	b0 e0       	ldi	r27, 0x00	; 0
 826:	e5 e3       	ldi	r30, 0x35	; 53
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	48 2f       	mov	r20, r24
 82e:	8b 81       	ldd	r24, Y+3	; 0x03
 830:	28 2f       	mov	r18, r24
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	02 2e       	mov	r0, r18
 83a:	02 c0       	rjmp	.+4      	; 0x840 <DIO_voidTogPin+0xc2>
 83c:	88 0f       	add	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	0a 94       	dec	r0
 842:	e2 f7       	brpl	.-8      	; 0x83c <DIO_voidTogPin+0xbe>
 844:	84 27       	eor	r24, r20
 846:	8c 93       	st	X, r24
 848:	16 c0       	rjmp	.+44     	; 0x876 <__stack+0x17>
        break;
    case PORT_D:
        TGLBIT(PORTD, EN_Pin);
 84a:	a2 e3       	ldi	r26, 0x32	; 50
 84c:	b0 e0       	ldi	r27, 0x00	; 0
 84e:	e2 e3       	ldi	r30, 0x32	; 50
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	80 81       	ld	r24, Z
 854:	48 2f       	mov	r20, r24
 856:	8b 81       	ldd	r24, Y+3	; 0x03
 858:	28 2f       	mov	r18, r24
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	02 2e       	mov	r0, r18
 862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	0a 94       	dec	r0
 86a:	e2 f7       	brpl	.-8      	; 0x864 <__stack+0x5>
 86c:	84 27       	eor	r24, r20
 86e:	8c 93       	st	X, r24
 870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
        break;
    default:
        state = E_DIOPORT;
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return state;
 876:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidTogPin */
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	0f 90       	pop	r0
 87e:	0f 90       	pop	r0
 880:	0f 90       	pop	r0
 882:	cf 91       	pop	r28
 884:	df 91       	pop	r29
 886:	08 95       	ret

00000888 <DIO_voidSetPortValue>:
 * @param EN_Port PORT Name
 * @param EN_Value HIGH | LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
 888:	df 93       	push	r29
 88a:	cf 93       	push	r28
 88c:	00 d0       	rcall	.+0      	; 0x88e <DIO_voidSetPortValue+0x6>
 88e:	00 d0       	rcall	.+0      	; 0x890 <DIO_voidSetPortValue+0x8>
 890:	0f 92       	push	r0
 892:	cd b7       	in	r28, 0x3d	; 61
 894:	de b7       	in	r29, 0x3e	; 62
 896:	8a 83       	std	Y+2, r24	; 0x02
 898:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 89a:	84 e0       	ldi	r24, 0x04	; 4
 89c:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
 89e:	8a 81       	ldd	r24, Y+2	; 0x02
 8a0:	28 2f       	mov	r18, r24
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	3d 83       	std	Y+5, r19	; 0x05
 8a6:	2c 83       	std	Y+4, r18	; 0x04
 8a8:	8c 81       	ldd	r24, Y+4	; 0x04
 8aa:	9d 81       	ldd	r25, Y+5	; 0x05
 8ac:	81 30       	cpi	r24, 0x01	; 1
 8ae:	91 05       	cpc	r25, r1
 8b0:	d1 f0       	breq	.+52     	; 0x8e6 <DIO_voidSetPortValue+0x5e>
 8b2:	2c 81       	ldd	r18, Y+4	; 0x04
 8b4:	3d 81       	ldd	r19, Y+5	; 0x05
 8b6:	22 30       	cpi	r18, 0x02	; 2
 8b8:	31 05       	cpc	r19, r1
 8ba:	2c f4       	brge	.+10     	; 0x8c6 <DIO_voidSetPortValue+0x3e>
 8bc:	8c 81       	ldd	r24, Y+4	; 0x04
 8be:	9d 81       	ldd	r25, Y+5	; 0x05
 8c0:	00 97       	sbiw	r24, 0x00	; 0
 8c2:	61 f0       	breq	.+24     	; 0x8dc <DIO_voidSetPortValue+0x54>
 8c4:	1f c0       	rjmp	.+62     	; 0x904 <DIO_voidSetPortValue+0x7c>
 8c6:	2c 81       	ldd	r18, Y+4	; 0x04
 8c8:	3d 81       	ldd	r19, Y+5	; 0x05
 8ca:	22 30       	cpi	r18, 0x02	; 2
 8cc:	31 05       	cpc	r19, r1
 8ce:	81 f0       	breq	.+32     	; 0x8f0 <DIO_voidSetPortValue+0x68>
 8d0:	8c 81       	ldd	r24, Y+4	; 0x04
 8d2:	9d 81       	ldd	r25, Y+5	; 0x05
 8d4:	83 30       	cpi	r24, 0x03	; 3
 8d6:	91 05       	cpc	r25, r1
 8d8:	81 f0       	breq	.+32     	; 0x8fa <DIO_voidSetPortValue+0x72>
 8da:	14 c0       	rjmp	.+40     	; 0x904 <DIO_voidSetPortValue+0x7c>
    {
    case PORT_A:
        PORTA = EN_Value;
 8dc:	eb e3       	ldi	r30, 0x3B	; 59
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	8b 81       	ldd	r24, Y+3	; 0x03
 8e2:	80 83       	st	Z, r24
 8e4:	11 c0       	rjmp	.+34     	; 0x908 <DIO_voidSetPortValue+0x80>
        break;
    case PORT_B:
        PORTB = EN_Value;
 8e6:	e8 e3       	ldi	r30, 0x38	; 56
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	8b 81       	ldd	r24, Y+3	; 0x03
 8ec:	80 83       	st	Z, r24
 8ee:	0c c0       	rjmp	.+24     	; 0x908 <DIO_voidSetPortValue+0x80>
        break;
    case PORT_C:
        PORTC = EN_Value;
 8f0:	e5 e3       	ldi	r30, 0x35	; 53
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	8b 81       	ldd	r24, Y+3	; 0x03
 8f6:	80 83       	st	Z, r24
 8f8:	07 c0       	rjmp	.+14     	; 0x908 <DIO_voidSetPortValue+0x80>
        break;
    case PORT_D:
        PORTD = EN_Value;
 8fa:	e2 e3       	ldi	r30, 0x32	; 50
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	8b 81       	ldd	r24, Y+3	; 0x03
 900:	80 83       	st	Z, r24
 902:	02 c0       	rjmp	.+4      	; 0x908 <DIO_voidSetPortValue+0x80>
        break;
    default:
        state = E_DIOPORT;
 904:	82 e0       	ldi	r24, 0x02	; 2
 906:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
 908:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPortValue */
 90a:	0f 90       	pop	r0
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	cf 91       	pop	r28
 916:	df 91       	pop	r29
 918:	08 95       	ret

0000091a <DIO_voidSetPortDirection>:
 * @param EN_Port PORT Name
 * @param EN_Direction PORT Direction
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
 91a:	df 93       	push	r29
 91c:	cf 93       	push	r28
 91e:	00 d0       	rcall	.+0      	; 0x920 <DIO_voidSetPortDirection+0x6>
 920:	00 d0       	rcall	.+0      	; 0x922 <DIO_voidSetPortDirection+0x8>
 922:	0f 92       	push	r0
 924:	cd b7       	in	r28, 0x3d	; 61
 926:	de b7       	in	r29, 0x3e	; 62
 928:	8a 83       	std	Y+2, r24	; 0x02
 92a:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 92c:	84 e0       	ldi	r24, 0x04	; 4
 92e:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
 930:	8a 81       	ldd	r24, Y+2	; 0x02
 932:	28 2f       	mov	r18, r24
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	3d 83       	std	Y+5, r19	; 0x05
 938:	2c 83       	std	Y+4, r18	; 0x04
 93a:	8c 81       	ldd	r24, Y+4	; 0x04
 93c:	9d 81       	ldd	r25, Y+5	; 0x05
 93e:	81 30       	cpi	r24, 0x01	; 1
 940:	91 05       	cpc	r25, r1
 942:	d1 f0       	breq	.+52     	; 0x978 <DIO_voidSetPortDirection+0x5e>
 944:	2c 81       	ldd	r18, Y+4	; 0x04
 946:	3d 81       	ldd	r19, Y+5	; 0x05
 948:	22 30       	cpi	r18, 0x02	; 2
 94a:	31 05       	cpc	r19, r1
 94c:	2c f4       	brge	.+10     	; 0x958 <DIO_voidSetPortDirection+0x3e>
 94e:	8c 81       	ldd	r24, Y+4	; 0x04
 950:	9d 81       	ldd	r25, Y+5	; 0x05
 952:	00 97       	sbiw	r24, 0x00	; 0
 954:	61 f0       	breq	.+24     	; 0x96e <DIO_voidSetPortDirection+0x54>
 956:	1f c0       	rjmp	.+62     	; 0x996 <DIO_voidSetPortDirection+0x7c>
 958:	2c 81       	ldd	r18, Y+4	; 0x04
 95a:	3d 81       	ldd	r19, Y+5	; 0x05
 95c:	22 30       	cpi	r18, 0x02	; 2
 95e:	31 05       	cpc	r19, r1
 960:	81 f0       	breq	.+32     	; 0x982 <DIO_voidSetPortDirection+0x68>
 962:	8c 81       	ldd	r24, Y+4	; 0x04
 964:	9d 81       	ldd	r25, Y+5	; 0x05
 966:	83 30       	cpi	r24, 0x03	; 3
 968:	91 05       	cpc	r25, r1
 96a:	81 f0       	breq	.+32     	; 0x98c <DIO_voidSetPortDirection+0x72>
 96c:	14 c0       	rjmp	.+40     	; 0x996 <DIO_voidSetPortDirection+0x7c>
    {
    case PORT_A:
        DDRA = EN_Direction;
 96e:	ea e3       	ldi	r30, 0x3A	; 58
 970:	f0 e0       	ldi	r31, 0x00	; 0
 972:	8b 81       	ldd	r24, Y+3	; 0x03
 974:	80 83       	st	Z, r24
 976:	11 c0       	rjmp	.+34     	; 0x99a <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_B:
        DDRB = EN_Direction;
 978:	e7 e3       	ldi	r30, 0x37	; 55
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	8b 81       	ldd	r24, Y+3	; 0x03
 97e:	80 83       	st	Z, r24
 980:	0c c0       	rjmp	.+24     	; 0x99a <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_C:
        DDRC = EN_Direction;
 982:	e4 e3       	ldi	r30, 0x34	; 52
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	8b 81       	ldd	r24, Y+3	; 0x03
 988:	80 83       	st	Z, r24
 98a:	07 c0       	rjmp	.+14     	; 0x99a <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_D:
        DDRD = EN_Direction;
 98c:	e1 e3       	ldi	r30, 0x31	; 49
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	8b 81       	ldd	r24, Y+3	; 0x03
 992:	80 83       	st	Z, r24
 994:	02 c0       	rjmp	.+4      	; 0x99a <DIO_voidSetPortDirection+0x80>
        break;
    default:
        state = E_DIOPORT;
 996:	82 e0       	ldi	r24, 0x02	; 2
 998:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
 99a:	89 81       	ldd	r24, Y+1	; 0x01

} /* DIO_voidSetPortDirection */
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	0f 90       	pop	r0
 9a2:	0f 90       	pop	r0
 9a4:	0f 90       	pop	r0
 9a6:	cf 91       	pop	r28
 9a8:	df 91       	pop	r29
 9aa:	08 95       	ret

000009ac <DIO_voidInpullUp>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
 9ac:	df 93       	push	r29
 9ae:	cf 93       	push	r28
 9b0:	00 d0       	rcall	.+0      	; 0x9b2 <DIO_voidInpullUp+0x6>
 9b2:	00 d0       	rcall	.+0      	; 0x9b4 <DIO_voidInpullUp+0x8>
 9b4:	0f 92       	push	r0
 9b6:	cd b7       	in	r28, 0x3d	; 61
 9b8:	de b7       	in	r29, 0x3e	; 62
 9ba:	8a 83       	std	Y+2, r24	; 0x02
 9bc:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 9be:	84 e0       	ldi	r24, 0x04	; 4
 9c0:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
 9c2:	8a 81       	ldd	r24, Y+2	; 0x02
 9c4:	28 2f       	mov	r18, r24
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	3d 83       	std	Y+5, r19	; 0x05
 9ca:	2c 83       	std	Y+4, r18	; 0x04
 9cc:	8c 81       	ldd	r24, Y+4	; 0x04
 9ce:	9d 81       	ldd	r25, Y+5	; 0x05
 9d0:	81 30       	cpi	r24, 0x01	; 1
 9d2:	91 05       	cpc	r25, r1
 9d4:	09 f4       	brne	.+2      	; 0x9d8 <DIO_voidInpullUp+0x2c>
 9d6:	3e c0       	rjmp	.+124    	; 0xa54 <DIO_voidInpullUp+0xa8>
 9d8:	2c 81       	ldd	r18, Y+4	; 0x04
 9da:	3d 81       	ldd	r19, Y+5	; 0x05
 9dc:	22 30       	cpi	r18, 0x02	; 2
 9de:	31 05       	cpc	r19, r1
 9e0:	2c f4       	brge	.+10     	; 0x9ec <DIO_voidInpullUp+0x40>
 9e2:	8c 81       	ldd	r24, Y+4	; 0x04
 9e4:	9d 81       	ldd	r25, Y+5	; 0x05
 9e6:	00 97       	sbiw	r24, 0x00	; 0
 9e8:	71 f0       	breq	.+28     	; 0xa06 <DIO_voidInpullUp+0x5a>
 9ea:	a9 c0       	rjmp	.+338    	; 0xb3e <DIO_voidInpullUp+0x192>
 9ec:	2c 81       	ldd	r18, Y+4	; 0x04
 9ee:	3d 81       	ldd	r19, Y+5	; 0x05
 9f0:	22 30       	cpi	r18, 0x02	; 2
 9f2:	31 05       	cpc	r19, r1
 9f4:	09 f4       	brne	.+2      	; 0x9f8 <DIO_voidInpullUp+0x4c>
 9f6:	55 c0       	rjmp	.+170    	; 0xaa2 <DIO_voidInpullUp+0xf6>
 9f8:	8c 81       	ldd	r24, Y+4	; 0x04
 9fa:	9d 81       	ldd	r25, Y+5	; 0x05
 9fc:	83 30       	cpi	r24, 0x03	; 3
 9fe:	91 05       	cpc	r25, r1
 a00:	09 f4       	brne	.+2      	; 0xa04 <DIO_voidInpullUp+0x58>
 a02:	76 c0       	rjmp	.+236    	; 0xaf0 <DIO_voidInpullUp+0x144>
 a04:	9c c0       	rjmp	.+312    	; 0xb3e <DIO_voidInpullUp+0x192>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
 a06:	aa e3       	ldi	r26, 0x3A	; 58
 a08:	b0 e0       	ldi	r27, 0x00	; 0
 a0a:	ea e3       	ldi	r30, 0x3A	; 58
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	80 81       	ld	r24, Z
 a10:	48 2f       	mov	r20, r24
 a12:	8b 81       	ldd	r24, Y+3	; 0x03
 a14:	28 2f       	mov	r18, r24
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_voidInpullUp+0x76>
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	2a 95       	dec	r18
 a24:	e2 f7       	brpl	.-8      	; 0xa1e <DIO_voidInpullUp+0x72>
 a26:	80 95       	com	r24
 a28:	84 23       	and	r24, r20
 a2a:	8c 93       	st	X, r24
        SETBIT(PORTA, EN_Pin);
 a2c:	ab e3       	ldi	r26, 0x3B	; 59
 a2e:	b0 e0       	ldi	r27, 0x00	; 0
 a30:	eb e3       	ldi	r30, 0x3B	; 59
 a32:	f0 e0       	ldi	r31, 0x00	; 0
 a34:	80 81       	ld	r24, Z
 a36:	48 2f       	mov	r20, r24
 a38:	8b 81       	ldd	r24, Y+3	; 0x03
 a3a:	28 2f       	mov	r18, r24
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	02 2e       	mov	r0, r18
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <DIO_voidInpullUp+0x9e>
 a46:	88 0f       	add	r24, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	0a 94       	dec	r0
 a4c:	e2 f7       	brpl	.-8      	; 0xa46 <DIO_voidInpullUp+0x9a>
 a4e:	84 2b       	or	r24, r20
 a50:	8c 93       	st	X, r24
 a52:	77 c0       	rjmp	.+238    	; 0xb42 <DIO_voidInpullUp+0x196>
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
 a54:	a7 e3       	ldi	r26, 0x37	; 55
 a56:	b0 e0       	ldi	r27, 0x00	; 0
 a58:	e7 e3       	ldi	r30, 0x37	; 55
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	80 81       	ld	r24, Z
 a5e:	48 2f       	mov	r20, r24
 a60:	8b 81       	ldd	r24, Y+3	; 0x03
 a62:	28 2f       	mov	r18, r24
 a64:	30 e0       	ldi	r19, 0x00	; 0
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	02 c0       	rjmp	.+4      	; 0xa70 <DIO_voidInpullUp+0xc4>
 a6c:	88 0f       	add	r24, r24
 a6e:	99 1f       	adc	r25, r25
 a70:	2a 95       	dec	r18
 a72:	e2 f7       	brpl	.-8      	; 0xa6c <DIO_voidInpullUp+0xc0>
 a74:	80 95       	com	r24
 a76:	84 23       	and	r24, r20
 a78:	8c 93       	st	X, r24
        SETBIT(PORTB, EN_Pin);
 a7a:	a8 e3       	ldi	r26, 0x38	; 56
 a7c:	b0 e0       	ldi	r27, 0x00	; 0
 a7e:	e8 e3       	ldi	r30, 0x38	; 56
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	80 81       	ld	r24, Z
 a84:	48 2f       	mov	r20, r24
 a86:	8b 81       	ldd	r24, Y+3	; 0x03
 a88:	28 2f       	mov	r18, r24
 a8a:	30 e0       	ldi	r19, 0x00	; 0
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	02 2e       	mov	r0, r18
 a92:	02 c0       	rjmp	.+4      	; 0xa98 <DIO_voidInpullUp+0xec>
 a94:	88 0f       	add	r24, r24
 a96:	99 1f       	adc	r25, r25
 a98:	0a 94       	dec	r0
 a9a:	e2 f7       	brpl	.-8      	; 0xa94 <DIO_voidInpullUp+0xe8>
 a9c:	84 2b       	or	r24, r20
 a9e:	8c 93       	st	X, r24
 aa0:	50 c0       	rjmp	.+160    	; 0xb42 <DIO_voidInpullUp+0x196>
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
 aa2:	a4 e3       	ldi	r26, 0x34	; 52
 aa4:	b0 e0       	ldi	r27, 0x00	; 0
 aa6:	e4 e3       	ldi	r30, 0x34	; 52
 aa8:	f0 e0       	ldi	r31, 0x00	; 0
 aaa:	80 81       	ld	r24, Z
 aac:	48 2f       	mov	r20, r24
 aae:	8b 81       	ldd	r24, Y+3	; 0x03
 ab0:	28 2f       	mov	r18, r24
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	81 e0       	ldi	r24, 0x01	; 1
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	02 c0       	rjmp	.+4      	; 0xabe <DIO_voidInpullUp+0x112>
 aba:	88 0f       	add	r24, r24
 abc:	99 1f       	adc	r25, r25
 abe:	2a 95       	dec	r18
 ac0:	e2 f7       	brpl	.-8      	; 0xaba <DIO_voidInpullUp+0x10e>
 ac2:	80 95       	com	r24
 ac4:	84 23       	and	r24, r20
 ac6:	8c 93       	st	X, r24
        SETBIT(PORTC, EN_Pin);
 ac8:	a5 e3       	ldi	r26, 0x35	; 53
 aca:	b0 e0       	ldi	r27, 0x00	; 0
 acc:	e5 e3       	ldi	r30, 0x35	; 53
 ace:	f0 e0       	ldi	r31, 0x00	; 0
 ad0:	80 81       	ld	r24, Z
 ad2:	48 2f       	mov	r20, r24
 ad4:	8b 81       	ldd	r24, Y+3	; 0x03
 ad6:	28 2f       	mov	r18, r24
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	02 2e       	mov	r0, r18
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <DIO_voidInpullUp+0x13a>
 ae2:	88 0f       	add	r24, r24
 ae4:	99 1f       	adc	r25, r25
 ae6:	0a 94       	dec	r0
 ae8:	e2 f7       	brpl	.-8      	; 0xae2 <DIO_voidInpullUp+0x136>
 aea:	84 2b       	or	r24, r20
 aec:	8c 93       	st	X, r24
 aee:	29 c0       	rjmp	.+82     	; 0xb42 <DIO_voidInpullUp+0x196>
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
 af0:	a1 e3       	ldi	r26, 0x31	; 49
 af2:	b0 e0       	ldi	r27, 0x00	; 0
 af4:	e1 e3       	ldi	r30, 0x31	; 49
 af6:	f0 e0       	ldi	r31, 0x00	; 0
 af8:	80 81       	ld	r24, Z
 afa:	48 2f       	mov	r20, r24
 afc:	8b 81       	ldd	r24, Y+3	; 0x03
 afe:	28 2f       	mov	r18, r24
 b00:	30 e0       	ldi	r19, 0x00	; 0
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <DIO_voidInpullUp+0x160>
 b08:	88 0f       	add	r24, r24
 b0a:	99 1f       	adc	r25, r25
 b0c:	2a 95       	dec	r18
 b0e:	e2 f7       	brpl	.-8      	; 0xb08 <DIO_voidInpullUp+0x15c>
 b10:	80 95       	com	r24
 b12:	84 23       	and	r24, r20
 b14:	8c 93       	st	X, r24
        SETBIT(PORTD, EN_Pin);
 b16:	a2 e3       	ldi	r26, 0x32	; 50
 b18:	b0 e0       	ldi	r27, 0x00	; 0
 b1a:	e2 e3       	ldi	r30, 0x32	; 50
 b1c:	f0 e0       	ldi	r31, 0x00	; 0
 b1e:	80 81       	ld	r24, Z
 b20:	48 2f       	mov	r20, r24
 b22:	8b 81       	ldd	r24, Y+3	; 0x03
 b24:	28 2f       	mov	r18, r24
 b26:	30 e0       	ldi	r19, 0x00	; 0
 b28:	81 e0       	ldi	r24, 0x01	; 1
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	02 2e       	mov	r0, r18
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <DIO_voidInpullUp+0x188>
 b30:	88 0f       	add	r24, r24
 b32:	99 1f       	adc	r25, r25
 b34:	0a 94       	dec	r0
 b36:	e2 f7       	brpl	.-8      	; 0xb30 <DIO_voidInpullUp+0x184>
 b38:	84 2b       	or	r24, r20
 b3a:	8c 93       	st	X, r24
 b3c:	02 c0       	rjmp	.+4      	; 0xb42 <DIO_voidInpullUp+0x196>
        break;
    default:
        state = E_DIOPORT;
 b3e:	82 e0       	ldi	r24, 0x02	; 2
 b40:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
 b42:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidInpullUp */
 b44:	0f 90       	pop	r0
 b46:	0f 90       	pop	r0
 b48:	0f 90       	pop	r0
 b4a:	0f 90       	pop	r0
 b4c:	0f 90       	pop	r0
 b4e:	cf 91       	pop	r28
 b50:	df 91       	pop	r29
 b52:	08 95       	ret

00000b54 <main>:
#include "DIO_Interface.h"
#include <util/delay.h>

#include "SPI_Interface.h"

int main(void){
 b54:	df 93       	push	r29
 b56:	cf 93       	push	r28
 b58:	cd b7       	in	r28, 0x3d	; 61
 b5a:	de b7       	in	r29, 0x3e	; 62
 b5c:	c5 56       	subi	r28, 0x65	; 101
 b5e:	d0 40       	sbci	r29, 0x00	; 0
 b60:	0f b6       	in	r0, 0x3f	; 63
 b62:	f8 94       	cli
 b64:	de bf       	out	0x3e, r29	; 62
 b66:	0f be       	out	0x3f, r0	; 63
 b68:	cd bf       	out	0x3d, r28	; 61
	uint8_t data=0;
 b6a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t string[100]={0};
 b6c:	84 e6       	ldi	r24, 0x64	; 100
 b6e:	fe 01       	movw	r30, r28
 b70:	32 96       	adiw	r30, 0x02	; 2
 b72:	df 01       	movw	r26, r30
 b74:	98 2f       	mov	r25, r24
 b76:	1d 92       	st	X+, r1
 b78:	9a 95       	dec	r25
 b7a:	e9 f7       	brne	.-6      	; 0xb76 <main+0x22>
			SPI_MasterInit();
 b7c:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_MasterInit>
			//data=SPI_SlaveReceive();

			//SPI_Recive_String(string);


			SPI_MasterTransmit('a');
 b80:	81 e6       	ldi	r24, 0x61	; 97
 b82:	0e 94 a4 00 	call	0x148	; 0x148 <SPI_MasterTransmit>
 b86:	ff cf       	rjmp	.-2      	; 0xb86 <main+0x32>

00000b88 <_exit>:
 b88:	f8 94       	cli

00000b8a <__stop_program>:
 b8a:	ff cf       	rjmp	.-2      	; 0xb8a <__stop_program>
