
SPI_UART_M_Sprint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000147c  00000000  00000000  00000e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000f08  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b4 06 	call	0xd68	; 0xd68 <main>
  64:	0c 94 e7 06 	jmp	0xdce	; 0xdce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_Init>:



}
*/
void UART_Init(uint32_t BoudRate){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <UART_Init+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <UART_Init+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	6a 83       	std	Y+2, r22	; 0x02
  7c:	7b 83       	std	Y+3, r23	; 0x03
  7e:	8c 83       	std	Y+4, r24	; 0x04
  80:	9d 83       	std	Y+5, r25	; 0x05

	DIO_voidSetPinDirection(PORT_D,PIN1,OUTPUT);
  82:	83 e0       	ldi	r24, 0x03	; 3
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_D,PIN0,INPUT);
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_voidSetPinDirection>
UBRR_HELP=(F_CPU/(16*BoudRate))-1;
UBRRL=(uint8_t)(UBRR_HELP>>8);
UBRRH=(uint8_t)(UBRR_HELP);
*/
//select normal mode
 CLRBIT(UCSRA,1);
  96:	ab e2       	ldi	r26, 0x2B	; 43
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	eb e2       	ldi	r30, 0x2B	; 43
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	8c 93       	st	X, r24
 CLRBIT(UCSRA,0);
  a4:	ab e2       	ldi	r26, 0x2B	; 43
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	eb e2       	ldi	r30, 0x2B	; 43
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	8c 93       	st	X, r24

SETBIT(UCSRB,3);
  b2:	aa e2       	ldi	r26, 0x2A	; 42
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	ea e2       	ldi	r30, 0x2A	; 42
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8c 93       	st	X, r24
SETBIT(UCSRB,4);
  c0:	aa e2       	ldi	r26, 0x2A	; 42
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	ea e2       	ldi	r30, 0x2A	; 42
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	8c 93       	st	X, r24

uint8_t UCSRC_HELP=0;
  ce:	19 82       	std	Y+1, r1	; 0x01
SETBIT(UCSRC_HELP,7);
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	89 83       	std	Y+1, r24	; 0x01
// 8bit data
CLRBIT(UCSRB,2);
  d6:	aa e2       	ldi	r26, 0x2A	; 42
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ea e2       	ldi	r30, 0x2A	; 42
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8b 7f       	andi	r24, 0xFB	; 251
  e2:	8c 93       	st	X, r24
SETBIT(UCSRC_HELP,2);
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	89 83       	std	Y+1, r24	; 0x01
SETBIT(UCSRC_HELP,1);
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	89 83       	std	Y+1, r24	; 0x01
//asynch.
CLRBIT(UCSRC_HELP,6);
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	89 83       	std	Y+1, r24	; 0x01
//patity mode =disable
CLRBIT(UCSRC_HELP,4);
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	8f 7e       	andi	r24, 0xEF	; 239
  fa:	89 83       	std	Y+1, r24	; 0x01
CLRBIT(UCSRC_HELP,5);
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	8f 7d       	andi	r24, 0xDF	; 223
 100:	89 83       	std	Y+1, r24	; 0x01
// 1 stop bit
CLRBIT(UCSRC_HELP,3);
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	87 7f       	andi	r24, 0xF7	; 247
 106:	89 83       	std	Y+1, r24	; 0x01

UCSRC=UCSRC_HELP;
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	80 83       	st	Z, r24
UBRRL=51;
 110:	e9 e2       	ldi	r30, 0x29	; 41
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	83 e3       	ldi	r24, 0x33	; 51
 116:	80 83       	st	Z, r24
UBRRH=0;
 118:	e0 e4       	ldi	r30, 0x40	; 64
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 82       	st	Z, r1
}
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	08 95       	ret

0000012e <UART_Recive>:

uint8_t UART_Recive(void){
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	0f 92       	push	r0
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
uint8_t recived_data;
	while (0==GETBIT(UCSRA,7));
 138:	eb e2       	ldi	r30, 0x2B	; 43
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	dc f7       	brge	.-10     	; 0x138 <UART_Recive+0xa>
recived_data=UDR;
 142:	ec e2       	ldi	r30, 0x2C	; 44
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	89 83       	std	Y+1, r24	; 0x01
return recived_data;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
}
 14c:	0f 90       	pop	r0
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

00000154 <UART_Transmite>:
		UART_Transmite( Copy_Puint8_tString[Counter] );
	}

}
*/
void UART_Transmite(uint8_t Data){
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	0f 92       	push	r0
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	89 83       	std	Y+1, r24	; 0x01
	while (0==GETBIT(UCSRA,5));
 160:	eb e2       	ldi	r30, 0x2B	; 43
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	82 95       	swap	r24
 168:	86 95       	lsr	r24
 16a:	87 70       	andi	r24, 0x07	; 7
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	81 70       	andi	r24, 0x01	; 1
 172:	90 70       	andi	r25, 0x00	; 0
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	a1 f3       	breq	.-24     	; 0x160 <UART_Transmite+0xc>
	UDR=Data;
 178:	ec e2       	ldi	r30, 0x2C	; 44
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	80 83       	st	Z, r24
}
 180:	0f 90       	pop	r0
 182:	cf 91       	pop	r28
 184:	df 91       	pop	r29
 186:	08 95       	ret

00000188 <UART_Transmite_String>:

void UART_Transmite_String(uint8_t *str){
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	00 d0       	rcall	.+0      	; 0x18e <UART_Transmite_String+0x6>
 18e:	0f 92       	push	r0
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	9b 83       	std	Y+3, r25	; 0x03
 196:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
 198:	19 82       	std	Y+1, r1	; 0x01
 19a:	0e c0       	rjmp	.+28     	; 0x1b8 <UART_Transmite_String+0x30>
	while (str[i]!='\0'){
	UART_Transmite(str[i]);
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	9b 81       	ldd	r25, Y+3	; 0x03
 1a6:	fc 01       	movw	r30, r24
 1a8:	e2 0f       	add	r30, r18
 1aa:	f3 1f       	adc	r31, r19
 1ac:	80 81       	ld	r24, Z
 1ae:	0e 94 aa 00 	call	0x154	; 0x154 <UART_Transmite>
	i++;
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	89 83       	std	Y+1, r24	; 0x01
	UDR=Data;
}

void UART_Transmite_String(uint8_t *str){
	uint8_t i=0;
	while (str[i]!='\0'){
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	9b 81       	ldd	r25, Y+3	; 0x03
 1c2:	fc 01       	movw	r30, r24
 1c4:	e2 0f       	add	r30, r18
 1c6:	f3 1f       	adc	r31, r19
 1c8:	80 81       	ld	r24, Z
 1ca:	88 23       	and	r24, r24
 1cc:	39 f7       	brne	.-50     	; 0x19c <UART_Transmite_String+0x14>
	UART_Transmite(str[i]);
	i++;
}
}
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	cf 91       	pop	r28
 1d6:	df 91       	pop	r29
 1d8:	08 95       	ret

000001da <UART_Recive_String>:


void UART_Recive_String(uint8_t *str){
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	df 93       	push	r29
 1e0:	cf 93       	push	r28
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <UART_Recive_String+0xa>
 1e4:	0f 92       	push	r0
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	9b 83       	std	Y+3, r25	; 0x03
 1ec:	8a 83       	std	Y+2, r24	; 0x02
uint8_t i=0;
 1ee:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_Recive();
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	28 2f       	mov	r18, r24
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	9b 81       	ldd	r25, Y+3	; 0x03
 1fa:	8c 01       	movw	r16, r24
 1fc:	02 0f       	add	r16, r18
 1fe:	13 1f       	adc	r17, r19
 200:	0e 94 97 00 	call	0x12e	; 0x12e <UART_Recive>
 204:	f8 01       	movw	r30, r16
 206:	80 83       	st	Z, r24
 208:	0f c0       	rjmp	.+30     	; 0x228 <UART_Recive_String+0x4e>
	while(str[i]!='#'){

		i++;
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_Recive();
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	9b 81       	ldd	r25, Y+3	; 0x03
 21a:	8c 01       	movw	r16, r24
 21c:	02 0f       	add	r16, r18
 21e:	13 1f       	adc	r17, r19
 220:	0e 94 97 00 	call	0x12e	; 0x12e <UART_Recive>
 224:	f8 01       	movw	r30, r16
 226:	80 83       	st	Z, r24


void UART_Recive_String(uint8_t *str){
uint8_t i=0;
	str[i]=UART_Recive();
	while(str[i]!='#'){
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	9b 81       	ldd	r25, Y+3	; 0x03
 232:	fc 01       	movw	r30, r24
 234:	e2 0f       	add	r30, r18
 236:	f3 1f       	adc	r31, r19
 238:	80 81       	ld	r24, Z
 23a:	83 32       	cpi	r24, 0x23	; 35
 23c:	31 f7       	brne	.-52     	; 0x20a <UART_Recive_String+0x30>
		str[i]=UART_Recive();

	}
	//str[i]='#';
	//str[i+1]='\0';
	str[i+1]='\0';
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	88 2f       	mov	r24, r24
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	9c 01       	movw	r18, r24
 246:	2f 5f       	subi	r18, 0xFF	; 255
 248:	3f 4f       	sbci	r19, 0xFF	; 255
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	9b 81       	ldd	r25, Y+3	; 0x03
 24e:	fc 01       	movw	r30, r24
 250:	e2 0f       	add	r30, r18
 252:	f3 1f       	adc	r31, r19
 254:	10 82       	st	Z, r1
}
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	cf 91       	pop	r28
 25e:	df 91       	pop	r29
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <SPI_MasterInit>:
#include "SPI_Config.h"




void SPI_MasterInit(void){
 266:	df 93       	push	r29
 268:	cf 93       	push	r28
 26a:	0f 92       	push	r0
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORT_B,PIN4,OUTPUT);//ss
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	64 e0       	ldi	r22, 0x04	; 4
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORT_B,PIN4,LOW);//ss
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	64 e0       	ldi	r22, 0x04	; 4
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	0e 94 40 02 	call	0x480	; 0x480 <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(PORT_B,PIN5,OUTPUT);//mosi
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	65 e0       	ldi	r22, 0x05	; 5
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN6,INPUT);//miso
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	66 e0       	ldi	r22, 0x06	; 6
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN7,OUTPUT);//clk
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	67 e0       	ldi	r22, 0x07	; 7
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_voidSetPinDirection>

	uint8_t SPCR_HELP=0;
 2a2:	19 82       	std	Y+1, r1	; 0x01
		SETBIT(SPCR_HELP,6);//spi enable
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	89 83       	std	Y+1, r24	; 0x01

		//SETBIT(SPCR_HELP,5);//lsb
		SETBIT(SPCR_HELP,4);//master
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	80 61       	ori	r24, 0x10	; 16
 2ae:	89 83       	std	Y+1, r24	; 0x01
		//SETBIT(SPCR_HELP,3);//rising
		//SETBIT(SPCR_HELP,2);//setup then sample
		//clk f/4
		CLRBIT(SPCR_HELP,1);
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	8d 7f       	andi	r24, 0xFD	; 253
 2b4:	89 83       	std	Y+1, r24	; 0x01
		CLRBIT(SPCR_HELP,0);
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	8e 7f       	andi	r24, 0xFE	; 254
 2ba:	89 83       	std	Y+1, r24	; 0x01
		CLRBIT(SPSR,0);
 2bc:	ae e2       	ldi	r26, 0x2E	; 46
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	ee e2       	ldi	r30, 0x2E	; 46
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	8e 7f       	andi	r24, 0xFE	; 254
 2c8:	8c 93       	st	X, r24
	SPCR=SPCR_HELP;
 2ca:	ed e2       	ldi	r30, 0x2D	; 45
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	80 83       	st	Z, r24




}
 2d2:	0f 90       	pop	r0
 2d4:	cf 91       	pop	r28
 2d6:	df 91       	pop	r29
 2d8:	08 95       	ret

000002da <SPI_SlaveInit>:
SPDR = cData;
 Wait for transmission complete
while(!(SPSR & (1<<SPIF)))
;
}*/
void SPI_SlaveInit(void){
 2da:	df 93       	push	r29
 2dc:	cf 93       	push	r28
 2de:	0f 92       	push	r0
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	uint8_t SPCR_HELP=0;
 2e4:	19 82       	std	Y+1, r1	; 0x01

	DIO_voidSetPinDirection(PORT_B,PIN4,INPUT);//ss
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	64 e0       	ldi	r22, 0x04	; 4
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_voidSetPinDirection>
		//DIO_VidSetPinValue(DIO_PORTB,DIO_PIN4,DIO_LOW);//ss

	DIO_voidSetPinDirection(PORT_B,PIN5,INPUT);//mosi
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	65 e0       	ldi	r22, 0x05	; 5
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN6,OUTPUT);//miso
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	66 e0       	ldi	r22, 0x06	; 6
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B,PIN7,INPUT);//clk
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	67 e0       	ldi	r22, 0x07	; 7
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_voidSetPinDirection>
			SETBIT(SPCR_HELP,6);//spi enable
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	80 64       	ori	r24, 0x40	; 64
 312:	89 83       	std	Y+1, r24	; 0x01

				SETBIT(SPCR_HELP,5);//lsb
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	80 62       	ori	r24, 0x20	; 32
 318:	89 83       	std	Y+1, r24	; 0x01
				CLRBIT(SPCR_HELP,4);//slave
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	8f 7e       	andi	r24, 0xEF	; 239
 31e:	89 83       	std	Y+1, r24	; 0x01
				SETBIT(SPCR_HELP,3);//rising
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	88 60       	ori	r24, 0x08	; 8
 324:	89 83       	std	Y+1, r24	; 0x01
				CLRBIT(SPCR_HELP,2);//setup then sample
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	8b 7f       	andi	r24, 0xFB	; 251
 32a:	89 83       	std	Y+1, r24	; 0x01
				//clk f/4
				CLRBIT(SPCR_HELP,1);
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	8d 7f       	andi	r24, 0xFD	; 253
 330:	89 83       	std	Y+1, r24	; 0x01
				CLRBIT(SPCR_HELP,0);
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	8e 7f       	andi	r24, 0xFE	; 254
 336:	89 83       	std	Y+1, r24	; 0x01
				//CLRBIT(SPSR,0);

			SPCR=SPCR_HELP;
 338:	ed e2       	ldi	r30, 0x2D	; 45
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	80 83       	st	Z, r24

}
 340:	0f 90       	pop	r0
 342:	cf 91       	pop	r28
 344:	df 91       	pop	r29
 346:	08 95       	ret

00000348 <SPI_MasterTransmit>:


void SPI_MasterTransmit(uint8_t cData){
 348:	df 93       	push	r29
 34a:	cf 93       	push	r28
 34c:	0f 92       	push	r0
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	89 83       	std	Y+1, r24	; 0x01
	SPDR = cData;
 354:	ef e2       	ldi	r30, 0x2F	; 47
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	80 83       	st	Z, r24
while(!(GETBIT(SPSR,7)));
 35c:	ee e2       	ldi	r30, 0x2E	; 46
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	88 23       	and	r24, r24
 364:	dc f7       	brge	.-10     	; 0x35c <SPI_MasterTransmit+0x14>

cData=SPDR;
 366:	ef e2       	ldi	r30, 0x2F	; 47
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	89 83       	std	Y+1, r24	; 0x01
}
 36e:	0f 90       	pop	r0
 370:	cf 91       	pop	r28
 372:	df 91       	pop	r29
 374:	08 95       	ret

00000376 <SPI_SlaveReceive>:


uint8_t SPI_SlaveReceive(void){
 376:	df 93       	push	r29
 378:	cf 93       	push	r28
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62

	while(0==GETBIT(SPSR,7));
 37e:	ee e2       	ldi	r30, 0x2E	; 46
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	88 23       	and	r24, r24
 386:	dc f7       	brge	.-10     	; 0x37e <SPI_SlaveReceive+0x8>
	return SPDR;
 388:	ef e2       	ldi	r30, 0x2F	; 47
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z

}
 38e:	cf 91       	pop	r28
 390:	df 91       	pop	r29
 392:	08 95       	ret

00000394 <SPI_Transmite_String>:
void SPI_Transmite_String(uint8_t *str){
 394:	df 93       	push	r29
 396:	cf 93       	push	r28
 398:	00 d0       	rcall	.+0      	; 0x39a <SPI_Transmite_String+0x6>
 39a:	0f 92       	push	r0
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	9b 83       	std	Y+3, r25	; 0x03
 3a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
 3a4:	19 82       	std	Y+1, r1	; 0x01
 3a6:	0e c0       	rjmp	.+28     	; 0x3c4 <SPI_Transmite_String+0x30>
	while (str[i]!='\0'){
		SPI_MasterTransmit(str[i]);
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	9b 81       	ldd	r25, Y+3	; 0x03
 3b2:	fc 01       	movw	r30, r24
 3b4:	e2 0f       	add	r30, r18
 3b6:	f3 1f       	adc	r31, r19
 3b8:	80 81       	ld	r24, Z
 3ba:	0e 94 a4 01 	call	0x348	; 0x348 <SPI_MasterTransmit>
	i++;
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	8f 5f       	subi	r24, 0xFF	; 255
 3c2:	89 83       	std	Y+1, r24	; 0x01
	return SPDR;

}
void SPI_Transmite_String(uint8_t *str){
	uint8_t i=0;
	while (str[i]!='\0'){
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	28 2f       	mov	r18, r24
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	8a 81       	ldd	r24, Y+2	; 0x02
 3cc:	9b 81       	ldd	r25, Y+3	; 0x03
 3ce:	fc 01       	movw	r30, r24
 3d0:	e2 0f       	add	r30, r18
 3d2:	f3 1f       	adc	r31, r19
 3d4:	80 81       	ld	r24, Z
 3d6:	88 23       	and	r24, r24
 3d8:	39 f7       	brne	.-50     	; 0x3a8 <SPI_Transmite_String+0x14>
		SPI_MasterTransmit(str[i]);
	i++;
	}
	str[i]='#';
 3da:	89 81       	ldd	r24, Y+1	; 0x01
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	9b 81       	ldd	r25, Y+3	; 0x03
 3e4:	fc 01       	movw	r30, r24
 3e6:	e2 0f       	add	r30, r18
 3e8:	f3 1f       	adc	r31, r19
 3ea:	83 e2       	ldi	r24, 0x23	; 35
 3ec:	80 83       	st	Z, r24
}
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	cf 91       	pop	r28
 3f6:	df 91       	pop	r29
 3f8:	08 95       	ret

000003fa <SPI_Recive_String>:
void SPI_Recive_String(uint8_t *str){
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	df 93       	push	r29
 400:	cf 93       	push	r28
 402:	00 d0       	rcall	.+0      	; 0x404 <SPI_Recive_String+0xa>
 404:	0f 92       	push	r0
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	9b 83       	std	Y+3, r25	; 0x03
 40c:	8a 83       	std	Y+2, r24	; 0x02
uint8_t i=0;
 40e:	19 82       	std	Y+1, r1	; 0x01
	str[i]=SPI_SlaveReceive();
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	8a 81       	ldd	r24, Y+2	; 0x02
 418:	9b 81       	ldd	r25, Y+3	; 0x03
 41a:	8c 01       	movw	r16, r24
 41c:	02 0f       	add	r16, r18
 41e:	13 1f       	adc	r17, r19
 420:	0e 94 bb 01 	call	0x376	; 0x376 <SPI_SlaveReceive>
 424:	f8 01       	movw	r30, r16
 426:	80 83       	st	Z, r24
 428:	0f c0       	rjmp	.+30     	; 0x448 <SPI_Recive_String+0x4e>
	while(str[i]!='#'){

		i++;
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	8f 5f       	subi	r24, 0xFF	; 255
 42e:	89 83       	std	Y+1, r24	; 0x01
		str[i]=SPI_SlaveReceive();
 430:	89 81       	ldd	r24, Y+1	; 0x01
 432:	28 2f       	mov	r18, r24
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	9b 81       	ldd	r25, Y+3	; 0x03
 43a:	8c 01       	movw	r16, r24
 43c:	02 0f       	add	r16, r18
 43e:	13 1f       	adc	r17, r19
 440:	0e 94 bb 01 	call	0x376	; 0x376 <SPI_SlaveReceive>
 444:	f8 01       	movw	r30, r16
 446:	80 83       	st	Z, r24
	str[i]='#';
}
void SPI_Recive_String(uint8_t *str){
uint8_t i=0;
	str[i]=SPI_SlaveReceive();
	while(str[i]!='#'){
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	8a 81       	ldd	r24, Y+2	; 0x02
 450:	9b 81       	ldd	r25, Y+3	; 0x03
 452:	fc 01       	movw	r30, r24
 454:	e2 0f       	add	r30, r18
 456:	f3 1f       	adc	r31, r19
 458:	80 81       	ld	r24, Z
 45a:	83 32       	cpi	r24, 0x23	; 35
 45c:	31 f7       	brne	.-52     	; 0x42a <SPI_Recive_String+0x30>

		i++;
		str[i]=SPI_SlaveReceive();

	}
	str[i]='\0';
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	8a 81       	ldd	r24, Y+2	; 0x02
 466:	9b 81       	ldd	r25, Y+3	; 0x03
 468:	fc 01       	movw	r30, r24
 46a:	e2 0f       	add	r30, r18
 46c:	f3 1f       	adc	r31, r19
 46e:	10 82       	st	Z, r1
}
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	08 95       	ret

00000480 <DIO_voidSetPinValue>:
 * @param EN_Pin    PIN Number
 * @param EN_Value  HIGH or LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
 480:	df 93       	push	r29
 482:	cf 93       	push	r28
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	28 97       	sbiw	r28, 0x08	; 8
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
 494:	8a 83       	std	Y+2, r24	; 0x02
 496:	6b 83       	std	Y+3, r22	; 0x03
 498:	4c 83       	std	Y+4, r20	; 0x04
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Value == LOW)
 49e:	8c 81       	ldd	r24, Y+4	; 0x04
 4a0:	88 23       	and	r24, r24
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <DIO_voidSetPinValue+0x26>
 4a4:	76 c0       	rjmp	.+236    	; 0x592 <DIO_voidSetPinValue+0x112>
    {
        switch (EN_Port)
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	38 87       	std	Y+8, r19	; 0x08
 4ae:	2f 83       	std	Y+7, r18	; 0x07
 4b0:	8f 81       	ldd	r24, Y+7	; 0x07
 4b2:	98 85       	ldd	r25, Y+8	; 0x08
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	91 05       	cpc	r25, r1
 4b8:	59 f1       	breq	.+86     	; 0x510 <DIO_voidSetPinValue+0x90>
 4ba:	2f 81       	ldd	r18, Y+7	; 0x07
 4bc:	38 85       	ldd	r19, Y+8	; 0x08
 4be:	22 30       	cpi	r18, 0x02	; 2
 4c0:	31 05       	cpc	r19, r1
 4c2:	2c f4       	brge	.+10     	; 0x4ce <DIO_voidSetPinValue+0x4e>
 4c4:	8f 81       	ldd	r24, Y+7	; 0x07
 4c6:	98 85       	ldd	r25, Y+8	; 0x08
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	69 f0       	breq	.+26     	; 0x4e6 <DIO_voidSetPinValue+0x66>
 4cc:	60 c0       	rjmp	.+192    	; 0x58e <DIO_voidSetPinValue+0x10e>
 4ce:	2f 81       	ldd	r18, Y+7	; 0x07
 4d0:	38 85       	ldd	r19, Y+8	; 0x08
 4d2:	22 30       	cpi	r18, 0x02	; 2
 4d4:	31 05       	cpc	r19, r1
 4d6:	89 f1       	breq	.+98     	; 0x53a <DIO_voidSetPinValue+0xba>
 4d8:	8f 81       	ldd	r24, Y+7	; 0x07
 4da:	98 85       	ldd	r25, Y+8	; 0x08
 4dc:	83 30       	cpi	r24, 0x03	; 3
 4de:	91 05       	cpc	r25, r1
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <DIO_voidSetPinValue+0x64>
 4e2:	40 c0       	rjmp	.+128    	; 0x564 <DIO_voidSetPinValue+0xe4>
 4e4:	54 c0       	rjmp	.+168    	; 0x58e <DIO_voidSetPinValue+0x10e>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
 4e6:	ab e3       	ldi	r26, 0x3B	; 59
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	eb e3       	ldi	r30, 0x3B	; 59
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	48 2f       	mov	r20, r24
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 2e       	mov	r0, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_voidSetPinValue+0x84>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	0a 94       	dec	r0
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_voidSetPinValue+0x80>
 508:	80 95       	com	r24
 50a:	84 23       	and	r24, r20
 50c:	8c 93       	st	X, r24
 50e:	b5 c0       	rjmp	.+362    	; 0x67a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
 510:	a8 e3       	ldi	r26, 0x38	; 56
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	e8 e3       	ldi	r30, 0x38	; 56
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	48 2f       	mov	r20, r24
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	28 2f       	mov	r18, r24
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 2e       	mov	r0, r18
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_voidSetPinValue+0xae>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	0a 94       	dec	r0
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_voidSetPinValue+0xaa>
 532:	80 95       	com	r24
 534:	84 23       	and	r24, r20
 536:	8c 93       	st	X, r24
 538:	a0 c0       	rjmp	.+320    	; 0x67a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
 53a:	a5 e3       	ldi	r26, 0x35	; 53
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	e5 e3       	ldi	r30, 0x35	; 53
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	48 2f       	mov	r20, r24
 546:	8b 81       	ldd	r24, Y+3	; 0x03
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 2e       	mov	r0, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_voidSetPinValue+0xd8>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_voidSetPinValue+0xd4>
 55c:	80 95       	com	r24
 55e:	84 23       	and	r24, r20
 560:	8c 93       	st	X, r24
 562:	8b c0       	rjmp	.+278    	; 0x67a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
 564:	a2 e3       	ldi	r26, 0x32	; 50
 566:	b0 e0       	ldi	r27, 0x00	; 0
 568:	e2 e3       	ldi	r30, 0x32	; 50
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	48 2f       	mov	r20, r24
 570:	8b 81       	ldd	r24, Y+3	; 0x03
 572:	28 2f       	mov	r18, r24
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 2e       	mov	r0, r18
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_voidSetPinValue+0x102>
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	0a 94       	dec	r0
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_voidSetPinValue+0xfe>
 586:	80 95       	com	r24
 588:	84 23       	and	r24, r20
 58a:	8c 93       	st	X, r24
 58c:	76 c0       	rjmp	.+236    	; 0x67a <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_DIOValue;
 58e:	19 82       	std	Y+1, r1	; 0x01
 590:	74 c0       	rjmp	.+232    	; 0x67a <DIO_voidSetPinValue+0x1fa>
            break;
        }
    }
    else if (EN_Value == HIGH)
 592:	8c 81       	ldd	r24, Y+4	; 0x04
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	09 f0       	breq	.+2      	; 0x59a <DIO_voidSetPinValue+0x11a>
 598:	70 c0       	rjmp	.+224    	; 0x67a <DIO_voidSetPinValue+0x1fa>
    {
        switch (EN_Port)
 59a:	8a 81       	ldd	r24, Y+2	; 0x02
 59c:	28 2f       	mov	r18, r24
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	3e 83       	std	Y+6, r19	; 0x06
 5a2:	2d 83       	std	Y+5, r18	; 0x05
 5a4:	8d 81       	ldd	r24, Y+5	; 0x05
 5a6:	9e 81       	ldd	r25, Y+6	; 0x06
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	91 05       	cpc	r25, r1
 5ac:	49 f1       	breq	.+82     	; 0x600 <DIO_voidSetPinValue+0x180>
 5ae:	2d 81       	ldd	r18, Y+5	; 0x05
 5b0:	3e 81       	ldd	r19, Y+6	; 0x06
 5b2:	22 30       	cpi	r18, 0x02	; 2
 5b4:	31 05       	cpc	r19, r1
 5b6:	2c f4       	brge	.+10     	; 0x5c2 <DIO_voidSetPinValue+0x142>
 5b8:	8d 81       	ldd	r24, Y+5	; 0x05
 5ba:	9e 81       	ldd	r25, Y+6	; 0x06
 5bc:	00 97       	sbiw	r24, 0x00	; 0
 5be:	61 f0       	breq	.+24     	; 0x5d8 <DIO_voidSetPinValue+0x158>
 5c0:	5b c0       	rjmp	.+182    	; 0x678 <DIO_voidSetPinValue+0x1f8>
 5c2:	2d 81       	ldd	r18, Y+5	; 0x05
 5c4:	3e 81       	ldd	r19, Y+6	; 0x06
 5c6:	22 30       	cpi	r18, 0x02	; 2
 5c8:	31 05       	cpc	r19, r1
 5ca:	71 f1       	breq	.+92     	; 0x628 <DIO_voidSetPinValue+0x1a8>
 5cc:	8d 81       	ldd	r24, Y+5	; 0x05
 5ce:	9e 81       	ldd	r25, Y+6	; 0x06
 5d0:	83 30       	cpi	r24, 0x03	; 3
 5d2:	91 05       	cpc	r25, r1
 5d4:	e9 f1       	breq	.+122    	; 0x650 <DIO_voidSetPinValue+0x1d0>
 5d6:	50 c0       	rjmp	.+160    	; 0x678 <DIO_voidSetPinValue+0x1f8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
 5d8:	ab e3       	ldi	r26, 0x3B	; 59
 5da:	b0 e0       	ldi	r27, 0x00	; 0
 5dc:	eb e3       	ldi	r30, 0x3B	; 59
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	48 2f       	mov	r20, r24
 5e4:	8b 81       	ldd	r24, Y+3	; 0x03
 5e6:	28 2f       	mov	r18, r24
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 2e       	mov	r0, r18
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_voidSetPinValue+0x176>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	0a 94       	dec	r0
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_voidSetPinValue+0x172>
 5fa:	84 2b       	or	r24, r20
 5fc:	8c 93       	st	X, r24
 5fe:	3d c0       	rjmp	.+122    	; 0x67a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
 600:	a8 e3       	ldi	r26, 0x38	; 56
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	e8 e3       	ldi	r30, 0x38	; 56
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	48 2f       	mov	r20, r24
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	28 2f       	mov	r18, r24
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 2e       	mov	r0, r18
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_voidSetPinValue+0x19e>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_voidSetPinValue+0x19a>
 622:	84 2b       	or	r24, r20
 624:	8c 93       	st	X, r24
 626:	29 c0       	rjmp	.+82     	; 0x67a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
 628:	a5 e3       	ldi	r26, 0x35	; 53
 62a:	b0 e0       	ldi	r27, 0x00	; 0
 62c:	e5 e3       	ldi	r30, 0x35	; 53
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	80 81       	ld	r24, Z
 632:	48 2f       	mov	r20, r24
 634:	8b 81       	ldd	r24, Y+3	; 0x03
 636:	28 2f       	mov	r18, r24
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 2e       	mov	r0, r18
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_voidSetPinValue+0x1c6>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	0a 94       	dec	r0
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_voidSetPinValue+0x1c2>
 64a:	84 2b       	or	r24, r20
 64c:	8c 93       	st	X, r24
 64e:	15 c0       	rjmp	.+42     	; 0x67a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
 650:	a2 e3       	ldi	r26, 0x32	; 50
 652:	b0 e0       	ldi	r27, 0x00	; 0
 654:	e2 e3       	ldi	r30, 0x32	; 50
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	48 2f       	mov	r20, r24
 65c:	8b 81       	ldd	r24, Y+3	; 0x03
 65e:	28 2f       	mov	r18, r24
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	02 2e       	mov	r0, r18
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_voidSetPinValue+0x1ee>
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	0a 94       	dec	r0
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_voidSetPinValue+0x1ea>
 672:	84 2b       	or	r24, r20
 674:	8c 93       	st	X, r24
 676:	01 c0       	rjmp	.+2      	; 0x67a <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_DIOValue;
 678:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
 67a:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinValue */
 67c:	28 96       	adiw	r28, 0x08	; 8
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	f8 94       	cli
 682:	de bf       	out	0x3e, r29	; 62
 684:	0f be       	out	0x3f, r0	; 63
 686:	cd bf       	out	0x3d, r28	; 61
 688:	cf 91       	pop	r28
 68a:	df 91       	pop	r29
 68c:	08 95       	ret

0000068e <DIO_voidSetPinDirection>:
 * @param EN_Pin  PIN Number
 * @param EN_Direction Direction of the Pin INPUT | OUTPUT
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
 68e:	df 93       	push	r29
 690:	cf 93       	push	r28
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
 696:	28 97       	sbiw	r28, 0x08	; 8
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	f8 94       	cli
 69c:	de bf       	out	0x3e, r29	; 62
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	cd bf       	out	0x3d, r28	; 61
 6a2:	8a 83       	std	Y+2, r24	; 0x02
 6a4:	6b 83       	std	Y+3, r22	; 0x03
 6a6:	4c 83       	std	Y+4, r20	; 0x04
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 6a8:	84 e0       	ldi	r24, 0x04	; 4
 6aa:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Direction == INPUT)
 6ac:	8c 81       	ldd	r24, Y+4	; 0x04
 6ae:	88 23       	and	r24, r24
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <DIO_voidSetPinDirection+0x26>
 6b2:	77 c0       	rjmp	.+238    	; 0x7a2 <DIO_voidSetPinDirection+0x114>
    {
        switch (EN_port)
 6b4:	8a 81       	ldd	r24, Y+2	; 0x02
 6b6:	28 2f       	mov	r18, r24
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	38 87       	std	Y+8, r19	; 0x08
 6bc:	2f 83       	std	Y+7, r18	; 0x07
 6be:	8f 81       	ldd	r24, Y+7	; 0x07
 6c0:	98 85       	ldd	r25, Y+8	; 0x08
 6c2:	81 30       	cpi	r24, 0x01	; 1
 6c4:	91 05       	cpc	r25, r1
 6c6:	59 f1       	breq	.+86     	; 0x71e <DIO_voidSetPinDirection+0x90>
 6c8:	2f 81       	ldd	r18, Y+7	; 0x07
 6ca:	38 85       	ldd	r19, Y+8	; 0x08
 6cc:	22 30       	cpi	r18, 0x02	; 2
 6ce:	31 05       	cpc	r19, r1
 6d0:	2c f4       	brge	.+10     	; 0x6dc <DIO_voidSetPinDirection+0x4e>
 6d2:	8f 81       	ldd	r24, Y+7	; 0x07
 6d4:	98 85       	ldd	r25, Y+8	; 0x08
 6d6:	00 97       	sbiw	r24, 0x00	; 0
 6d8:	69 f0       	breq	.+26     	; 0x6f4 <DIO_voidSetPinDirection+0x66>
 6da:	60 c0       	rjmp	.+192    	; 0x79c <DIO_voidSetPinDirection+0x10e>
 6dc:	2f 81       	ldd	r18, Y+7	; 0x07
 6de:	38 85       	ldd	r19, Y+8	; 0x08
 6e0:	22 30       	cpi	r18, 0x02	; 2
 6e2:	31 05       	cpc	r19, r1
 6e4:	89 f1       	breq	.+98     	; 0x748 <DIO_voidSetPinDirection+0xba>
 6e6:	8f 81       	ldd	r24, Y+7	; 0x07
 6e8:	98 85       	ldd	r25, Y+8	; 0x08
 6ea:	83 30       	cpi	r24, 0x03	; 3
 6ec:	91 05       	cpc	r25, r1
 6ee:	09 f4       	brne	.+2      	; 0x6f2 <DIO_voidSetPinDirection+0x64>
 6f0:	40 c0       	rjmp	.+128    	; 0x772 <DIO_voidSetPinDirection+0xe4>
 6f2:	54 c0       	rjmp	.+168    	; 0x79c <DIO_voidSetPinDirection+0x10e>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
 6f4:	aa e3       	ldi	r26, 0x3A	; 58
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	ea e3       	ldi	r30, 0x3A	; 58
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	48 2f       	mov	r20, r24
 700:	8b 81       	ldd	r24, Y+3	; 0x03
 702:	28 2f       	mov	r18, r24
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 2e       	mov	r0, r18
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_voidSetPinDirection+0x84>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	0a 94       	dec	r0
 714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_voidSetPinDirection+0x80>
 716:	80 95       	com	r24
 718:	84 23       	and	r24, r20
 71a:	8c 93       	st	X, r24
 71c:	b7 c0       	rjmp	.+366    	; 0x88c <__stack+0x2d>
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
 71e:	a7 e3       	ldi	r26, 0x37	; 55
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	e7 e3       	ldi	r30, 0x37	; 55
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	48 2f       	mov	r20, r24
 72a:	8b 81       	ldd	r24, Y+3	; 0x03
 72c:	28 2f       	mov	r18, r24
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 2e       	mov	r0, r18
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_voidSetPinDirection+0xae>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	0a 94       	dec	r0
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_voidSetPinDirection+0xaa>
 740:	80 95       	com	r24
 742:	84 23       	and	r24, r20
 744:	8c 93       	st	X, r24
 746:	a2 c0       	rjmp	.+324    	; 0x88c <__stack+0x2d>
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
 748:	a4 e3       	ldi	r26, 0x34	; 52
 74a:	b0 e0       	ldi	r27, 0x00	; 0
 74c:	e4 e3       	ldi	r30, 0x34	; 52
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	48 2f       	mov	r20, r24
 754:	8b 81       	ldd	r24, Y+3	; 0x03
 756:	28 2f       	mov	r18, r24
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	02 2e       	mov	r0, r18
 760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_voidSetPinDirection+0xd8>
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	0a 94       	dec	r0
 768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_voidSetPinDirection+0xd4>
 76a:	80 95       	com	r24
 76c:	84 23       	and	r24, r20
 76e:	8c 93       	st	X, r24
 770:	8d c0       	rjmp	.+282    	; 0x88c <__stack+0x2d>
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
 772:	a1 e3       	ldi	r26, 0x31	; 49
 774:	b0 e0       	ldi	r27, 0x00	; 0
 776:	e1 e3       	ldi	r30, 0x31	; 49
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	48 2f       	mov	r20, r24
 77e:	8b 81       	ldd	r24, Y+3	; 0x03
 780:	28 2f       	mov	r18, r24
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	02 2e       	mov	r0, r18
 78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_voidSetPinDirection+0x102>
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	0a 94       	dec	r0
 792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_voidSetPinDirection+0xfe>
 794:	80 95       	com	r24
 796:	84 23       	and	r24, r20
 798:	8c 93       	st	X, r24
 79a:	78 c0       	rjmp	.+240    	; 0x88c <__stack+0x2d>
            break;
        default:
            state = E_DIODirec;
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	89 83       	std	Y+1, r24	; 0x01
 7a0:	75 c0       	rjmp	.+234    	; 0x88c <__stack+0x2d>
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
 7a2:	8c 81       	ldd	r24, Y+4	; 0x04
 7a4:	81 30       	cpi	r24, 0x01	; 1
 7a6:	09 f0       	breq	.+2      	; 0x7aa <DIO_voidSetPinDirection+0x11c>
 7a8:	71 c0       	rjmp	.+226    	; 0x88c <__stack+0x2d>
    {
        switch (EN_port)
 7aa:	8a 81       	ldd	r24, Y+2	; 0x02
 7ac:	28 2f       	mov	r18, r24
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	3e 83       	std	Y+6, r19	; 0x06
 7b2:	2d 83       	std	Y+5, r18	; 0x05
 7b4:	8d 81       	ldd	r24, Y+5	; 0x05
 7b6:	9e 81       	ldd	r25, Y+6	; 0x06
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	91 05       	cpc	r25, r1
 7bc:	49 f1       	breq	.+82     	; 0x810 <DIO_voidSetPinDirection+0x182>
 7be:	2d 81       	ldd	r18, Y+5	; 0x05
 7c0:	3e 81       	ldd	r19, Y+6	; 0x06
 7c2:	22 30       	cpi	r18, 0x02	; 2
 7c4:	31 05       	cpc	r19, r1
 7c6:	2c f4       	brge	.+10     	; 0x7d2 <DIO_voidSetPinDirection+0x144>
 7c8:	8d 81       	ldd	r24, Y+5	; 0x05
 7ca:	9e 81       	ldd	r25, Y+6	; 0x06
 7cc:	00 97       	sbiw	r24, 0x00	; 0
 7ce:	61 f0       	breq	.+24     	; 0x7e8 <DIO_voidSetPinDirection+0x15a>
 7d0:	5b c0       	rjmp	.+182    	; 0x888 <__stack+0x29>
 7d2:	2d 81       	ldd	r18, Y+5	; 0x05
 7d4:	3e 81       	ldd	r19, Y+6	; 0x06
 7d6:	22 30       	cpi	r18, 0x02	; 2
 7d8:	31 05       	cpc	r19, r1
 7da:	71 f1       	breq	.+92     	; 0x838 <DIO_voidSetPinDirection+0x1aa>
 7dc:	8d 81       	ldd	r24, Y+5	; 0x05
 7de:	9e 81       	ldd	r25, Y+6	; 0x06
 7e0:	83 30       	cpi	r24, 0x03	; 3
 7e2:	91 05       	cpc	r25, r1
 7e4:	e9 f1       	breq	.+122    	; 0x860 <__stack+0x1>
 7e6:	50 c0       	rjmp	.+160    	; 0x888 <__stack+0x29>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
 7e8:	aa e3       	ldi	r26, 0x3A	; 58
 7ea:	b0 e0       	ldi	r27, 0x00	; 0
 7ec:	ea e3       	ldi	r30, 0x3A	; 58
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	48 2f       	mov	r20, r24
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	28 2f       	mov	r18, r24
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	02 2e       	mov	r0, r18
 800:	02 c0       	rjmp	.+4      	; 0x806 <DIO_voidSetPinDirection+0x178>
 802:	88 0f       	add	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	0a 94       	dec	r0
 808:	e2 f7       	brpl	.-8      	; 0x802 <DIO_voidSetPinDirection+0x174>
 80a:	84 2b       	or	r24, r20
 80c:	8c 93       	st	X, r24
 80e:	3e c0       	rjmp	.+124    	; 0x88c <__stack+0x2d>
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
 810:	a7 e3       	ldi	r26, 0x37	; 55
 812:	b0 e0       	ldi	r27, 0x00	; 0
 814:	e7 e3       	ldi	r30, 0x37	; 55
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	48 2f       	mov	r20, r24
 81c:	8b 81       	ldd	r24, Y+3	; 0x03
 81e:	28 2f       	mov	r18, r24
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	02 2e       	mov	r0, r18
 828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_voidSetPinDirection+0x1a0>
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	0a 94       	dec	r0
 830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_voidSetPinDirection+0x19c>
 832:	84 2b       	or	r24, r20
 834:	8c 93       	st	X, r24
 836:	2a c0       	rjmp	.+84     	; 0x88c <__stack+0x2d>
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
 838:	a4 e3       	ldi	r26, 0x34	; 52
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	e4 e3       	ldi	r30, 0x34	; 52
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	48 2f       	mov	r20, r24
 844:	8b 81       	ldd	r24, Y+3	; 0x03
 846:	28 2f       	mov	r18, r24
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 2e       	mov	r0, r18
 850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_voidSetPinDirection+0x1c8>
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	0a 94       	dec	r0
 858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_voidSetPinDirection+0x1c4>
 85a:	84 2b       	or	r24, r20
 85c:	8c 93       	st	X, r24
 85e:	16 c0       	rjmp	.+44     	; 0x88c <__stack+0x2d>
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
 860:	a1 e3       	ldi	r26, 0x31	; 49
 862:	b0 e0       	ldi	r27, 0x00	; 0
 864:	e1 e3       	ldi	r30, 0x31	; 49
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
 86a:	48 2f       	mov	r20, r24
 86c:	8b 81       	ldd	r24, Y+3	; 0x03
 86e:	28 2f       	mov	r18, r24
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 2e       	mov	r0, r18
 878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
 87a:	88 0f       	add	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	0a 94       	dec	r0
 880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
 882:	84 2b       	or	r24, r20
 884:	8c 93       	st	X, r24
 886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
            break;
        default:
            state = E_DIODirec;
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }
    return state;
 88c:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinDirection */
 88e:	28 96       	adiw	r28, 0x08	; 8
 890:	0f b6       	in	r0, 0x3f	; 63
 892:	f8 94       	cli
 894:	de bf       	out	0x3e, r29	; 62
 896:	0f be       	out	0x3f, r0	; 63
 898:	cd bf       	out	0x3d, r28	; 61
 89a:	cf 91       	pop	r28
 89c:	df 91       	pop	r29
 89e:	08 95       	ret

000008a0 <DIO_u8GetPinValue>:
 * @param EN_Port           PORT Name
 * @param EN_Pin            PIN Number
 * @return EN_value_type    return Pin HIGH | LOW
 */
EN_value_type DIO_u8GetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
 8a0:	df 93       	push	r29
 8a2:	cf 93       	push	r28
 8a4:	00 d0       	rcall	.+0      	; 0x8a6 <DIO_u8GetPinValue+0x6>
 8a6:	00 d0       	rcall	.+0      	; 0x8a8 <DIO_u8GetPinValue+0x8>
 8a8:	0f 92       	push	r0
 8aa:	cd b7       	in	r28, 0x3d	; 61
 8ac:	de b7       	in	r29, 0x3e	; 62
 8ae:	8a 83       	std	Y+2, r24	; 0x02
 8b0:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
 8b2:	8a 81       	ldd	r24, Y+2	; 0x02
 8b4:	28 2f       	mov	r18, r24
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	3d 83       	std	Y+5, r19	; 0x05
 8ba:	2c 83       	std	Y+4, r18	; 0x04
 8bc:	4c 81       	ldd	r20, Y+4	; 0x04
 8be:	5d 81       	ldd	r21, Y+5	; 0x05
 8c0:	41 30       	cpi	r20, 0x01	; 1
 8c2:	51 05       	cpc	r21, r1
 8c4:	41 f1       	breq	.+80     	; 0x916 <DIO_u8GetPinValue+0x76>
 8c6:	8c 81       	ldd	r24, Y+4	; 0x04
 8c8:	9d 81       	ldd	r25, Y+5	; 0x05
 8ca:	82 30       	cpi	r24, 0x02	; 2
 8cc:	91 05       	cpc	r25, r1
 8ce:	34 f4       	brge	.+12     	; 0x8dc <DIO_u8GetPinValue+0x3c>
 8d0:	2c 81       	ldd	r18, Y+4	; 0x04
 8d2:	3d 81       	ldd	r19, Y+5	; 0x05
 8d4:	21 15       	cp	r18, r1
 8d6:	31 05       	cpc	r19, r1
 8d8:	61 f0       	breq	.+24     	; 0x8f2 <DIO_u8GetPinValue+0x52>
 8da:	52 c0       	rjmp	.+164    	; 0x980 <DIO_u8GetPinValue+0xe0>
 8dc:	4c 81       	ldd	r20, Y+4	; 0x04
 8de:	5d 81       	ldd	r21, Y+5	; 0x05
 8e0:	42 30       	cpi	r20, 0x02	; 2
 8e2:	51 05       	cpc	r21, r1
 8e4:	51 f1       	breq	.+84     	; 0x93a <DIO_u8GetPinValue+0x9a>
 8e6:	8c 81       	ldd	r24, Y+4	; 0x04
 8e8:	9d 81       	ldd	r25, Y+5	; 0x05
 8ea:	83 30       	cpi	r24, 0x03	; 3
 8ec:	91 05       	cpc	r25, r1
 8ee:	b9 f1       	breq	.+110    	; 0x95e <DIO_u8GetPinValue+0xbe>
 8f0:	47 c0       	rjmp	.+142    	; 0x980 <DIO_u8GetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
 8f2:	e9 e3       	ldi	r30, 0x39	; 57
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	28 2f       	mov	r18, r24
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	8b 81       	ldd	r24, Y+3	; 0x03
 8fe:	88 2f       	mov	r24, r24
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	a9 01       	movw	r20, r18
 904:	02 c0       	rjmp	.+4      	; 0x90a <DIO_u8GetPinValue+0x6a>
 906:	55 95       	asr	r21
 908:	47 95       	ror	r20
 90a:	8a 95       	dec	r24
 90c:	e2 f7       	brpl	.-8      	; 0x906 <DIO_u8GetPinValue+0x66>
 90e:	ca 01       	movw	r24, r20
 910:	81 70       	andi	r24, 0x01	; 1
 912:	89 83       	std	Y+1, r24	; 0x01
 914:	35 c0       	rjmp	.+106    	; 0x980 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
 916:	e6 e3       	ldi	r30, 0x36	; 54
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	28 2f       	mov	r18, r24
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	8b 81       	ldd	r24, Y+3	; 0x03
 922:	88 2f       	mov	r24, r24
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	a9 01       	movw	r20, r18
 928:	02 c0       	rjmp	.+4      	; 0x92e <DIO_u8GetPinValue+0x8e>
 92a:	55 95       	asr	r21
 92c:	47 95       	ror	r20
 92e:	8a 95       	dec	r24
 930:	e2 f7       	brpl	.-8      	; 0x92a <DIO_u8GetPinValue+0x8a>
 932:	ca 01       	movw	r24, r20
 934:	81 70       	andi	r24, 0x01	; 1
 936:	89 83       	std	Y+1, r24	; 0x01
 938:	23 c0       	rjmp	.+70     	; 0x980 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
 93a:	e3 e3       	ldi	r30, 0x33	; 51
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	28 2f       	mov	r18, r24
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	8b 81       	ldd	r24, Y+3	; 0x03
 946:	88 2f       	mov	r24, r24
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	a9 01       	movw	r20, r18
 94c:	02 c0       	rjmp	.+4      	; 0x952 <DIO_u8GetPinValue+0xb2>
 94e:	55 95       	asr	r21
 950:	47 95       	ror	r20
 952:	8a 95       	dec	r24
 954:	e2 f7       	brpl	.-8      	; 0x94e <DIO_u8GetPinValue+0xae>
 956:	ca 01       	movw	r24, r20
 958:	81 70       	andi	r24, 0x01	; 1
 95a:	89 83       	std	Y+1, r24	; 0x01
 95c:	11 c0       	rjmp	.+34     	; 0x980 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
 95e:	e0 e3       	ldi	r30, 0x30	; 48
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 81       	ld	r24, Z
 964:	28 2f       	mov	r18, r24
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	8b 81       	ldd	r24, Y+3	; 0x03
 96a:	88 2f       	mov	r24, r24
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	a9 01       	movw	r20, r18
 970:	02 c0       	rjmp	.+4      	; 0x976 <DIO_u8GetPinValue+0xd6>
 972:	55 95       	asr	r21
 974:	47 95       	ror	r20
 976:	8a 95       	dec	r24
 978:	e2 f7       	brpl	.-8      	; 0x972 <DIO_u8GetPinValue+0xd2>
 97a:	ca 01       	movw	r24, r20
 97c:	81 70       	andi	r24, 0x01	; 1
 97e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
 980:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_u8GetPinValue */
 982:	0f 90       	pop	r0
 984:	0f 90       	pop	r0
 986:	0f 90       	pop	r0
 988:	0f 90       	pop	r0
 98a:	0f 90       	pop	r0
 98c:	cf 91       	pop	r28
 98e:	df 91       	pop	r29
 990:	08 95       	ret

00000992 <DIO_voidTogPin>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidTogPin(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
 992:	df 93       	push	r29
 994:	cf 93       	push	r28
 996:	00 d0       	rcall	.+0      	; 0x998 <DIO_voidTogPin+0x6>
 998:	00 d0       	rcall	.+0      	; 0x99a <DIO_voidTogPin+0x8>
 99a:	0f 92       	push	r0
 99c:	cd b7       	in	r28, 0x3d	; 61
 99e:	de b7       	in	r29, 0x3e	; 62
 9a0:	8a 83       	std	Y+2, r24	; 0x02
 9a2:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 9a4:	84 e0       	ldi	r24, 0x04	; 4
 9a6:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
 9a8:	8a 81       	ldd	r24, Y+2	; 0x02
 9aa:	28 2f       	mov	r18, r24
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	3d 83       	std	Y+5, r19	; 0x05
 9b0:	2c 83       	std	Y+4, r18	; 0x04
 9b2:	8c 81       	ldd	r24, Y+4	; 0x04
 9b4:	9d 81       	ldd	r25, Y+5	; 0x05
 9b6:	81 30       	cpi	r24, 0x01	; 1
 9b8:	91 05       	cpc	r25, r1
 9ba:	49 f1       	breq	.+82     	; 0xa0e <DIO_voidTogPin+0x7c>
 9bc:	2c 81       	ldd	r18, Y+4	; 0x04
 9be:	3d 81       	ldd	r19, Y+5	; 0x05
 9c0:	22 30       	cpi	r18, 0x02	; 2
 9c2:	31 05       	cpc	r19, r1
 9c4:	2c f4       	brge	.+10     	; 0x9d0 <DIO_voidTogPin+0x3e>
 9c6:	8c 81       	ldd	r24, Y+4	; 0x04
 9c8:	9d 81       	ldd	r25, Y+5	; 0x05
 9ca:	00 97       	sbiw	r24, 0x00	; 0
 9cc:	61 f0       	breq	.+24     	; 0x9e6 <DIO_voidTogPin+0x54>
 9ce:	5b c0       	rjmp	.+182    	; 0xa86 <DIO_voidTogPin+0xf4>
 9d0:	2c 81       	ldd	r18, Y+4	; 0x04
 9d2:	3d 81       	ldd	r19, Y+5	; 0x05
 9d4:	22 30       	cpi	r18, 0x02	; 2
 9d6:	31 05       	cpc	r19, r1
 9d8:	71 f1       	breq	.+92     	; 0xa36 <DIO_voidTogPin+0xa4>
 9da:	8c 81       	ldd	r24, Y+4	; 0x04
 9dc:	9d 81       	ldd	r25, Y+5	; 0x05
 9de:	83 30       	cpi	r24, 0x03	; 3
 9e0:	91 05       	cpc	r25, r1
 9e2:	e9 f1       	breq	.+122    	; 0xa5e <DIO_voidTogPin+0xcc>
 9e4:	50 c0       	rjmp	.+160    	; 0xa86 <DIO_voidTogPin+0xf4>
    {
    case PORT_A:
        TGLBIT(PORTA, EN_Pin);
 9e6:	ab e3       	ldi	r26, 0x3B	; 59
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	eb e3       	ldi	r30, 0x3B	; 59
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	80 81       	ld	r24, Z
 9f0:	48 2f       	mov	r20, r24
 9f2:	8b 81       	ldd	r24, Y+3	; 0x03
 9f4:	28 2f       	mov	r18, r24
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	02 2e       	mov	r0, r18
 9fe:	02 c0       	rjmp	.+4      	; 0xa04 <DIO_voidTogPin+0x72>
 a00:	88 0f       	add	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	0a 94       	dec	r0
 a06:	e2 f7       	brpl	.-8      	; 0xa00 <DIO_voidTogPin+0x6e>
 a08:	84 27       	eor	r24, r20
 a0a:	8c 93       	st	X, r24
 a0c:	3e c0       	rjmp	.+124    	; 0xa8a <DIO_voidTogPin+0xf8>
        break;
    case PORT_B:
        TGLBIT(PORTB, EN_Pin);
 a0e:	a8 e3       	ldi	r26, 0x38	; 56
 a10:	b0 e0       	ldi	r27, 0x00	; 0
 a12:	e8 e3       	ldi	r30, 0x38	; 56
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	80 81       	ld	r24, Z
 a18:	48 2f       	mov	r20, r24
 a1a:	8b 81       	ldd	r24, Y+3	; 0x03
 a1c:	28 2f       	mov	r18, r24
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	02 2e       	mov	r0, r18
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <DIO_voidTogPin+0x9a>
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	0a 94       	dec	r0
 a2e:	e2 f7       	brpl	.-8      	; 0xa28 <DIO_voidTogPin+0x96>
 a30:	84 27       	eor	r24, r20
 a32:	8c 93       	st	X, r24
 a34:	2a c0       	rjmp	.+84     	; 0xa8a <DIO_voidTogPin+0xf8>
        break;
    case PORT_C:
        TGLBIT(PORTC, EN_Pin);
 a36:	a5 e3       	ldi	r26, 0x35	; 53
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	e5 e3       	ldi	r30, 0x35	; 53
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	48 2f       	mov	r20, r24
 a42:	8b 81       	ldd	r24, Y+3	; 0x03
 a44:	28 2f       	mov	r18, r24
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	02 2e       	mov	r0, r18
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <DIO_voidTogPin+0xc2>
 a50:	88 0f       	add	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	0a 94       	dec	r0
 a56:	e2 f7       	brpl	.-8      	; 0xa50 <DIO_voidTogPin+0xbe>
 a58:	84 27       	eor	r24, r20
 a5a:	8c 93       	st	X, r24
 a5c:	16 c0       	rjmp	.+44     	; 0xa8a <DIO_voidTogPin+0xf8>
        break;
    case PORT_D:
        TGLBIT(PORTD, EN_Pin);
 a5e:	a2 e3       	ldi	r26, 0x32	; 50
 a60:	b0 e0       	ldi	r27, 0x00	; 0
 a62:	e2 e3       	ldi	r30, 0x32	; 50
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	48 2f       	mov	r20, r24
 a6a:	8b 81       	ldd	r24, Y+3	; 0x03
 a6c:	28 2f       	mov	r18, r24
 a6e:	30 e0       	ldi	r19, 0x00	; 0
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	02 2e       	mov	r0, r18
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_voidTogPin+0xea>
 a78:	88 0f       	add	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	0a 94       	dec	r0
 a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_voidTogPin+0xe6>
 a80:	84 27       	eor	r24, r20
 a82:	8c 93       	st	X, r24
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <DIO_voidTogPin+0xf8>
        break;
    default:
        state = E_DIOPORT;
 a86:	82 e0       	ldi	r24, 0x02	; 2
 a88:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return state;
 a8a:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidTogPin */
 a8c:	0f 90       	pop	r0
 a8e:	0f 90       	pop	r0
 a90:	0f 90       	pop	r0
 a92:	0f 90       	pop	r0
 a94:	0f 90       	pop	r0
 a96:	cf 91       	pop	r28
 a98:	df 91       	pop	r29
 a9a:	08 95       	ret

00000a9c <DIO_voidSetPortValue>:
 * @param EN_Port PORT Name
 * @param EN_Value HIGH | LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
 a9c:	df 93       	push	r29
 a9e:	cf 93       	push	r28
 aa0:	00 d0       	rcall	.+0      	; 0xaa2 <DIO_voidSetPortValue+0x6>
 aa2:	00 d0       	rcall	.+0      	; 0xaa4 <DIO_voidSetPortValue+0x8>
 aa4:	0f 92       	push	r0
 aa6:	cd b7       	in	r28, 0x3d	; 61
 aa8:	de b7       	in	r29, 0x3e	; 62
 aaa:	8a 83       	std	Y+2, r24	; 0x02
 aac:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 aae:	84 e0       	ldi	r24, 0x04	; 4
 ab0:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
 ab2:	8a 81       	ldd	r24, Y+2	; 0x02
 ab4:	28 2f       	mov	r18, r24
 ab6:	30 e0       	ldi	r19, 0x00	; 0
 ab8:	3d 83       	std	Y+5, r19	; 0x05
 aba:	2c 83       	std	Y+4, r18	; 0x04
 abc:	8c 81       	ldd	r24, Y+4	; 0x04
 abe:	9d 81       	ldd	r25, Y+5	; 0x05
 ac0:	81 30       	cpi	r24, 0x01	; 1
 ac2:	91 05       	cpc	r25, r1
 ac4:	d1 f0       	breq	.+52     	; 0xafa <DIO_voidSetPortValue+0x5e>
 ac6:	2c 81       	ldd	r18, Y+4	; 0x04
 ac8:	3d 81       	ldd	r19, Y+5	; 0x05
 aca:	22 30       	cpi	r18, 0x02	; 2
 acc:	31 05       	cpc	r19, r1
 ace:	2c f4       	brge	.+10     	; 0xada <DIO_voidSetPortValue+0x3e>
 ad0:	8c 81       	ldd	r24, Y+4	; 0x04
 ad2:	9d 81       	ldd	r25, Y+5	; 0x05
 ad4:	00 97       	sbiw	r24, 0x00	; 0
 ad6:	61 f0       	breq	.+24     	; 0xaf0 <DIO_voidSetPortValue+0x54>
 ad8:	1f c0       	rjmp	.+62     	; 0xb18 <DIO_voidSetPortValue+0x7c>
 ada:	2c 81       	ldd	r18, Y+4	; 0x04
 adc:	3d 81       	ldd	r19, Y+5	; 0x05
 ade:	22 30       	cpi	r18, 0x02	; 2
 ae0:	31 05       	cpc	r19, r1
 ae2:	81 f0       	breq	.+32     	; 0xb04 <DIO_voidSetPortValue+0x68>
 ae4:	8c 81       	ldd	r24, Y+4	; 0x04
 ae6:	9d 81       	ldd	r25, Y+5	; 0x05
 ae8:	83 30       	cpi	r24, 0x03	; 3
 aea:	91 05       	cpc	r25, r1
 aec:	81 f0       	breq	.+32     	; 0xb0e <DIO_voidSetPortValue+0x72>
 aee:	14 c0       	rjmp	.+40     	; 0xb18 <DIO_voidSetPortValue+0x7c>
    {
    case PORT_A:
        PORTA = EN_Value;
 af0:	eb e3       	ldi	r30, 0x3B	; 59
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	8b 81       	ldd	r24, Y+3	; 0x03
 af6:	80 83       	st	Z, r24
 af8:	11 c0       	rjmp	.+34     	; 0xb1c <DIO_voidSetPortValue+0x80>
        break;
    case PORT_B:
        PORTB = EN_Value;
 afa:	e8 e3       	ldi	r30, 0x38	; 56
 afc:	f0 e0       	ldi	r31, 0x00	; 0
 afe:	8b 81       	ldd	r24, Y+3	; 0x03
 b00:	80 83       	st	Z, r24
 b02:	0c c0       	rjmp	.+24     	; 0xb1c <DIO_voidSetPortValue+0x80>
        break;
    case PORT_C:
        PORTC = EN_Value;
 b04:	e5 e3       	ldi	r30, 0x35	; 53
 b06:	f0 e0       	ldi	r31, 0x00	; 0
 b08:	8b 81       	ldd	r24, Y+3	; 0x03
 b0a:	80 83       	st	Z, r24
 b0c:	07 c0       	rjmp	.+14     	; 0xb1c <DIO_voidSetPortValue+0x80>
        break;
    case PORT_D:
        PORTD = EN_Value;
 b0e:	e2 e3       	ldi	r30, 0x32	; 50
 b10:	f0 e0       	ldi	r31, 0x00	; 0
 b12:	8b 81       	ldd	r24, Y+3	; 0x03
 b14:	80 83       	st	Z, r24
 b16:	02 c0       	rjmp	.+4      	; 0xb1c <DIO_voidSetPortValue+0x80>
        break;
    default:
        state = E_DIOPORT;
 b18:	82 e0       	ldi	r24, 0x02	; 2
 b1a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
 b1c:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPortValue */
 b1e:	0f 90       	pop	r0
 b20:	0f 90       	pop	r0
 b22:	0f 90       	pop	r0
 b24:	0f 90       	pop	r0
 b26:	0f 90       	pop	r0
 b28:	cf 91       	pop	r28
 b2a:	df 91       	pop	r29
 b2c:	08 95       	ret

00000b2e <DIO_voidSetPortDirection>:
 * @param EN_Port PORT Name
 * @param EN_Direction PORT Direction
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
 b2e:	df 93       	push	r29
 b30:	cf 93       	push	r28
 b32:	00 d0       	rcall	.+0      	; 0xb34 <DIO_voidSetPortDirection+0x6>
 b34:	00 d0       	rcall	.+0      	; 0xb36 <DIO_voidSetPortDirection+0x8>
 b36:	0f 92       	push	r0
 b38:	cd b7       	in	r28, 0x3d	; 61
 b3a:	de b7       	in	r29, 0x3e	; 62
 b3c:	8a 83       	std	Y+2, r24	; 0x02
 b3e:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 b40:	84 e0       	ldi	r24, 0x04	; 4
 b42:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
 b44:	8a 81       	ldd	r24, Y+2	; 0x02
 b46:	28 2f       	mov	r18, r24
 b48:	30 e0       	ldi	r19, 0x00	; 0
 b4a:	3d 83       	std	Y+5, r19	; 0x05
 b4c:	2c 83       	std	Y+4, r18	; 0x04
 b4e:	8c 81       	ldd	r24, Y+4	; 0x04
 b50:	9d 81       	ldd	r25, Y+5	; 0x05
 b52:	81 30       	cpi	r24, 0x01	; 1
 b54:	91 05       	cpc	r25, r1
 b56:	d1 f0       	breq	.+52     	; 0xb8c <DIO_voidSetPortDirection+0x5e>
 b58:	2c 81       	ldd	r18, Y+4	; 0x04
 b5a:	3d 81       	ldd	r19, Y+5	; 0x05
 b5c:	22 30       	cpi	r18, 0x02	; 2
 b5e:	31 05       	cpc	r19, r1
 b60:	2c f4       	brge	.+10     	; 0xb6c <DIO_voidSetPortDirection+0x3e>
 b62:	8c 81       	ldd	r24, Y+4	; 0x04
 b64:	9d 81       	ldd	r25, Y+5	; 0x05
 b66:	00 97       	sbiw	r24, 0x00	; 0
 b68:	61 f0       	breq	.+24     	; 0xb82 <DIO_voidSetPortDirection+0x54>
 b6a:	1f c0       	rjmp	.+62     	; 0xbaa <DIO_voidSetPortDirection+0x7c>
 b6c:	2c 81       	ldd	r18, Y+4	; 0x04
 b6e:	3d 81       	ldd	r19, Y+5	; 0x05
 b70:	22 30       	cpi	r18, 0x02	; 2
 b72:	31 05       	cpc	r19, r1
 b74:	81 f0       	breq	.+32     	; 0xb96 <DIO_voidSetPortDirection+0x68>
 b76:	8c 81       	ldd	r24, Y+4	; 0x04
 b78:	9d 81       	ldd	r25, Y+5	; 0x05
 b7a:	83 30       	cpi	r24, 0x03	; 3
 b7c:	91 05       	cpc	r25, r1
 b7e:	81 f0       	breq	.+32     	; 0xba0 <DIO_voidSetPortDirection+0x72>
 b80:	14 c0       	rjmp	.+40     	; 0xbaa <DIO_voidSetPortDirection+0x7c>
    {
    case PORT_A:
        DDRA = EN_Direction;
 b82:	ea e3       	ldi	r30, 0x3A	; 58
 b84:	f0 e0       	ldi	r31, 0x00	; 0
 b86:	8b 81       	ldd	r24, Y+3	; 0x03
 b88:	80 83       	st	Z, r24
 b8a:	11 c0       	rjmp	.+34     	; 0xbae <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_B:
        DDRB = EN_Direction;
 b8c:	e7 e3       	ldi	r30, 0x37	; 55
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	8b 81       	ldd	r24, Y+3	; 0x03
 b92:	80 83       	st	Z, r24
 b94:	0c c0       	rjmp	.+24     	; 0xbae <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_C:
        DDRC = EN_Direction;
 b96:	e4 e3       	ldi	r30, 0x34	; 52
 b98:	f0 e0       	ldi	r31, 0x00	; 0
 b9a:	8b 81       	ldd	r24, Y+3	; 0x03
 b9c:	80 83       	st	Z, r24
 b9e:	07 c0       	rjmp	.+14     	; 0xbae <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_D:
        DDRD = EN_Direction;
 ba0:	e1 e3       	ldi	r30, 0x31	; 49
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	8b 81       	ldd	r24, Y+3	; 0x03
 ba6:	80 83       	st	Z, r24
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <DIO_voidSetPortDirection+0x80>
        break;
    default:
        state = E_DIOPORT;
 baa:	82 e0       	ldi	r24, 0x02	; 2
 bac:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
 bae:	89 81       	ldd	r24, Y+1	; 0x01

} /* DIO_voidSetPortDirection */
 bb0:	0f 90       	pop	r0
 bb2:	0f 90       	pop	r0
 bb4:	0f 90       	pop	r0
 bb6:	0f 90       	pop	r0
 bb8:	0f 90       	pop	r0
 bba:	cf 91       	pop	r28
 bbc:	df 91       	pop	r29
 bbe:	08 95       	ret

00000bc0 <DIO_voidInpullUp>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
 bc0:	df 93       	push	r29
 bc2:	cf 93       	push	r28
 bc4:	00 d0       	rcall	.+0      	; 0xbc6 <DIO_voidInpullUp+0x6>
 bc6:	00 d0       	rcall	.+0      	; 0xbc8 <DIO_voidInpullUp+0x8>
 bc8:	0f 92       	push	r0
 bca:	cd b7       	in	r28, 0x3d	; 61
 bcc:	de b7       	in	r29, 0x3e	; 62
 bce:	8a 83       	std	Y+2, r24	; 0x02
 bd0:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
 bd2:	84 e0       	ldi	r24, 0x04	; 4
 bd4:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
 bd6:	8a 81       	ldd	r24, Y+2	; 0x02
 bd8:	28 2f       	mov	r18, r24
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	3d 83       	std	Y+5, r19	; 0x05
 bde:	2c 83       	std	Y+4, r18	; 0x04
 be0:	8c 81       	ldd	r24, Y+4	; 0x04
 be2:	9d 81       	ldd	r25, Y+5	; 0x05
 be4:	81 30       	cpi	r24, 0x01	; 1
 be6:	91 05       	cpc	r25, r1
 be8:	09 f4       	brne	.+2      	; 0xbec <DIO_voidInpullUp+0x2c>
 bea:	3e c0       	rjmp	.+124    	; 0xc68 <DIO_voidInpullUp+0xa8>
 bec:	2c 81       	ldd	r18, Y+4	; 0x04
 bee:	3d 81       	ldd	r19, Y+5	; 0x05
 bf0:	22 30       	cpi	r18, 0x02	; 2
 bf2:	31 05       	cpc	r19, r1
 bf4:	2c f4       	brge	.+10     	; 0xc00 <DIO_voidInpullUp+0x40>
 bf6:	8c 81       	ldd	r24, Y+4	; 0x04
 bf8:	9d 81       	ldd	r25, Y+5	; 0x05
 bfa:	00 97       	sbiw	r24, 0x00	; 0
 bfc:	71 f0       	breq	.+28     	; 0xc1a <DIO_voidInpullUp+0x5a>
 bfe:	a9 c0       	rjmp	.+338    	; 0xd52 <DIO_voidInpullUp+0x192>
 c00:	2c 81       	ldd	r18, Y+4	; 0x04
 c02:	3d 81       	ldd	r19, Y+5	; 0x05
 c04:	22 30       	cpi	r18, 0x02	; 2
 c06:	31 05       	cpc	r19, r1
 c08:	09 f4       	brne	.+2      	; 0xc0c <DIO_voidInpullUp+0x4c>
 c0a:	55 c0       	rjmp	.+170    	; 0xcb6 <DIO_voidInpullUp+0xf6>
 c0c:	8c 81       	ldd	r24, Y+4	; 0x04
 c0e:	9d 81       	ldd	r25, Y+5	; 0x05
 c10:	83 30       	cpi	r24, 0x03	; 3
 c12:	91 05       	cpc	r25, r1
 c14:	09 f4       	brne	.+2      	; 0xc18 <DIO_voidInpullUp+0x58>
 c16:	76 c0       	rjmp	.+236    	; 0xd04 <DIO_voidInpullUp+0x144>
 c18:	9c c0       	rjmp	.+312    	; 0xd52 <DIO_voidInpullUp+0x192>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
 c1a:	aa e3       	ldi	r26, 0x3A	; 58
 c1c:	b0 e0       	ldi	r27, 0x00	; 0
 c1e:	ea e3       	ldi	r30, 0x3A	; 58
 c20:	f0 e0       	ldi	r31, 0x00	; 0
 c22:	80 81       	ld	r24, Z
 c24:	48 2f       	mov	r20, r24
 c26:	8b 81       	ldd	r24, Y+3	; 0x03
 c28:	28 2f       	mov	r18, r24
 c2a:	30 e0       	ldi	r19, 0x00	; 0
 c2c:	81 e0       	ldi	r24, 0x01	; 1
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	02 c0       	rjmp	.+4      	; 0xc36 <DIO_voidInpullUp+0x76>
 c32:	88 0f       	add	r24, r24
 c34:	99 1f       	adc	r25, r25
 c36:	2a 95       	dec	r18
 c38:	e2 f7       	brpl	.-8      	; 0xc32 <DIO_voidInpullUp+0x72>
 c3a:	80 95       	com	r24
 c3c:	84 23       	and	r24, r20
 c3e:	8c 93       	st	X, r24
        SETBIT(PORTA, EN_Pin);
 c40:	ab e3       	ldi	r26, 0x3B	; 59
 c42:	b0 e0       	ldi	r27, 0x00	; 0
 c44:	eb e3       	ldi	r30, 0x3B	; 59
 c46:	f0 e0       	ldi	r31, 0x00	; 0
 c48:	80 81       	ld	r24, Z
 c4a:	48 2f       	mov	r20, r24
 c4c:	8b 81       	ldd	r24, Y+3	; 0x03
 c4e:	28 2f       	mov	r18, r24
 c50:	30 e0       	ldi	r19, 0x00	; 0
 c52:	81 e0       	ldi	r24, 0x01	; 1
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	02 2e       	mov	r0, r18
 c58:	02 c0       	rjmp	.+4      	; 0xc5e <DIO_voidInpullUp+0x9e>
 c5a:	88 0f       	add	r24, r24
 c5c:	99 1f       	adc	r25, r25
 c5e:	0a 94       	dec	r0
 c60:	e2 f7       	brpl	.-8      	; 0xc5a <DIO_voidInpullUp+0x9a>
 c62:	84 2b       	or	r24, r20
 c64:	8c 93       	st	X, r24
 c66:	77 c0       	rjmp	.+238    	; 0xd56 <DIO_voidInpullUp+0x196>
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
 c68:	a7 e3       	ldi	r26, 0x37	; 55
 c6a:	b0 e0       	ldi	r27, 0x00	; 0
 c6c:	e7 e3       	ldi	r30, 0x37	; 55
 c6e:	f0 e0       	ldi	r31, 0x00	; 0
 c70:	80 81       	ld	r24, Z
 c72:	48 2f       	mov	r20, r24
 c74:	8b 81       	ldd	r24, Y+3	; 0x03
 c76:	28 2f       	mov	r18, r24
 c78:	30 e0       	ldi	r19, 0x00	; 0
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	02 c0       	rjmp	.+4      	; 0xc84 <DIO_voidInpullUp+0xc4>
 c80:	88 0f       	add	r24, r24
 c82:	99 1f       	adc	r25, r25
 c84:	2a 95       	dec	r18
 c86:	e2 f7       	brpl	.-8      	; 0xc80 <DIO_voidInpullUp+0xc0>
 c88:	80 95       	com	r24
 c8a:	84 23       	and	r24, r20
 c8c:	8c 93       	st	X, r24
        SETBIT(PORTB, EN_Pin);
 c8e:	a8 e3       	ldi	r26, 0x38	; 56
 c90:	b0 e0       	ldi	r27, 0x00	; 0
 c92:	e8 e3       	ldi	r30, 0x38	; 56
 c94:	f0 e0       	ldi	r31, 0x00	; 0
 c96:	80 81       	ld	r24, Z
 c98:	48 2f       	mov	r20, r24
 c9a:	8b 81       	ldd	r24, Y+3	; 0x03
 c9c:	28 2f       	mov	r18, r24
 c9e:	30 e0       	ldi	r19, 0x00	; 0
 ca0:	81 e0       	ldi	r24, 0x01	; 1
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	02 2e       	mov	r0, r18
 ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_voidInpullUp+0xec>
 ca8:	88 0f       	add	r24, r24
 caa:	99 1f       	adc	r25, r25
 cac:	0a 94       	dec	r0
 cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_voidInpullUp+0xe8>
 cb0:	84 2b       	or	r24, r20
 cb2:	8c 93       	st	X, r24
 cb4:	50 c0       	rjmp	.+160    	; 0xd56 <DIO_voidInpullUp+0x196>
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
 cb6:	a4 e3       	ldi	r26, 0x34	; 52
 cb8:	b0 e0       	ldi	r27, 0x00	; 0
 cba:	e4 e3       	ldi	r30, 0x34	; 52
 cbc:	f0 e0       	ldi	r31, 0x00	; 0
 cbe:	80 81       	ld	r24, Z
 cc0:	48 2f       	mov	r20, r24
 cc2:	8b 81       	ldd	r24, Y+3	; 0x03
 cc4:	28 2f       	mov	r18, r24
 cc6:	30 e0       	ldi	r19, 0x00	; 0
 cc8:	81 e0       	ldi	r24, 0x01	; 1
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <DIO_voidInpullUp+0x112>
 cce:	88 0f       	add	r24, r24
 cd0:	99 1f       	adc	r25, r25
 cd2:	2a 95       	dec	r18
 cd4:	e2 f7       	brpl	.-8      	; 0xcce <DIO_voidInpullUp+0x10e>
 cd6:	80 95       	com	r24
 cd8:	84 23       	and	r24, r20
 cda:	8c 93       	st	X, r24
        SETBIT(PORTC, EN_Pin);
 cdc:	a5 e3       	ldi	r26, 0x35	; 53
 cde:	b0 e0       	ldi	r27, 0x00	; 0
 ce0:	e5 e3       	ldi	r30, 0x35	; 53
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	80 81       	ld	r24, Z
 ce6:	48 2f       	mov	r20, r24
 ce8:	8b 81       	ldd	r24, Y+3	; 0x03
 cea:	28 2f       	mov	r18, r24
 cec:	30 e0       	ldi	r19, 0x00	; 0
 cee:	81 e0       	ldi	r24, 0x01	; 1
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	02 2e       	mov	r0, r18
 cf4:	02 c0       	rjmp	.+4      	; 0xcfa <DIO_voidInpullUp+0x13a>
 cf6:	88 0f       	add	r24, r24
 cf8:	99 1f       	adc	r25, r25
 cfa:	0a 94       	dec	r0
 cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <DIO_voidInpullUp+0x136>
 cfe:	84 2b       	or	r24, r20
 d00:	8c 93       	st	X, r24
 d02:	29 c0       	rjmp	.+82     	; 0xd56 <DIO_voidInpullUp+0x196>
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
 d04:	a1 e3       	ldi	r26, 0x31	; 49
 d06:	b0 e0       	ldi	r27, 0x00	; 0
 d08:	e1 e3       	ldi	r30, 0x31	; 49
 d0a:	f0 e0       	ldi	r31, 0x00	; 0
 d0c:	80 81       	ld	r24, Z
 d0e:	48 2f       	mov	r20, r24
 d10:	8b 81       	ldd	r24, Y+3	; 0x03
 d12:	28 2f       	mov	r18, r24
 d14:	30 e0       	ldi	r19, 0x00	; 0
 d16:	81 e0       	ldi	r24, 0x01	; 1
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_voidInpullUp+0x160>
 d1c:	88 0f       	add	r24, r24
 d1e:	99 1f       	adc	r25, r25
 d20:	2a 95       	dec	r18
 d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_voidInpullUp+0x15c>
 d24:	80 95       	com	r24
 d26:	84 23       	and	r24, r20
 d28:	8c 93       	st	X, r24
        SETBIT(PORTD, EN_Pin);
 d2a:	a2 e3       	ldi	r26, 0x32	; 50
 d2c:	b0 e0       	ldi	r27, 0x00	; 0
 d2e:	e2 e3       	ldi	r30, 0x32	; 50
 d30:	f0 e0       	ldi	r31, 0x00	; 0
 d32:	80 81       	ld	r24, Z
 d34:	48 2f       	mov	r20, r24
 d36:	8b 81       	ldd	r24, Y+3	; 0x03
 d38:	28 2f       	mov	r18, r24
 d3a:	30 e0       	ldi	r19, 0x00	; 0
 d3c:	81 e0       	ldi	r24, 0x01	; 1
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	02 2e       	mov	r0, r18
 d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_voidInpullUp+0x188>
 d44:	88 0f       	add	r24, r24
 d46:	99 1f       	adc	r25, r25
 d48:	0a 94       	dec	r0
 d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_voidInpullUp+0x184>
 d4c:	84 2b       	or	r24, r20
 d4e:	8c 93       	st	X, r24
 d50:	02 c0       	rjmp	.+4      	; 0xd56 <DIO_voidInpullUp+0x196>
        break;
    default:
        state = E_DIOPORT;
 d52:	82 e0       	ldi	r24, 0x02	; 2
 d54:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
 d56:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidInpullUp */
 d58:	0f 90       	pop	r0
 d5a:	0f 90       	pop	r0
 d5c:	0f 90       	pop	r0
 d5e:	0f 90       	pop	r0
 d60:	0f 90       	pop	r0
 d62:	cf 91       	pop	r28
 d64:	df 91       	pop	r29
 d66:	08 95       	ret

00000d68 <main>:
#include "DIO_Interface.h"
#include <util/delay.h>
#include "Uart_Interface.h"
#include "SPI_Interface.h"

int main(void){
 d68:	df 93       	push	r29
 d6a:	cf 93       	push	r28
 d6c:	cd b7       	in	r28, 0x3d	; 61
 d6e:	de b7       	in	r29, 0x3e	; 62
 d70:	c5 56       	subi	r28, 0x65	; 101
 d72:	d0 40       	sbci	r29, 0x00	; 0
 d74:	0f b6       	in	r0, 0x3f	; 63
 d76:	f8 94       	cli
 d78:	de bf       	out	0x3e, r29	; 62
 d7a:	0f be       	out	0x3f, r0	; 63
 d7c:	cd bf       	out	0x3d, r28	; 61
	uint8_t data=0;
 d7e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t string[100]={0};
 d80:	84 e6       	ldi	r24, 0x64	; 100
 d82:	fe 01       	movw	r30, r28
 d84:	32 96       	adiw	r30, 0x02	; 2
 d86:	df 01       	movw	r26, r30
 d88:	98 2f       	mov	r25, r24
 d8a:	1d 92       	st	X+, r1
 d8c:	9a 95       	dec	r25
 d8e:	e9 f7       	brne	.-6      	; 0xd8a <main+0x22>
			SPI_MasterInit();
 d90:	0e 94 33 01 	call	0x266	; 0x266 <SPI_MasterInit>

			UART_Init(9600);
 d94:	60 e8       	ldi	r22, 0x80	; 128
 d96:	75 e2       	ldi	r23, 0x25	; 37
 d98:	80 e0       	ldi	r24, 0x00	; 0
 d9a:	90 e0       	ldi	r25, 0x00	; 0
 d9c:	0e 94 36 00 	call	0x6c	; 0x6c <UART_Init>

			//SPI_Recive_String(string);


			//SPI_MasterTransmit('a');
			DIO_voidSetPinDirection(PORT_A,PIN0,OUTPUT);
 da0:	80 e0       	ldi	r24, 0x00	; 0
 da2:	60 e0       	ldi	r22, 0x00	; 0
 da4:	41 e0       	ldi	r20, 0x01	; 1
 da6:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_voidSetPinDirection>
			DIO_voidSetPinValue(PORT_A,PIN0,LOW);
 daa:	80 e0       	ldi	r24, 0x00	; 0
 dac:	60 e0       	ldi	r22, 0x00	; 0
 dae:	40 e0       	ldi	r20, 0x00	; 0
 db0:	0e 94 40 02 	call	0x480	; 0x480 <DIO_voidSetPinValue>

	while(1){
		UART_Recive_String(string);
 db4:	ce 01       	movw	r24, r28
 db6:	02 96       	adiw	r24, 0x02	; 2
 db8:	0e 94 ed 00 	call	0x1da	; 0x1da <UART_Recive_String>
		SPI_Transmite_String(string);
 dbc:	ce 01       	movw	r24, r28
 dbe:	02 96       	adiw	r24, 0x02	; 2
 dc0:	0e 94 ca 01 	call	0x394	; 0x394 <SPI_Transmite_String>
		DIO_voidTogPin(PORT_A,PIN0);
 dc4:	80 e0       	ldi	r24, 0x00	; 0
 dc6:	60 e0       	ldi	r22, 0x00	; 0
 dc8:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_voidTogPin>
 dcc:	f3 cf       	rjmp	.-26     	; 0xdb4 <main+0x4c>

00000dce <_exit>:
 dce:	f8 94       	cli

00000dd0 <__stop_program>:
 dd0:	ff cf       	rjmp	.-2      	; 0xdd0 <__stop_program>
