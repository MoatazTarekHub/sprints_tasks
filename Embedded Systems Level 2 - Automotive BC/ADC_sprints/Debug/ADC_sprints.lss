
ADC_sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  000043e6  0000445a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003264  00000000  00000000  0000458c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000141e  00000000  00000000  000077f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00008c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00008dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00008fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000b3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000c731  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000d908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000dac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000ddbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e72c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <main>
      7a:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e7       	ldi	r26, 0x7A	; 122
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e7       	ldi	r24, 0x7A	; 122
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6a e7       	ldi	r22, 0x7A	; 122
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 e6 21 	jmp	0x43cc	; 0x43cc <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ee 57       	subi	r30, 0x7E	; 126
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <DIO_voidSetPinValue>:
 * @param EN_Pin    PIN Number
 * @param EN_Value  HIGH or LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	28 97       	sbiw	r28, 0x08	; 8
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	6b 83       	std	Y+3, r22	; 0x03
     e36:	4c 83       	std	Y+4, r20	; 0x04
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
     e38:	84 e0       	ldi	r24, 0x04	; 4
     e3a:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Value == LOW)
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	88 23       	and	r24, r24
     e40:	09 f0       	breq	.+2      	; 0xe44 <DIO_voidSetPinValue+0x26>
     e42:	76 c0       	rjmp	.+236    	; 0xf30 <DIO_voidSetPinValue+0x112>
    {
        switch (EN_Port)
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	38 87       	std	Y+8, r19	; 0x08
     e4c:	2f 83       	std	Y+7, r18	; 0x07
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	91 05       	cpc	r25, r1
     e56:	59 f1       	breq	.+86     	; 0xeae <DIO_voidSetPinValue+0x90>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	2c f4       	brge	.+10     	; 0xe6c <DIO_voidSetPinValue+0x4e>
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	69 f0       	breq	.+26     	; 0xe84 <DIO_voidSetPinValue+0x66>
     e6a:	60 c0       	rjmp	.+192    	; 0xf2c <DIO_voidSetPinValue+0x10e>
     e6c:	2f 81       	ldd	r18, Y+7	; 0x07
     e6e:	38 85       	ldd	r19, Y+8	; 0x08
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	89 f1       	breq	.+98     	; 0xed8 <DIO_voidSetPinValue+0xba>
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	98 85       	ldd	r25, Y+8	; 0x08
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	91 05       	cpc	r25, r1
     e7e:	09 f4       	brne	.+2      	; 0xe82 <DIO_voidSetPinValue+0x64>
     e80:	40 c0       	rjmp	.+128    	; 0xf02 <DIO_voidSetPinValue+0xe4>
     e82:	54 c0       	rjmp	.+168    	; 0xf2c <DIO_voidSetPinValue+0x10e>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
     e84:	ab e3       	ldi	r26, 0x3B	; 59
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	eb e3       	ldi	r30, 0x3B	; 59
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_voidSetPinValue+0x84>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_voidSetPinValue+0x80>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	b5 c0       	rjmp	.+362    	; 0x1018 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
     eae:	a8 e3       	ldi	r26, 0x38	; 56
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e8 e3       	ldi	r30, 0x38	; 56
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_voidSetPinValue+0xae>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_voidSetPinValue+0xaa>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	a0 c0       	rjmp	.+320    	; 0x1018 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
     ed8:	a5 e3       	ldi	r26, 0x35	; 53
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e5 e3       	ldi	r30, 0x35	; 53
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_voidSetPinValue+0xd8>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_voidSetPinValue+0xd4>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	8b c0       	rjmp	.+278    	; 0x1018 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
     f02:	a2 e3       	ldi	r26, 0x32	; 50
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e2 e3       	ldi	r30, 0x32	; 50
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_voidSetPinValue+0x102>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_voidSetPinValue+0xfe>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	76 c0       	rjmp	.+236    	; 0x1018 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_DIOValue;
     f2c:	19 82       	std	Y+1, r1	; 0x01
     f2e:	74 c0       	rjmp	.+232    	; 0x1018 <DIO_voidSetPinValue+0x1fa>
            break;
        }
    }
    else if (EN_Value == HIGH)
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	09 f0       	breq	.+2      	; 0xf38 <DIO_voidSetPinValue+0x11a>
     f36:	70 c0       	rjmp	.+224    	; 0x1018 <DIO_voidSetPinValue+0x1fa>
    {
        switch (EN_Port)
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	3e 83       	std	Y+6, r19	; 0x06
     f40:	2d 83       	std	Y+5, r18	; 0x05
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	9e 81       	ldd	r25, Y+6	; 0x06
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	91 05       	cpc	r25, r1
     f4a:	49 f1       	breq	.+82     	; 0xf9e <DIO_voidSetPinValue+0x180>
     f4c:	2d 81       	ldd	r18, Y+5	; 0x05
     f4e:	3e 81       	ldd	r19, Y+6	; 0x06
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	2c f4       	brge	.+10     	; 0xf60 <DIO_voidSetPinValue+0x142>
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	9e 81       	ldd	r25, Y+6	; 0x06
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	61 f0       	breq	.+24     	; 0xf76 <DIO_voidSetPinValue+0x158>
     f5e:	5b c0       	rjmp	.+182    	; 0x1016 <DIO_voidSetPinValue+0x1f8>
     f60:	2d 81       	ldd	r18, Y+5	; 0x05
     f62:	3e 81       	ldd	r19, Y+6	; 0x06
     f64:	22 30       	cpi	r18, 0x02	; 2
     f66:	31 05       	cpc	r19, r1
     f68:	71 f1       	breq	.+92     	; 0xfc6 <DIO_voidSetPinValue+0x1a8>
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	91 05       	cpc	r25, r1
     f72:	e9 f1       	breq	.+122    	; 0xfee <DIO_voidSetPinValue+0x1d0>
     f74:	50 c0       	rjmp	.+160    	; 0x1016 <DIO_voidSetPinValue+0x1f8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
     f76:	ab e3       	ldi	r26, 0x3B	; 59
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	eb e3       	ldi	r30, 0x3B	; 59
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_voidSetPinValue+0x176>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_voidSetPinValue+0x172>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	3d c0       	rjmp	.+122    	; 0x1018 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
     f9e:	a8 e3       	ldi	r26, 0x38	; 56
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e8 e3       	ldi	r30, 0x38	; 56
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_voidSetPinValue+0x19e>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_voidSetPinValue+0x19a>
     fc0:	84 2b       	or	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	29 c0       	rjmp	.+82     	; 0x1018 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
     fc6:	a5 e3       	ldi	r26, 0x35	; 53
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e5 e3       	ldi	r30, 0x35	; 53
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_voidSetPinValue+0x1c6>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_voidSetPinValue+0x1c2>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	15 c0       	rjmp	.+42     	; 0x1018 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
     fee:	a2 e3       	ldi	r26, 0x32	; 50
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e2 e3       	ldi	r30, 0x32	; 50
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_voidSetPinValue+0x1ee>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_voidSetPinValue+0x1ea>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_DIOValue;
    1016:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
    1018:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinValue */
    101a:	28 96       	adiw	r28, 0x08	; 8
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_voidSetPinDirection>:
 * @param EN_Pin  PIN Number
 * @param EN_Direction Direction of the Pin INPUT | OUTPUT
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	28 97       	sbiw	r28, 0x08	; 8
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	6b 83       	std	Y+3, r22	; 0x03
    1044:	4c 83       	std	Y+4, r20	; 0x04
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
    1046:	84 e0       	ldi	r24, 0x04	; 4
    1048:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Direction == INPUT)
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	88 23       	and	r24, r24
    104e:	09 f0       	breq	.+2      	; 0x1052 <DIO_voidSetPinDirection+0x26>
    1050:	77 c0       	rjmp	.+238    	; 0x1140 <DIO_voidSetPinDirection+0x114>
    {
        switch (EN_port)
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	38 87       	std	Y+8, r19	; 0x08
    105a:	2f 83       	std	Y+7, r18	; 0x07
    105c:	8f 81       	ldd	r24, Y+7	; 0x07
    105e:	98 85       	ldd	r25, Y+8	; 0x08
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	91 05       	cpc	r25, r1
    1064:	59 f1       	breq	.+86     	; 0x10bc <DIO_voidSetPinDirection+0x90>
    1066:	2f 81       	ldd	r18, Y+7	; 0x07
    1068:	38 85       	ldd	r19, Y+8	; 0x08
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	2c f4       	brge	.+10     	; 0x107a <DIO_voidSetPinDirection+0x4e>
    1070:	8f 81       	ldd	r24, Y+7	; 0x07
    1072:	98 85       	ldd	r25, Y+8	; 0x08
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	69 f0       	breq	.+26     	; 0x1092 <DIO_voidSetPinDirection+0x66>
    1078:	60 c0       	rjmp	.+192    	; 0x113a <DIO_voidSetPinDirection+0x10e>
    107a:	2f 81       	ldd	r18, Y+7	; 0x07
    107c:	38 85       	ldd	r19, Y+8	; 0x08
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	89 f1       	breq	.+98     	; 0x10e6 <DIO_voidSetPinDirection+0xba>
    1084:	8f 81       	ldd	r24, Y+7	; 0x07
    1086:	98 85       	ldd	r25, Y+8	; 0x08
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	91 05       	cpc	r25, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <DIO_voidSetPinDirection+0x64>
    108e:	40 c0       	rjmp	.+128    	; 0x1110 <DIO_voidSetPinDirection+0xe4>
    1090:	54 c0       	rjmp	.+168    	; 0x113a <DIO_voidSetPinDirection+0x10e>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
    1092:	aa e3       	ldi	r26, 0x3A	; 58
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ea e3       	ldi	r30, 0x3A	; 58
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_voidSetPinDirection+0x84>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_voidSetPinDirection+0x80>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	b7 c0       	rjmp	.+366    	; 0x122a <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
    10bc:	a7 e3       	ldi	r26, 0x37	; 55
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e7 e3       	ldi	r30, 0x37	; 55
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_voidSetPinDirection+0xae>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_voidSetPinDirection+0xaa>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	a2 c0       	rjmp	.+324    	; 0x122a <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
    10e6:	a4 e3       	ldi	r26, 0x34	; 52
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e4 e3       	ldi	r30, 0x34	; 52
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_voidSetPinDirection+0xd8>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_voidSetPinDirection+0xd4>
    1108:	80 95       	com	r24
    110a:	84 23       	and	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	8d c0       	rjmp	.+282    	; 0x122a <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
    1110:	a1 e3       	ldi	r26, 0x31	; 49
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e1 e3       	ldi	r30, 0x31	; 49
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_voidSetPinDirection+0x102>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_voidSetPinDirection+0xfe>
    1132:	80 95       	com	r24
    1134:	84 23       	and	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	78 c0       	rjmp	.+240    	; 0x122a <DIO_voidSetPinDirection+0x1fe>
            break;
        default:
            state = E_DIODirec;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	75 c0       	rjmp	.+234    	; 0x122a <DIO_voidSetPinDirection+0x1fe>
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	09 f0       	breq	.+2      	; 0x1148 <DIO_voidSetPinDirection+0x11c>
    1146:	71 c0       	rjmp	.+226    	; 0x122a <DIO_voidSetPinDirection+0x1fe>
    {
        switch (EN_port)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3e 83       	std	Y+6, r19	; 0x06
    1150:	2d 83       	std	Y+5, r18	; 0x05
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	49 f1       	breq	.+82     	; 0x11ae <DIO_voidSetPinDirection+0x182>
    115c:	2d 81       	ldd	r18, Y+5	; 0x05
    115e:	3e 81       	ldd	r19, Y+6	; 0x06
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <DIO_voidSetPinDirection+0x144>
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	61 f0       	breq	.+24     	; 0x1186 <DIO_voidSetPinDirection+0x15a>
    116e:	5b c0       	rjmp	.+182    	; 0x1226 <DIO_voidSetPinDirection+0x1fa>
    1170:	2d 81       	ldd	r18, Y+5	; 0x05
    1172:	3e 81       	ldd	r19, Y+6	; 0x06
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	71 f1       	breq	.+92     	; 0x11d6 <DIO_voidSetPinDirection+0x1aa>
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	e9 f1       	breq	.+122    	; 0x11fe <DIO_voidSetPinDirection+0x1d2>
    1184:	50 c0       	rjmp	.+160    	; 0x1226 <DIO_voidSetPinDirection+0x1fa>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
    1186:	aa e3       	ldi	r26, 0x3A	; 58
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ea e3       	ldi	r30, 0x3A	; 58
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_voidSetPinDirection+0x178>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_voidSetPinDirection+0x174>
    11a8:	84 2b       	or	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	3e c0       	rjmp	.+124    	; 0x122a <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
    11ae:	a7 e3       	ldi	r26, 0x37	; 55
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e7 e3       	ldi	r30, 0x37	; 55
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_voidSetPinDirection+0x1a0>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_voidSetPinDirection+0x19c>
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	2a c0       	rjmp	.+84     	; 0x122a <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
    11d6:	a4 e3       	ldi	r26, 0x34	; 52
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e4 e3       	ldi	r30, 0x34	; 52
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_voidSetPinDirection+0x1c8>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_voidSetPinDirection+0x1c4>
    11f8:	84 2b       	or	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	16 c0       	rjmp	.+44     	; 0x122a <DIO_voidSetPinDirection+0x1fe>
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
    11fe:	a1 e3       	ldi	r26, 0x31	; 49
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e1 e3       	ldi	r30, 0x31	; 49
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_voidSetPinDirection+0x1f0>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_voidSetPinDirection+0x1ec>
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_voidSetPinDirection+0x1fe>
            break;
        default:
            state = E_DIODirec;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }
    return state;
    122a:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinDirection */
    122c:	28 96       	adiw	r28, 0x08	; 8
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <DIO_uint8_tGetPinValue>:
 * @param EN_Port           PORT Name
 * @param EN_Pin            PIN Number
 * @return EN_value_type    return Pin HIGH | LOW
 */
EN_value_type DIO_uint8_tGetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <DIO_uint8_tGetPinValue+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <DIO_uint8_tGetPinValue+0x8>
    1246:	0f 92       	push	r0
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	8a 83       	std	Y+2, r24	; 0x02
    124e:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3d 83       	std	Y+5, r19	; 0x05
    1258:	2c 83       	std	Y+4, r18	; 0x04
    125a:	4c 81       	ldd	r20, Y+4	; 0x04
    125c:	5d 81       	ldd	r21, Y+5	; 0x05
    125e:	41 30       	cpi	r20, 0x01	; 1
    1260:	51 05       	cpc	r21, r1
    1262:	41 f1       	breq	.+80     	; 0x12b4 <DIO_uint8_tGetPinValue+0x76>
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	91 05       	cpc	r25, r1
    126c:	34 f4       	brge	.+12     	; 0x127a <DIO_uint8_tGetPinValue+0x3c>
    126e:	2c 81       	ldd	r18, Y+4	; 0x04
    1270:	3d 81       	ldd	r19, Y+5	; 0x05
    1272:	21 15       	cp	r18, r1
    1274:	31 05       	cpc	r19, r1
    1276:	61 f0       	breq	.+24     	; 0x1290 <DIO_uint8_tGetPinValue+0x52>
    1278:	52 c0       	rjmp	.+164    	; 0x131e <DIO_uint8_tGetPinValue+0xe0>
    127a:	4c 81       	ldd	r20, Y+4	; 0x04
    127c:	5d 81       	ldd	r21, Y+5	; 0x05
    127e:	42 30       	cpi	r20, 0x02	; 2
    1280:	51 05       	cpc	r21, r1
    1282:	51 f1       	breq	.+84     	; 0x12d8 <DIO_uint8_tGetPinValue+0x9a>
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	83 30       	cpi	r24, 0x03	; 3
    128a:	91 05       	cpc	r25, r1
    128c:	b9 f1       	breq	.+110    	; 0x12fc <DIO_uint8_tGetPinValue+0xbe>
    128e:	47 c0       	rjmp	.+142    	; 0x131e <DIO_uint8_tGetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
    1290:	e9 e3       	ldi	r30, 0x39	; 57
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a9 01       	movw	r20, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_uint8_tGetPinValue+0x6a>
    12a4:	55 95       	asr	r21
    12a6:	47 95       	ror	r20
    12a8:	8a 95       	dec	r24
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <DIO_uint8_tGetPinValue+0x66>
    12ac:	ca 01       	movw	r24, r20
    12ae:	81 70       	andi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	35 c0       	rjmp	.+106    	; 0x131e <DIO_uint8_tGetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
    12b4:	e6 e3       	ldi	r30, 0x36	; 54
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a9 01       	movw	r20, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_uint8_tGetPinValue+0x8e>
    12c8:	55 95       	asr	r21
    12ca:	47 95       	ror	r20
    12cc:	8a 95       	dec	r24
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_uint8_tGetPinValue+0x8a>
    12d0:	ca 01       	movw	r24, r20
    12d2:	81 70       	andi	r24, 0x01	; 1
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	23 c0       	rjmp	.+70     	; 0x131e <DIO_uint8_tGetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
    12d8:	e3 e3       	ldi	r30, 0x33	; 51
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a9 01       	movw	r20, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_uint8_tGetPinValue+0xb2>
    12ec:	55 95       	asr	r21
    12ee:	47 95       	ror	r20
    12f0:	8a 95       	dec	r24
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_uint8_tGetPinValue+0xae>
    12f4:	ca 01       	movw	r24, r20
    12f6:	81 70       	andi	r24, 0x01	; 1
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	11 c0       	rjmp	.+34     	; 0x131e <DIO_uint8_tGetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
    12fc:	e0 e3       	ldi	r30, 0x30	; 48
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a9 01       	movw	r20, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_uint8_tGetPinValue+0xd6>
    1310:	55 95       	asr	r21
    1312:	47 95       	ror	r20
    1314:	8a 95       	dec	r24
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_uint8_tGetPinValue+0xd2>
    1318:	ca 01       	movw	r24, r20
    131a:	81 70       	andi	r24, 0x01	; 1
    131c:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_uint8_tGetPinValue */
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <DIO_voidTogPin>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidTogPin(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <DIO_voidTogPin+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <DIO_voidTogPin+0x8>
    1338:	0f 92       	push	r0
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	8a 83       	std	Y+2, r24	; 0x02
    1340:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
    1342:	84 e0       	ldi	r24, 0x04	; 4
    1344:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3d 83       	std	Y+5, r19	; 0x05
    134e:	2c 83       	std	Y+4, r18	; 0x04
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	49 f1       	breq	.+82     	; 0x13ac <DIO_voidTogPin+0x7c>
    135a:	2c 81       	ldd	r18, Y+4	; 0x04
    135c:	3d 81       	ldd	r19, Y+5	; 0x05
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	2c f4       	brge	.+10     	; 0x136e <DIO_voidTogPin+0x3e>
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	61 f0       	breq	.+24     	; 0x1384 <DIO_voidTogPin+0x54>
    136c:	5b c0       	rjmp	.+182    	; 0x1424 <DIO_voidTogPin+0xf4>
    136e:	2c 81       	ldd	r18, Y+4	; 0x04
    1370:	3d 81       	ldd	r19, Y+5	; 0x05
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	71 f1       	breq	.+92     	; 0x13d4 <DIO_voidTogPin+0xa4>
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	e9 f1       	breq	.+122    	; 0x13fc <DIO_voidTogPin+0xcc>
    1382:	50 c0       	rjmp	.+160    	; 0x1424 <DIO_voidTogPin+0xf4>
    {
    case PORT_A:
        TGLBIT(PORTA, EN_Pin);
    1384:	ab e3       	ldi	r26, 0x3B	; 59
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	eb e3       	ldi	r30, 0x3B	; 59
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_voidTogPin+0x72>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_voidTogPin+0x6e>
    13a6:	84 27       	eor	r24, r20
    13a8:	8c 93       	st	X, r24
    13aa:	3e c0       	rjmp	.+124    	; 0x1428 <DIO_voidTogPin+0xf8>
        break;
    case PORT_B:
        TGLBIT(PORTB, EN_Pin);
    13ac:	a8 e3       	ldi	r26, 0x38	; 56
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e8 e3       	ldi	r30, 0x38	; 56
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_voidTogPin+0x9a>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_voidTogPin+0x96>
    13ce:	84 27       	eor	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	2a c0       	rjmp	.+84     	; 0x1428 <DIO_voidTogPin+0xf8>
        break;
    case PORT_C:
        TGLBIT(PORTC, EN_Pin);
    13d4:	a5 e3       	ldi	r26, 0x35	; 53
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e5 e3       	ldi	r30, 0x35	; 53
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_voidTogPin+0xc2>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <DIO_voidTogPin+0xbe>
    13f6:	84 27       	eor	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	16 c0       	rjmp	.+44     	; 0x1428 <DIO_voidTogPin+0xf8>
        break;
    case PORT_D:
        TGLBIT(PORTD, EN_Pin);
    13fc:	a2 e3       	ldi	r26, 0x32	; 50
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e2 e3       	ldi	r30, 0x32	; 50
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_voidTogPin+0xea>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_voidTogPin+0xe6>
    141e:	84 27       	eor	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_voidTogPin+0xf8>
        break;
    default:
        state = E_DIOPORT;
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return state;
    1428:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidTogPin */
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <DIO_voidSetPortValue>:
 * @param EN_Port PORT Name
 * @param EN_Value HIGH | LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <DIO_voidSetPortValue+0x6>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <DIO_voidSetPortValue+0x8>
    1442:	0f 92       	push	r0
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	8a 83       	std	Y+2, r24	; 0x02
    144a:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
    144c:	84 e0       	ldi	r24, 0x04	; 4
    144e:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3d 83       	std	Y+5, r19	; 0x05
    1458:	2c 83       	std	Y+4, r18	; 0x04
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	91 05       	cpc	r25, r1
    1462:	d1 f0       	breq	.+52     	; 0x1498 <DIO_voidSetPortValue+0x5e>
    1464:	2c 81       	ldd	r18, Y+4	; 0x04
    1466:	3d 81       	ldd	r19, Y+5	; 0x05
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	2c f4       	brge	.+10     	; 0x1478 <DIO_voidSetPortValue+0x3e>
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	61 f0       	breq	.+24     	; 0x148e <DIO_voidSetPortValue+0x54>
    1476:	1f c0       	rjmp	.+62     	; 0x14b6 <DIO_voidSetPortValue+0x7c>
    1478:	2c 81       	ldd	r18, Y+4	; 0x04
    147a:	3d 81       	ldd	r19, Y+5	; 0x05
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	81 f0       	breq	.+32     	; 0x14a2 <DIO_voidSetPortValue+0x68>
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	81 f0       	breq	.+32     	; 0x14ac <DIO_voidSetPortValue+0x72>
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <DIO_voidSetPortValue+0x7c>
    {
    case PORT_A:
        PORTA = EN_Value;
    148e:	eb e3       	ldi	r30, 0x3B	; 59
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	80 83       	st	Z, r24
    1496:	11 c0       	rjmp	.+34     	; 0x14ba <DIO_voidSetPortValue+0x80>
        break;
    case PORT_B:
        PORTB = EN_Value;
    1498:	e8 e3       	ldi	r30, 0x38	; 56
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	80 83       	st	Z, r24
    14a0:	0c c0       	rjmp	.+24     	; 0x14ba <DIO_voidSetPortValue+0x80>
        break;
    case PORT_C:
        PORTC = EN_Value;
    14a2:	e5 e3       	ldi	r30, 0x35	; 53
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	80 83       	st	Z, r24
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <DIO_voidSetPortValue+0x80>
        break;
    case PORT_D:
        PORTD = EN_Value;
    14ac:	e2 e3       	ldi	r30, 0x32	; 50
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	80 83       	st	Z, r24
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <DIO_voidSetPortValue+0x80>
        break;
    default:
        state = E_DIOPORT;
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPortValue */
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <DIO_voidSetPortDirection>:
 * @param EN_Port PORT Name
 * @param EN_Direction PORT Direction
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <DIO_voidSetPortDirection+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_voidSetPortDirection+0x8>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	8a 83       	std	Y+2, r24	; 0x02
    14dc:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
    14de:	84 e0       	ldi	r24, 0x04	; 4
    14e0:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	3d 83       	std	Y+5, r19	; 0x05
    14ea:	2c 83       	std	Y+4, r18	; 0x04
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	9d 81       	ldd	r25, Y+5	; 0x05
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	91 05       	cpc	r25, r1
    14f4:	d1 f0       	breq	.+52     	; 0x152a <DIO_voidSetPortDirection+0x5e>
    14f6:	2c 81       	ldd	r18, Y+4	; 0x04
    14f8:	3d 81       	ldd	r19, Y+5	; 0x05
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	2c f4       	brge	.+10     	; 0x150a <DIO_voidSetPortDirection+0x3e>
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	9d 81       	ldd	r25, Y+5	; 0x05
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	61 f0       	breq	.+24     	; 0x1520 <DIO_voidSetPortDirection+0x54>
    1508:	1f c0       	rjmp	.+62     	; 0x1548 <DIO_voidSetPortDirection+0x7c>
    150a:	2c 81       	ldd	r18, Y+4	; 0x04
    150c:	3d 81       	ldd	r19, Y+5	; 0x05
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	81 f0       	breq	.+32     	; 0x1534 <DIO_voidSetPortDirection+0x68>
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	9d 81       	ldd	r25, Y+5	; 0x05
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	91 05       	cpc	r25, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <DIO_voidSetPortDirection+0x72>
    151e:	14 c0       	rjmp	.+40     	; 0x1548 <DIO_voidSetPortDirection+0x7c>
    {
    case PORT_A:
        DDRA = EN_Direction;
    1520:	ea e3       	ldi	r30, 0x3A	; 58
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	80 83       	st	Z, r24
    1528:	11 c0       	rjmp	.+34     	; 0x154c <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_B:
        DDRB = EN_Direction;
    152a:	e7 e3       	ldi	r30, 0x37	; 55
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	80 83       	st	Z, r24
    1532:	0c c0       	rjmp	.+24     	; 0x154c <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_C:
        DDRC = EN_Direction;
    1534:	e4 e3       	ldi	r30, 0x34	; 52
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	80 83       	st	Z, r24
    153c:	07 c0       	rjmp	.+14     	; 0x154c <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_D:
        DDRD = EN_Direction;
    153e:	e1 e3       	ldi	r30, 0x31	; 49
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	80 83       	st	Z, r24
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_voidSetPortDirection+0x80>
        break;
    default:
        state = E_DIOPORT;
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
    154c:	89 81       	ldd	r24, Y+1	; 0x01

} /* DIO_voidSetPortDirection */
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <DIO_voidInpullUp>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <DIO_voidInpullUp+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <DIO_voidInpullUp+0x8>
    1566:	0f 92       	push	r0
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	8a 83       	std	Y+2, r24	; 0x02
    156e:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
    1570:	84 e0       	ldi	r24, 0x04	; 4
    1572:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3d 83       	std	Y+5, r19	; 0x05
    157c:	2c 83       	std	Y+4, r18	; 0x04
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	9d 81       	ldd	r25, Y+5	; 0x05
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <DIO_voidInpullUp+0x2c>
    1588:	3e c0       	rjmp	.+124    	; 0x1606 <DIO_voidInpullUp+0xa8>
    158a:	2c 81       	ldd	r18, Y+4	; 0x04
    158c:	3d 81       	ldd	r19, Y+5	; 0x05
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <DIO_voidInpullUp+0x40>
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	9d 81       	ldd	r25, Y+5	; 0x05
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	71 f0       	breq	.+28     	; 0x15b8 <DIO_voidInpullUp+0x5a>
    159c:	a9 c0       	rjmp	.+338    	; 0x16f0 <DIO_voidInpullUp+0x192>
    159e:	2c 81       	ldd	r18, Y+4	; 0x04
    15a0:	3d 81       	ldd	r19, Y+5	; 0x05
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <DIO_voidInpullUp+0x4c>
    15a8:	55 c0       	rjmp	.+170    	; 0x1654 <DIO_voidInpullUp+0xf6>
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	9d 81       	ldd	r25, Y+5	; 0x05
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	91 05       	cpc	r25, r1
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <DIO_voidInpullUp+0x58>
    15b4:	76 c0       	rjmp	.+236    	; 0x16a2 <DIO_voidInpullUp+0x144>
    15b6:	9c c0       	rjmp	.+312    	; 0x16f0 <DIO_voidInpullUp+0x192>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
    15b8:	aa e3       	ldi	r26, 0x3A	; 58
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ea e3       	ldi	r30, 0x3A	; 58
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_voidInpullUp+0x76>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	2a 95       	dec	r18
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_voidInpullUp+0x72>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
        SETBIT(PORTA, EN_Pin);
    15de:	ab e3       	ldi	r26, 0x3B	; 59
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	eb e3       	ldi	r30, 0x3B	; 59
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_voidInpullUp+0x9e>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_voidInpullUp+0x9a>
    1600:	84 2b       	or	r24, r20
    1602:	8c 93       	st	X, r24
    1604:	77 c0       	rjmp	.+238    	; 0x16f4 <DIO_voidInpullUp+0x196>
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
    1606:	a7 e3       	ldi	r26, 0x37	; 55
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e7 e3       	ldi	r30, 0x37	; 55
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	48 2f       	mov	r20, r24
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_voidInpullUp+0xc4>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	2a 95       	dec	r18
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO_voidInpullUp+0xc0>
    1626:	80 95       	com	r24
    1628:	84 23       	and	r24, r20
    162a:	8c 93       	st	X, r24
        SETBIT(PORTB, EN_Pin);
    162c:	a8 e3       	ldi	r26, 0x38	; 56
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e8 e3       	ldi	r30, 0x38	; 56
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_voidInpullUp+0xec>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <DIO_voidInpullUp+0xe8>
    164e:	84 2b       	or	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	50 c0       	rjmp	.+160    	; 0x16f4 <DIO_voidInpullUp+0x196>
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
    1654:	a4 e3       	ldi	r26, 0x34	; 52
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e4 e3       	ldi	r30, 0x34	; 52
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_voidInpullUp+0x112>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	2a 95       	dec	r18
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_voidInpullUp+0x10e>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
        SETBIT(PORTC, EN_Pin);
    167a:	a5 e3       	ldi	r26, 0x35	; 53
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e5 e3       	ldi	r30, 0x35	; 53
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_voidInpullUp+0x13a>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_voidInpullUp+0x136>
    169c:	84 2b       	or	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	29 c0       	rjmp	.+82     	; 0x16f4 <DIO_voidInpullUp+0x196>
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
    16a2:	a1 e3       	ldi	r26, 0x31	; 49
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e1 e3       	ldi	r30, 0x31	; 49
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_voidInpullUp+0x160>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	2a 95       	dec	r18
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <DIO_voidInpullUp+0x15c>
    16c2:	80 95       	com	r24
    16c4:	84 23       	and	r24, r20
    16c6:	8c 93       	st	X, r24
        SETBIT(PORTD, EN_Pin);
    16c8:	a2 e3       	ldi	r26, 0x32	; 50
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e2 e3       	ldi	r30, 0x32	; 50
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_voidInpullUp+0x188>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_voidInpullUp+0x184>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_voidInpullUp+0x196>
        break;
    default:
        state = E_DIOPORT;
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidInpullUp */
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <DIO_u8GetPinValue>:



EN_value_type DIO_u8GetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <DIO_u8GetPinValue+0x6>
    170c:	00 d0       	rcall	.+0      	; 0x170e <DIO_u8GetPinValue+0x8>
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	8a 83       	std	Y+2, r24	; 0x02
    1716:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3d 83       	std	Y+5, r19	; 0x05
    1720:	2c 83       	std	Y+4, r18	; 0x04
    1722:	4c 81       	ldd	r20, Y+4	; 0x04
    1724:	5d 81       	ldd	r21, Y+5	; 0x05
    1726:	41 30       	cpi	r20, 0x01	; 1
    1728:	51 05       	cpc	r21, r1
    172a:	41 f1       	breq	.+80     	; 0x177c <DIO_u8GetPinValue+0x76>
    172c:	8c 81       	ldd	r24, Y+4	; 0x04
    172e:	9d 81       	ldd	r25, Y+5	; 0x05
    1730:	82 30       	cpi	r24, 0x02	; 2
    1732:	91 05       	cpc	r25, r1
    1734:	34 f4       	brge	.+12     	; 0x1742 <DIO_u8GetPinValue+0x3c>
    1736:	2c 81       	ldd	r18, Y+4	; 0x04
    1738:	3d 81       	ldd	r19, Y+5	; 0x05
    173a:	21 15       	cp	r18, r1
    173c:	31 05       	cpc	r19, r1
    173e:	61 f0       	breq	.+24     	; 0x1758 <DIO_u8GetPinValue+0x52>
    1740:	52 c0       	rjmp	.+164    	; 0x17e6 <DIO_u8GetPinValue+0xe0>
    1742:	4c 81       	ldd	r20, Y+4	; 0x04
    1744:	5d 81       	ldd	r21, Y+5	; 0x05
    1746:	42 30       	cpi	r20, 0x02	; 2
    1748:	51 05       	cpc	r21, r1
    174a:	51 f1       	breq	.+84     	; 0x17a0 <DIO_u8GetPinValue+0x9a>
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	83 30       	cpi	r24, 0x03	; 3
    1752:	91 05       	cpc	r25, r1
    1754:	b9 f1       	breq	.+110    	; 0x17c4 <DIO_u8GetPinValue+0xbe>
    1756:	47 c0       	rjmp	.+142    	; 0x17e6 <DIO_u8GetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
    1758:	e9 e3       	ldi	r30, 0x39	; 57
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a9 01       	movw	r20, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_u8GetPinValue+0x6a>
    176c:	55 95       	asr	r21
    176e:	47 95       	ror	r20
    1770:	8a 95       	dec	r24
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_u8GetPinValue+0x66>
    1774:	ca 01       	movw	r24, r20
    1776:	81 70       	andi	r24, 0x01	; 1
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	35 c0       	rjmp	.+106    	; 0x17e6 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
    177c:	e6 e3       	ldi	r30, 0x36	; 54
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a9 01       	movw	r20, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_u8GetPinValue+0x8e>
    1790:	55 95       	asr	r21
    1792:	47 95       	ror	r20
    1794:	8a 95       	dec	r24
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_u8GetPinValue+0x8a>
    1798:	ca 01       	movw	r24, r20
    179a:	81 70       	andi	r24, 0x01	; 1
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	23 c0       	rjmp	.+70     	; 0x17e6 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
    17a0:	e3 e3       	ldi	r30, 0x33	; 51
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a9 01       	movw	r20, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <DIO_u8GetPinValue+0xb2>
    17b4:	55 95       	asr	r21
    17b6:	47 95       	ror	r20
    17b8:	8a 95       	dec	r24
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <DIO_u8GetPinValue+0xae>
    17bc:	ca 01       	movw	r24, r20
    17be:	81 70       	andi	r24, 0x01	; 1
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	11 c0       	rjmp	.+34     	; 0x17e6 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
    17c4:	e0 e3       	ldi	r30, 0x30	; 48
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_u8GetPinValue+0xd6>
    17d8:	55 95       	asr	r21
    17da:	47 95       	ror	r20
    17dc:	8a 95       	dec	r24
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_u8GetPinValue+0xd2>
    17e0:	ca 01       	movw	r24, r20
    17e2:	81 70       	andi	r24, 0x01	; 1
    17e4:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_u8GetPinValue */
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <DIO_voidSetfirstnippleDir>:





EN_DIOERRORSTATE_t  DIO_voidSetfirstnippleDir(uint8_t copy_uint8_tport, uint8_t copy_uint8_tstate){
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	27 97       	sbiw	r28, 0x07	; 7
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_uint8_tstate == 1){
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	09 f0       	breq	.+2      	; 0x1818 <DIO_voidSetfirstnippleDir+0x20>
    1816:	3f c0       	rjmp	.+126    	; 0x1896 <DIO_voidSetfirstnippleDir+0x9e>
		switch(copy_uint8_tport){
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	3e 83       	std	Y+6, r19	; 0x06
    1820:	2d 83       	std	Y+5, r18	; 0x05
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	91 05       	cpc	r25, r1
    182a:	e9 f0       	breq	.+58     	; 0x1866 <DIO_voidSetfirstnippleDir+0x6e>
    182c:	2d 81       	ldd	r18, Y+5	; 0x05
    182e:	3e 81       	ldd	r19, Y+6	; 0x06
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	2c f4       	brge	.+10     	; 0x1840 <DIO_voidSetfirstnippleDir+0x48>
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	61 f0       	breq	.+24     	; 0x1856 <DIO_voidSetfirstnippleDir+0x5e>
    183e:	6d c0       	rjmp	.+218    	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
    1840:	2d 81       	ldd	r18, Y+5	; 0x05
    1842:	3e 81       	ldd	r19, Y+6	; 0x06
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	b1 f0       	breq	.+44     	; 0x1876 <DIO_voidSetfirstnippleDir+0x7e>
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	83 30       	cpi	r24, 0x03	; 3
    1850:	91 05       	cpc	r25, r1
    1852:	c9 f0       	breq	.+50     	; 0x1886 <DIO_voidSetfirstnippleDir+0x8e>
    1854:	62 c0       	rjmp	.+196    	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
		case 0:  DDRA |= 0x0f; break;
    1856:	aa e3       	ldi	r26, 0x3A	; 58
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	ea e3       	ldi	r30, 0x3A	; 58
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8f 60       	ori	r24, 0x0F	; 15
    1862:	8c 93       	st	X, r24
    1864:	5a c0       	rjmp	.+180    	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
		case 1:  DDRB |= 0x0f; break;
    1866:	a7 e3       	ldi	r26, 0x37	; 55
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e7 e3       	ldi	r30, 0x37	; 55
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8f 60       	ori	r24, 0x0F	; 15
    1872:	8c 93       	st	X, r24
    1874:	52 c0       	rjmp	.+164    	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
		case 2:  DDRC |= 0x0f; break;
    1876:	a4 e3       	ldi	r26, 0x34	; 52
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e4 e3       	ldi	r30, 0x34	; 52
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 60       	ori	r24, 0x0F	; 15
    1882:	8c 93       	st	X, r24
    1884:	4a c0       	rjmp	.+148    	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
		case 3:  DDRD |= 0x0f; break;
    1886:	a1 e3       	ldi	r26, 0x31	; 49
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e1 e3       	ldi	r30, 0x31	; 49
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8f 60       	ori	r24, 0x0F	; 15
    1892:	8c 93       	st	X, r24
    1894:	42 c0       	rjmp	.+132    	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
		}
	}
	else if(copy_uint8_tstate == 0){
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	88 23       	and	r24, r24
    189a:	09 f0       	breq	.+2      	; 0x189e <DIO_voidSetfirstnippleDir+0xa6>
    189c:	3e c0       	rjmp	.+124    	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
		switch(copy_uint8_tport){
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3c 83       	std	Y+4, r19	; 0x04
    18a6:	2b 83       	std	Y+3, r18	; 0x03
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	91 05       	cpc	r25, r1
    18b0:	e9 f0       	breq	.+58     	; 0x18ec <DIO_voidSetfirstnippleDir+0xf4>
    18b2:	2b 81       	ldd	r18, Y+3	; 0x03
    18b4:	3c 81       	ldd	r19, Y+4	; 0x04
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	31 05       	cpc	r19, r1
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <DIO_voidSetfirstnippleDir+0xce>
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	61 f0       	breq	.+24     	; 0x18dc <DIO_voidSetfirstnippleDir+0xe4>
    18c4:	2a c0       	rjmp	.+84     	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	b1 f0       	breq	.+44     	; 0x18fc <DIO_voidSetfirstnippleDir+0x104>
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	91 05       	cpc	r25, r1
    18d8:	c9 f0       	breq	.+50     	; 0x190c <DIO_voidSetfirstnippleDir+0x114>
    18da:	1f c0       	rjmp	.+62     	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
		case 0:  DDRA &=~ 0xf0; break;
    18dc:	aa e3       	ldi	r26, 0x3A	; 58
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	ea e3       	ldi	r30, 0x3A	; 58
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8f 70       	andi	r24, 0x0F	; 15
    18e8:	8c 93       	st	X, r24
    18ea:	17 c0       	rjmp	.+46     	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
		case 1:  DDRB &=~ 0xf0; break;
    18ec:	a7 e3       	ldi	r26, 0x37	; 55
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e7 e3       	ldi	r30, 0x37	; 55
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8f 70       	andi	r24, 0x0F	; 15
    18f8:	8c 93       	st	X, r24
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
		case 2:  DDRC &=~ 0xf0; break;
    18fc:	a4 e3       	ldi	r26, 0x34	; 52
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e4 e3       	ldi	r30, 0x34	; 52
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	8f 70       	andi	r24, 0x0F	; 15
    1908:	8c 93       	st	X, r24
    190a:	07 c0       	rjmp	.+14     	; 0x191a <DIO_voidSetfirstnippleDir+0x122>
		case 3:  DDRD &=~ 0xf0; break;
    190c:	a1 e3       	ldi	r26, 0x31	; 49
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e1 e3       	ldi	r30, 0x31	; 49
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	8f 70       	andi	r24, 0x0F	; 15
    1918:	8c 93       	st	X, r24
		}

	}
}
    191a:	27 96       	adiw	r28, 0x07	; 7
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <DIO_voidSetlastnippleDir>:
EN_DIOERRORSTATE_t DIO_voidSetlastnippleDir(uint8_t copy_uint8_tport, uint8_t copy_uint8_tstate){
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	27 97       	sbiw	r28, 0x07	; 7
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_uint8_tstate == 1){
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	09 f0       	breq	.+2      	; 0x194c <DIO_voidSetlastnippleDir+0x20>
    194a:	3f c0       	rjmp	.+126    	; 0x19ca <DIO_voidSetlastnippleDir+0x9e>
		switch(copy_uint8_tport){
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	3e 83       	std	Y+6, r19	; 0x06
    1954:	2d 83       	std	Y+5, r18	; 0x05
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	91 05       	cpc	r25, r1
    195e:	e9 f0       	breq	.+58     	; 0x199a <DIO_voidSetlastnippleDir+0x6e>
    1960:	2d 81       	ldd	r18, Y+5	; 0x05
    1962:	3e 81       	ldd	r19, Y+6	; 0x06
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	2c f4       	brge	.+10     	; 0x1974 <DIO_voidSetlastnippleDir+0x48>
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	61 f0       	breq	.+24     	; 0x198a <DIO_voidSetlastnippleDir+0x5e>
    1972:	6d c0       	rjmp	.+218    	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
    1974:	2d 81       	ldd	r18, Y+5	; 0x05
    1976:	3e 81       	ldd	r19, Y+6	; 0x06
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	b1 f0       	breq	.+44     	; 0x19aa <DIO_voidSetlastnippleDir+0x7e>
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	83 30       	cpi	r24, 0x03	; 3
    1984:	91 05       	cpc	r25, r1
    1986:	c9 f0       	breq	.+50     	; 0x19ba <DIO_voidSetlastnippleDir+0x8e>
    1988:	62 c0       	rjmp	.+196    	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
		case 0:  DDRA |= 0xf0; break;
    198a:	aa e3       	ldi	r26, 0x3A	; 58
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ea e3       	ldi	r30, 0x3A	; 58
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	80 6f       	ori	r24, 0xF0	; 240
    1996:	8c 93       	st	X, r24
    1998:	5a c0       	rjmp	.+180    	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
		case 1:  DDRB |= 0xf0; break;
    199a:	a7 e3       	ldi	r26, 0x37	; 55
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e7 e3       	ldi	r30, 0x37	; 55
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	80 6f       	ori	r24, 0xF0	; 240
    19a6:	8c 93       	st	X, r24
    19a8:	52 c0       	rjmp	.+164    	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
		case 2:  DDRC |= 0xf0; break;
    19aa:	a4 e3       	ldi	r26, 0x34	; 52
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e4 e3       	ldi	r30, 0x34	; 52
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	80 6f       	ori	r24, 0xF0	; 240
    19b6:	8c 93       	st	X, r24
    19b8:	4a c0       	rjmp	.+148    	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
		case 3:  DDRD |= 0xf0; break;
    19ba:	a1 e3       	ldi	r26, 0x31	; 49
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e1 e3       	ldi	r30, 0x31	; 49
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	80 6f       	ori	r24, 0xF0	; 240
    19c6:	8c 93       	st	X, r24
    19c8:	42 c0       	rjmp	.+132    	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
		}
	}
	else if(copy_uint8_tstate == 0){
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	88 23       	and	r24, r24
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <DIO_voidSetlastnippleDir+0xa6>
    19d0:	3e c0       	rjmp	.+124    	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
		switch(copy_uint8_tport){
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	3c 83       	std	Y+4, r19	; 0x04
    19da:	2b 83       	std	Y+3, r18	; 0x03
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	91 05       	cpc	r25, r1
    19e4:	e9 f0       	breq	.+58     	; 0x1a20 <DIO_voidSetlastnippleDir+0xf4>
    19e6:	2b 81       	ldd	r18, Y+3	; 0x03
    19e8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ea:	22 30       	cpi	r18, 0x02	; 2
    19ec:	31 05       	cpc	r19, r1
    19ee:	2c f4       	brge	.+10     	; 0x19fa <DIO_voidSetlastnippleDir+0xce>
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	61 f0       	breq	.+24     	; 0x1a10 <DIO_voidSetlastnippleDir+0xe4>
    19f8:	2a c0       	rjmp	.+84     	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
    19fa:	2b 81       	ldd	r18, Y+3	; 0x03
    19fc:	3c 81       	ldd	r19, Y+4	; 0x04
    19fe:	22 30       	cpi	r18, 0x02	; 2
    1a00:	31 05       	cpc	r19, r1
    1a02:	b1 f0       	breq	.+44     	; 0x1a30 <DIO_voidSetlastnippleDir+0x104>
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	9c 81       	ldd	r25, Y+4	; 0x04
    1a08:	83 30       	cpi	r24, 0x03	; 3
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	c9 f0       	breq	.+50     	; 0x1a40 <DIO_voidSetlastnippleDir+0x114>
    1a0e:	1f c0       	rjmp	.+62     	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
		case 0:  DDRA &=~ 0xf0; break;
    1a10:	aa e3       	ldi	r26, 0x3A	; 58
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	ea e3       	ldi	r30, 0x3A	; 58
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	8f 70       	andi	r24, 0x0F	; 15
    1a1c:	8c 93       	st	X, r24
    1a1e:	17 c0       	rjmp	.+46     	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
		case 1:  DDRB &=~ 0xf0; break;
    1a20:	a7 e3       	ldi	r26, 0x37	; 55
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e7 e3       	ldi	r30, 0x37	; 55
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	8f 70       	andi	r24, 0x0F	; 15
    1a2c:	8c 93       	st	X, r24
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
		case 2:  DDRC &=~ 0xf0; break;
    1a30:	a4 e3       	ldi	r26, 0x34	; 52
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e4 e3       	ldi	r30, 0x34	; 52
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8f 70       	andi	r24, 0x0F	; 15
    1a3c:	8c 93       	st	X, r24
    1a3e:	07 c0       	rjmp	.+14     	; 0x1a4e <DIO_voidSetlastnippleDir+0x122>
		case 3:  DDRD &=~ 0xf0; break;
    1a40:	a1 e3       	ldi	r26, 0x31	; 49
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e1 e3       	ldi	r30, 0x31	; 49
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	8f 70       	andi	r24, 0x0F	; 15
    1a4c:	8c 93       	st	X, r24
		}
	}

}
    1a4e:	27 96       	adiw	r28, 0x07	; 7
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <DIO_voidSetFirstNipple>:

EN_DIOERRORSTATE_t DIO_voidSetFirstNipple(uint8_t copy_u8port, uint8_t copy_u8val){
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <DIO_voidSetFirstNipple+0x6>
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <DIO_voidSetFirstNipple+0x8>
    1a68:	0f 92       	push	r0
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	3c 83       	std	Y+4, r19	; 0x04
    1a7a:	2b 83       	std	Y+3, r18	; 0x03
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	91 05       	cpc	r25, r1
    1a84:	09 f1       	breq	.+66     	; 0x1ac8 <DIO_voidSetFirstNipple+0x68>
    1a86:	2b 81       	ldd	r18, Y+3	; 0x03
    1a88:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8a:	22 30       	cpi	r18, 0x02	; 2
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <DIO_voidSetFirstNipple+0x3a>
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	61 f0       	breq	.+24     	; 0x1ab0 <DIO_voidSetFirstNipple+0x50>
    1a98:	3a c0       	rjmp	.+116    	; 0x1b0e <DIO_voidSetFirstNipple+0xae>
    1a9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	f1 f0       	breq	.+60     	; 0x1ae0 <DIO_voidSetFirstNipple+0x80>
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	83 30       	cpi	r24, 0x03	; 3
    1aaa:	91 05       	cpc	r25, r1
    1aac:	29 f1       	breq	.+74     	; 0x1af8 <DIO_voidSetFirstNipple+0x98>
    1aae:	2f c0       	rjmp	.+94     	; 0x1b0e <DIO_voidSetFirstNipple+0xae>
	case 0: PORTA = (PORTA & 0xf0) | (copy_u8val & 0x0f);  break;
    1ab0:	ab e3       	ldi	r26, 0x3B	; 59
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	eb e3       	ldi	r30, 0x3B	; 59
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	98 2f       	mov	r25, r24
    1abc:	90 7f       	andi	r25, 0xF0	; 240
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	8f 70       	andi	r24, 0x0F	; 15
    1ac2:	89 2b       	or	r24, r25
    1ac4:	8c 93       	st	X, r24
    1ac6:	23 c0       	rjmp	.+70     	; 0x1b0e <DIO_voidSetFirstNipple+0xae>
	case 1: PORTB = (PORTB & 0xf0) | (copy_u8val & 0x0f);  break;
    1ac8:	a8 e3       	ldi	r26, 0x38	; 56
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e8 e3       	ldi	r30, 0x38	; 56
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	98 2f       	mov	r25, r24
    1ad4:	90 7f       	andi	r25, 0xF0	; 240
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	8f 70       	andi	r24, 0x0F	; 15
    1ada:	89 2b       	or	r24, r25
    1adc:	8c 93       	st	X, r24
    1ade:	17 c0       	rjmp	.+46     	; 0x1b0e <DIO_voidSetFirstNipple+0xae>
	case 2: PORTC = (PORTC & 0xf0) | (copy_u8val & 0x0f);  break;
    1ae0:	a5 e3       	ldi	r26, 0x35	; 53
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e5 e3       	ldi	r30, 0x35	; 53
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	98 2f       	mov	r25, r24
    1aec:	90 7f       	andi	r25, 0xF0	; 240
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	8f 70       	andi	r24, 0x0F	; 15
    1af2:	89 2b       	or	r24, r25
    1af4:	8c 93       	st	X, r24
    1af6:	0b c0       	rjmp	.+22     	; 0x1b0e <DIO_voidSetFirstNipple+0xae>
	case 3: PORTD = (PORTD & 0xf0) | (copy_u8val & 0x0f);  break;
    1af8:	a2 e3       	ldi	r26, 0x32	; 50
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e2 e3       	ldi	r30, 0x32	; 50
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	98 2f       	mov	r25, r24
    1b04:	90 7f       	andi	r25, 0xF0	; 240
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	8f 70       	andi	r24, 0x0F	; 15
    1b0a:	89 2b       	or	r24, r25
    1b0c:	8c 93       	st	X, r24
	}
}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <DIO_voidSetLastNipple>:

EN_DIOERRORSTATE_t  DIO_voidSetLastNipple(uint8_t copy_u8port, uint8_t copy_u8val){
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <DIO_voidSetLastNipple+0x6>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <DIO_voidSetLastNipple+0x8>
    1b26:	0f 92       	push	r0
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	3c 83       	std	Y+4, r19	; 0x04
    1b38:	2b 83       	std	Y+3, r18	; 0x03
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	91 05       	cpc	r25, r1
    1b42:	09 f1       	breq	.+66     	; 0x1b86 <DIO_voidSetLastNipple+0x68>
    1b44:	2b 81       	ldd	r18, Y+3	; 0x03
    1b46:	3c 81       	ldd	r19, Y+4	; 0x04
    1b48:	22 30       	cpi	r18, 0x02	; 2
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <DIO_voidSetLastNipple+0x3a>
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	61 f0       	breq	.+24     	; 0x1b6e <DIO_voidSetLastNipple+0x50>
    1b56:	3a c0       	rjmp	.+116    	; 0x1bcc <DIO_voidSetLastNipple+0xae>
    1b58:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5c:	22 30       	cpi	r18, 0x02	; 2
    1b5e:	31 05       	cpc	r19, r1
    1b60:	f1 f0       	breq	.+60     	; 0x1b9e <DIO_voidSetLastNipple+0x80>
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	83 30       	cpi	r24, 0x03	; 3
    1b68:	91 05       	cpc	r25, r1
    1b6a:	29 f1       	breq	.+74     	; 0x1bb6 <DIO_voidSetLastNipple+0x98>
    1b6c:	2f c0       	rjmp	.+94     	; 0x1bcc <DIO_voidSetLastNipple+0xae>
	case 0: PORTA = (PORTA & 0x0f) | (copy_u8val & 0xF0);  break;
    1b6e:	ab e3       	ldi	r26, 0x3B	; 59
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	eb e3       	ldi	r30, 0x3B	; 59
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	98 2f       	mov	r25, r24
    1b7a:	9f 70       	andi	r25, 0x0F	; 15
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	80 7f       	andi	r24, 0xF0	; 240
    1b80:	89 2b       	or	r24, r25
    1b82:	8c 93       	st	X, r24
    1b84:	23 c0       	rjmp	.+70     	; 0x1bcc <DIO_voidSetLastNipple+0xae>
	case 1: PORTB = (PORTB & 0x0f) | (copy_u8val & 0xF0);  break;
    1b86:	a8 e3       	ldi	r26, 0x38	; 56
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e8 e3       	ldi	r30, 0x38	; 56
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	98 2f       	mov	r25, r24
    1b92:	9f 70       	andi	r25, 0x0F	; 15
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	80 7f       	andi	r24, 0xF0	; 240
    1b98:	89 2b       	or	r24, r25
    1b9a:	8c 93       	st	X, r24
    1b9c:	17 c0       	rjmp	.+46     	; 0x1bcc <DIO_voidSetLastNipple+0xae>
	case 2: PORTC = (PORTC & 0x0f) | (copy_u8val & 0xF0);  break;
    1b9e:	a5 e3       	ldi	r26, 0x35	; 53
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e5 e3       	ldi	r30, 0x35	; 53
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	98 2f       	mov	r25, r24
    1baa:	9f 70       	andi	r25, 0x0F	; 15
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	80 7f       	andi	r24, 0xF0	; 240
    1bb0:	89 2b       	or	r24, r25
    1bb2:	8c 93       	st	X, r24
    1bb4:	0b c0       	rjmp	.+22     	; 0x1bcc <DIO_voidSetLastNipple+0xae>
	case 3: PORTD = (PORTD & 0x0f) | (copy_u8val & 0xF0);  break;
    1bb6:	a2 e3       	ldi	r26, 0x32	; 50
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e2 e3       	ldi	r30, 0x32	; 50
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	9f 70       	andi	r25, 0x0F	; 15
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	80 7f       	andi	r24, 0xF0	; 240
    1bc8:	89 2b       	or	r24, r25
    1bca:	8c 93       	st	X, r24
	}
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <DIO_voidPlaceFirstNipple>:
EN_DIOERRORSTATE_t DIO_voidPlaceFirstNipple(uint8_t copy_uint8_tport, uint8_t copy_uint8_tval){
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <DIO_voidPlaceFirstNipple+0x6>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <DIO_voidPlaceFirstNipple+0x8>
    1be4:	0f 92       	push	r0
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_uint8_tport){
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	3c 83       	std	Y+4, r19	; 0x04
    1bf6:	2b 83       	std	Y+3, r18	; 0x03
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	91 05       	cpc	r25, r1
    1c00:	41 f1       	breq	.+80     	; 0x1c52 <DIO_voidPlaceFirstNipple+0x76>
    1c02:	2b 81       	ldd	r18, Y+3	; 0x03
    1c04:	3c 81       	ldd	r19, Y+4	; 0x04
    1c06:	22 30       	cpi	r18, 0x02	; 2
    1c08:	31 05       	cpc	r19, r1
    1c0a:	2c f4       	brge	.+10     	; 0x1c16 <DIO_voidPlaceFirstNipple+0x3a>
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	61 f0       	breq	.+24     	; 0x1c2c <DIO_voidPlaceFirstNipple+0x50>
    1c14:	56 c0       	rjmp	.+172    	; 0x1cc2 <DIO_voidPlaceFirstNipple+0xe6>
    1c16:	2b 81       	ldd	r18, Y+3	; 0x03
    1c18:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1a:	22 30       	cpi	r18, 0x02	; 2
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	61 f1       	breq	.+88     	; 0x1c78 <DIO_voidPlaceFirstNipple+0x9c>
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	83 30       	cpi	r24, 0x03	; 3
    1c26:	91 05       	cpc	r25, r1
    1c28:	d1 f1       	breq	.+116    	; 0x1c9e <DIO_voidPlaceFirstNipple+0xc2>
    1c2a:	4b c0       	rjmp	.+150    	; 0x1cc2 <DIO_voidPlaceFirstNipple+0xe6>
	case 0: PORTA = (PORTA & 0x0f) | ((copy_uint8_tval & 0x0f)<<4);  break;
    1c2c:	ab e3       	ldi	r26, 0x3B	; 59
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	eb e3       	ldi	r30, 0x3B	; 59
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	28 2f       	mov	r18, r24
    1c38:	2f 70       	andi	r18, 0x0F	; 15
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	82 95       	swap	r24
    1c42:	92 95       	swap	r25
    1c44:	90 7f       	andi	r25, 0xF0	; 240
    1c46:	98 27       	eor	r25, r24
    1c48:	80 7f       	andi	r24, 0xF0	; 240
    1c4a:	98 27       	eor	r25, r24
    1c4c:	82 2b       	or	r24, r18
    1c4e:	8c 93       	st	X, r24
    1c50:	38 c0       	rjmp	.+112    	; 0x1cc2 <DIO_voidPlaceFirstNipple+0xe6>
	case 1: PORTB = (PORTB & 0x0f) | ((copy_uint8_tval & 0x0f)<<4);  break;
    1c52:	a8 e3       	ldi	r26, 0x38	; 56
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e8 e3       	ldi	r30, 0x38	; 56
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	2f 70       	andi	r18, 0x0F	; 15
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	82 95       	swap	r24
    1c68:	92 95       	swap	r25
    1c6a:	90 7f       	andi	r25, 0xF0	; 240
    1c6c:	98 27       	eor	r25, r24
    1c6e:	80 7f       	andi	r24, 0xF0	; 240
    1c70:	98 27       	eor	r25, r24
    1c72:	82 2b       	or	r24, r18
    1c74:	8c 93       	st	X, r24
    1c76:	25 c0       	rjmp	.+74     	; 0x1cc2 <DIO_voidPlaceFirstNipple+0xe6>
	case 2: PORTC = (PORTC & 0x0f) | ((copy_uint8_tval & 0x0f)<<4);  break;
    1c78:	a5 e3       	ldi	r26, 0x35	; 53
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e5 e3       	ldi	r30, 0x35	; 53
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	28 2f       	mov	r18, r24
    1c84:	2f 70       	andi	r18, 0x0F	; 15
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	82 95       	swap	r24
    1c8e:	92 95       	swap	r25
    1c90:	90 7f       	andi	r25, 0xF0	; 240
    1c92:	98 27       	eor	r25, r24
    1c94:	80 7f       	andi	r24, 0xF0	; 240
    1c96:	98 27       	eor	r25, r24
    1c98:	82 2b       	or	r24, r18
    1c9a:	8c 93       	st	X, r24
    1c9c:	12 c0       	rjmp	.+36     	; 0x1cc2 <DIO_voidPlaceFirstNipple+0xe6>
	case 3: PORTD = (PORTD & 0x0f) | ((copy_uint8_tval & 0x0f)<<4);  break;
    1c9e:	a2 e3       	ldi	r26, 0x32	; 50
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e2 e3       	ldi	r30, 0x32	; 50
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	28 2f       	mov	r18, r24
    1caa:	2f 70       	andi	r18, 0x0F	; 15
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	82 95       	swap	r24
    1cb4:	92 95       	swap	r25
    1cb6:	90 7f       	andi	r25, 0xF0	; 240
    1cb8:	98 27       	eor	r25, r24
    1cba:	80 7f       	andi	r24, 0xF0	; 240
    1cbc:	98 27       	eor	r25, r24
    1cbe:	82 2b       	or	r24, r18
    1cc0:	8c 93       	st	X, r24
	}
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <DIO_voidPLaceLastNipple>:

EN_DIOERRORSTATE_t DIO_voidPLaceLastNipple(uint8_t copy_uint8_tport, uint8_t copy_uint8_tval){
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <DIO_voidPLaceLastNipple+0x6>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <DIO_voidPLaceLastNipple+0x8>
    1cda:	0f 92       	push	r0
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_uint8_tport){
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	3c 83       	std	Y+4, r19	; 0x04
    1cec:	2b 83       	std	Y+3, r18	; 0x03
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	11 f1       	breq	.+68     	; 0x1d3c <DIO_voidPLaceLastNipple+0x6a>
    1cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <DIO_voidPLaceLastNipple+0x3a>
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	61 f0       	breq	.+24     	; 0x1d22 <DIO_voidPLaceLastNipple+0x50>
    1d0a:	3e c0       	rjmp	.+124    	; 0x1d88 <DIO_voidPLaceLastNipple+0xb6>
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	01 f1       	breq	.+64     	; 0x1d56 <DIO_voidPLaceLastNipple+0x84>
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	41 f1       	breq	.+80     	; 0x1d70 <DIO_voidPLaceLastNipple+0x9e>
    1d20:	33 c0       	rjmp	.+102    	; 0x1d88 <DIO_voidPLaceLastNipple+0xb6>
	case 0: PORTA = (PORTA & 0x0F) | ((copy_uint8_tval & 0xf0)>>4);  break;
    1d22:	ab e3       	ldi	r26, 0x3B	; 59
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	eb e3       	ldi	r30, 0x3B	; 59
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	98 2f       	mov	r25, r24
    1d2e:	9f 70       	andi	r25, 0x0F	; 15
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	82 95       	swap	r24
    1d34:	8f 70       	andi	r24, 0x0F	; 15
    1d36:	89 2b       	or	r24, r25
    1d38:	8c 93       	st	X, r24
    1d3a:	26 c0       	rjmp	.+76     	; 0x1d88 <DIO_voidPLaceLastNipple+0xb6>
	case 1: PORTB = (PORTB & 0x0f) | ((copy_uint8_tval & 0xf0)>>4);  break;
    1d3c:	a8 e3       	ldi	r26, 0x38	; 56
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e8 e3       	ldi	r30, 0x38	; 56
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	98 2f       	mov	r25, r24
    1d48:	9f 70       	andi	r25, 0x0F	; 15
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	82 95       	swap	r24
    1d4e:	8f 70       	andi	r24, 0x0F	; 15
    1d50:	89 2b       	or	r24, r25
    1d52:	8c 93       	st	X, r24
    1d54:	19 c0       	rjmp	.+50     	; 0x1d88 <DIO_voidPLaceLastNipple+0xb6>
	case 2: PORTC = (PORTC & 0x0f) | ((copy_uint8_tval & 0xf0)>>4);  break;
    1d56:	a5 e3       	ldi	r26, 0x35	; 53
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e5 e3       	ldi	r30, 0x35	; 53
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	98 2f       	mov	r25, r24
    1d62:	9f 70       	andi	r25, 0x0F	; 15
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	82 95       	swap	r24
    1d68:	8f 70       	andi	r24, 0x0F	; 15
    1d6a:	89 2b       	or	r24, r25
    1d6c:	8c 93       	st	X, r24
    1d6e:	0c c0       	rjmp	.+24     	; 0x1d88 <DIO_voidPLaceLastNipple+0xb6>
	case 3: PORTD = (PORTD & 0x0f) | ((copy_uint8_tval & 0xf0)>>4);  break;
    1d70:	a2 e3       	ldi	r26, 0x32	; 50
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e2 e3       	ldi	r30, 0x32	; 50
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	9f 70       	andi	r25, 0x0F	; 15
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	82 95       	swap	r24
    1d82:	8f 70       	andi	r24, 0x0F	; 15
    1d84:	89 2b       	or	r24, r25
    1d86:	8c 93       	st	X, r24
	}
}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <ADC_VoidInit>:
#include"Memmap.h"
#include"ADC_Interface.h"
#include"ADC_Config.h"

void ADC_VoidInit(void)
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
#if ADC_VREF == INTERNAL_OFF
	CLRBIT( ADMUX , 6 ) ;  /*REFS0*/
	CLRBIT( ADMUX , 7 ) ;  /*REFS1*/

#elif ADC_VREF == EXTERNAL_AVCC
	SETBIT( ADMUX , 6 ) ;   /*REFS0*/
    1da0:	a7 e2       	ldi	r26, 0x27	; 39
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e7 e2       	ldi	r30, 0x27	; 39
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	80 64       	ori	r24, 0x40	; 64
    1dac:	8c 93       	st	X, r24
	CLRBIT( ADMUX , 7 ) ; /*REFS1*/
    1dae:	a7 e2       	ldi	r26, 0x27	; 39
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e7 e2       	ldi	r30, 0x27	; 39
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	8f 77       	andi	r24, 0x7F	; 127
    1dba:	8c 93       	st	X, r24

#endif


#if ADC_ADJ	== RIGHT_ADJ
	CLRBIT( ADMUX , 5 ) ; /*ADLAR*/
    1dbc:	a7 e2       	ldi	r26, 0x27	; 39
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e7 e2       	ldi	r30, 0x27	; 39
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8f 7d       	andi	r24, 0xDF	; 223
    1dc8:	8c 93       	st	X, r24

#endif


#if ADC_PRESCALER == PRESCALER_2
	SETBIT(ADCSRA, 0);
    1dca:	a6 e2       	ldi	r26, 0x26	; 38
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e6 e2       	ldi	r30, 0x26	; 38
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	81 60       	ori	r24, 0x01	; 1
    1dd6:	8c 93       	st	X, r24
	CLRBIT(ADCSRA,1);
    1dd8:	a6 e2       	ldi	r26, 0x26	; 38
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e6 e2       	ldi	r30, 0x26	; 38
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8d 7f       	andi	r24, 0xFD	; 253
    1de4:	8c 93       	st	X, r24
	CLRBIT(ADCSRA,2);
    1de6:	a6 e2       	ldi	r26, 0x26	; 38
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e6 e2       	ldi	r30, 0x26	; 38
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	8b 7f       	andi	r24, 0xFB	; 251
    1df2:	8c 93       	st	X, r24
	SETBIT( ADCSRA , 0 ) ;
	SETBIT( ADCSRA , 1 ) ;
	SETBIT( ADCSRA , 2 ) ;

#endif
	SETBIT( ADCSRA , 7 ) ;       /*Enable ADC*/
    1df4:	a6 e2       	ldi	r26, 0x26	; 38
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e6 e2       	ldi	r30, 0x26	; 38
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	80 68       	ori	r24, 0x80	; 128
    1e00:	8c 93       	st	X, r24
}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <ADC_U16GetChannelReading>:


uint32_t ADC_U16GetChannelReading(uint8_t Channel)
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <ADC_U16GetChannelReading+0x6>
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <ADC_U16GetChannelReading+0x8>
    1e10:	0f 92       	push	r0
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t Relult = 0 ;
    1e18:	19 82       	std	Y+1, r1	; 0x01
    1e1a:	1a 82       	std	Y+2, r1	; 0x02
    1e1c:	1b 82       	std	Y+3, r1	; 0x03
    1e1e:	1c 82       	std	Y+4, r1	; 0x04
	ADMUX&= 0XE0 ;                      /*0b11100000*/
    1e20:	a7 e2       	ldi	r26, 0x27	; 39
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e7 e2       	ldi	r30, 0x27	; 39
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 7e       	andi	r24, 0xE0	; 224
    1e2c:	8c 93       	st	X, r24
	ADMUX |= Channel ;
    1e2e:	a7 e2       	ldi	r26, 0x27	; 39
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e7 e2       	ldi	r30, 0x27	; 39
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	90 81       	ld	r25, Z
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	89 2b       	or	r24, r25
    1e3c:	8c 93       	st	X, r24
	SETBIT(ADCSRA,6);                  /* Start Conversion*/
    1e3e:	a6 e2       	ldi	r26, 0x26	; 38
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e6 e2       	ldi	r30, 0x26	; 38
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	80 64       	ori	r24, 0x40	; 64
    1e4a:	8c 93       	st	X, r24
	while(GETBIT(ADCSRA,4)==0);     	/*polling on the conversion complete flag*/
    1e4c:	e6 e2       	ldi	r30, 0x26	; 38
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	82 95       	swap	r24
    1e54:	8f 70       	andi	r24, 0x0F	; 15
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	81 70       	andi	r24, 0x01	; 1
    1e5c:	90 70       	andi	r25, 0x00	; 0
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	a9 f3       	breq	.-22     	; 0x1e4c <ADC_U16GetChannelReading+0x44>
	SETBIT(ADCSRA,4);                  /*CLEAR THE FLAG*/
    1e62:	a6 e2       	ldi	r26, 0x26	; 38
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e6 e2       	ldi	r30, 0x26	; 38
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 61       	ori	r24, 0x10	; 16
    1e6e:	8c 93       	st	X, r24
	Relult = ADC;                       /*get the result*/
    1e70:	e4 e2       	ldi	r30, 0x24	; 36
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	cc 01       	movw	r24, r24
    1e7a:	a0 e0       	ldi	r26, 0x00	; 0
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	ab 83       	std	Y+3, r26	; 0x03
    1e84:	bc 83       	std	Y+4, r27	; 0x04
	return Relult;
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8a:	ab 81       	ldd	r26, Y+3	; 0x03
    1e8c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <LM35_VoidInit>:
 **************************************************/
#include "DataTypes.h"
#include "DIO_Interface.h"
#include "ADC_Interface.h"
void LM35_VoidInit(void)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	ADC_VoidInit();
    1eaa:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <ADC_VoidInit>
	DIO_voidSetPinDirection(PORT_A, PIN2, INPUT);
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	62 e0       	ldi	r22, 0x02	; 2
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>

}
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <LM35_U16Read>:


u16 LM35_U16Read(uint8_t Copy_u8readchannel)
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <LM35_U16Read+0x6>
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <LM35_U16Read+0x8>
    1ec6:	0f 92       	push	r0
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t temp = 0;
    1ece:	19 82       	std	Y+1, r1	; 0x01
    1ed0:	1a 82       	std	Y+2, r1	; 0x02
    1ed2:	1b 82       	std	Y+3, r1	; 0x03
    1ed4:	1c 82       	std	Y+4, r1	; 0x04
	temp = ADC_U16GetChannelReading(Copy_u8readchannel); /* read channel two where the temp sensor is connect */
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <ADC_U16GetChannelReading>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	ab 83       	std	Y+3, r26	; 0x03
    1ee6:	bc 83       	std	Y+4, r27	; 0x04
	temp = (temp*150*5)/(1023*1.5);                      /* calculate the temp from the ADC value*/
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	ab 81       	ldd	r26, Y+3	; 0x03
    1eee:	bc 81       	ldd	r27, Y+4	; 0x04
    1ef0:	2e ee       	ldi	r18, 0xEE	; 238
    1ef2:	32 e0       	ldi	r19, 0x02	; 2
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 6d 21 	call	0x42da	; 0x42da <__mulsi3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 ed       	ldi	r19, 0xD0	; 208
    1f18:	4f eb       	ldi	r20, 0xBF	; 191
    1f1a:	54 e4       	ldi	r21, 0x44	; 68
    1f1c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	ab 83       	std	Y+3, r26	; 0x03
    1f36:	bc 83       	std	Y+4, r27	; 0x04

	 return temp;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <LCD_VidSendCommand>:

#include <avr/delay.h>



void LCD_VidSendCommand(uint8_t Copy_uint8_tCommand){
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	cf 57       	subi	r28, 0x7F	; 127
    1f5a:	d0 40       	sbci	r29, 0x00	; 0
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	fe 01       	movw	r30, r28
    1f68:	e1 58       	subi	r30, 0x81	; 129
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	80 83       	st	Z, r24
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e5 58       	subi	r30, 0x85	; 133
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a0 ea       	ldi	r26, 0xA0	; 160
    1f7a:	b0 e4       	ldi	r27, 0x40	; 64
    1f7c:	80 83       	st	Z, r24
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	a2 83       	std	Z+2, r26	; 0x02
    1f82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f84:	8e 01       	movw	r16, r28
    1f86:	09 58       	subi	r16, 0x89	; 137
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e5 58       	subi	r30, 0x85	; 133
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	4a ef       	ldi	r20, 0xFA	; 250
    1f9e:	54 e4       	ldi	r21, 0x44	; 68
    1fa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	f8 01       	movw	r30, r16
    1faa:	80 83       	st	Z, r24
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	a2 83       	std	Z+2, r26	; 0x02
    1fb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e9 58       	subi	r30, 0x89	; 137
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e8       	ldi	r20, 0x80	; 128
    1fc6:	5f e3       	ldi	r21, 0x3F	; 63
    1fc8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fcc:	88 23       	and	r24, r24
    1fce:	44 f4       	brge	.+16     	; 0x1fe0 <LCD_VidSendCommand+0x94>
		__ticks = 1;
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	eb 58       	subi	r30, 0x8B	; 139
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	80 83       	st	Z, r24
    1fde:	64 c0       	rjmp	.+200    	; 0x20a8 <LCD_VidSendCommand+0x15c>
	else if (__tmp > 65535)
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e9 58       	subi	r30, 0x89	; 137
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	0c f0       	brlt	.+2      	; 0x2000 <LCD_VidSendCommand+0xb4>
    1ffe:	43 c0       	rjmp	.+134    	; 0x2086 <LCD_VidSendCommand+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2000:	fe 01       	movw	r30, r28
    2002:	e5 58       	subi	r30, 0x85	; 133
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	60 81       	ld	r22, Z
    2008:	71 81       	ldd	r23, Z+1	; 0x01
    200a:	82 81       	ldd	r24, Z+2	; 0x02
    200c:	93 81       	ldd	r25, Z+3	; 0x03
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e2       	ldi	r20, 0x20	; 32
    2014:	51 e4       	ldi	r21, 0x41	; 65
    2016:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	8e 01       	movw	r16, r28
    2020:	0b 58       	subi	r16, 0x8B	; 139
    2022:	1f 4f       	sbci	r17, 0xFF	; 255
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	f8 01       	movw	r30, r16
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	80 83       	st	Z, r24
    2036:	1f c0       	rjmp	.+62     	; 0x2076 <LCD_VidSendCommand+0x12a>
    2038:	fe 01       	movw	r30, r28
    203a:	ed 58       	subi	r30, 0x8D	; 141
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	88 ec       	ldi	r24, 0xC8	; 200
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	91 83       	std	Z+1, r25	; 0x01
    2044:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2046:	fe 01       	movw	r30, r28
    2048:	ed 58       	subi	r30, 0x8D	; 141
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 81       	ld	r24, Z
    204e:	91 81       	ldd	r25, Z+1	; 0x01
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_VidSendCommand+0x104>
    2054:	fe 01       	movw	r30, r28
    2056:	ed 58       	subi	r30, 0x8D	; 141
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	91 83       	std	Z+1, r25	; 0x01
    205c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	de 01       	movw	r26, r28
    2060:	ab 58       	subi	r26, 0x8B	; 139
    2062:	bf 4f       	sbci	r27, 0xFF	; 255
    2064:	fe 01       	movw	r30, r28
    2066:	eb 58       	subi	r30, 0x8B	; 139
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	11 96       	adiw	r26, 0x01	; 1
    2072:	9c 93       	st	X, r25
    2074:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2076:	fe 01       	movw	r30, r28
    2078:	eb 58       	subi	r30, 0x8B	; 139
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	d1 f6       	brne	.-76     	; 0x2038 <LCD_VidSendCommand+0xec>
    2084:	27 c0       	rjmp	.+78     	; 0x20d4 <LCD_VidSendCommand+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	8e 01       	movw	r16, r28
    2088:	0b 58       	subi	r16, 0x8B	; 139
    208a:	1f 4f       	sbci	r17, 0xFF	; 255
    208c:	fe 01       	movw	r30, r28
    208e:	e9 58       	subi	r30, 0x89	; 137
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	f8 01       	movw	r30, r16
    20a4:	91 83       	std	Z+1, r25	; 0x01
    20a6:	80 83       	st	Z, r24
    20a8:	de 01       	movw	r26, r28
    20aa:	af 58       	subi	r26, 0x8F	; 143
    20ac:	bf 4f       	sbci	r27, 0xFF	; 255
    20ae:	fe 01       	movw	r30, r28
    20b0:	eb 58       	subi	r30, 0x8B	; 139
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    20b8:	8d 93       	st	X+, r24
    20ba:	9c 93       	st	X, r25
    20bc:	fe 01       	movw	r30, r28
    20be:	ef 58       	subi	r30, 0x8F	; 143
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 81       	ld	r24, Z
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_VidSendCommand+0x17a>
    20ca:	fe 01       	movw	r30, r28
    20cc:	ef 58       	subi	r30, 0x8F	; 143
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	80 83       	st	Z, r24
	_delay_ms(5);

	DIO_voidSetPinValue(Control_Port,RS,LOW);	// RS=0 D0
    20d4:	82 e0       	ldi	r24, 0x02	; 2
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Control_Port,RW,LOW);  // RW=0 D1
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	62 e0       	ldi	r22, 0x02	; 2
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
    20e8:	fe 01       	movw	r30, r28
    20ea:	e3 59       	subi	r30, 0x93	; 147
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a0 e8       	ldi	r26, 0x80	; 128
    20f4:	bf e3       	ldi	r27, 0x3F	; 63
    20f6:	80 83       	st	Z, r24
    20f8:	91 83       	std	Z+1, r25	; 0x01
    20fa:	a2 83       	std	Z+2, r26	; 0x02
    20fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fe:	8e 01       	movw	r16, r28
    2100:	07 59       	subi	r16, 0x97	; 151
    2102:	1f 4f       	sbci	r17, 0xFF	; 255
    2104:	fe 01       	movw	r30, r28
    2106:	e3 59       	subi	r30, 0x93	; 147
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	60 81       	ld	r22, Z
    210c:	71 81       	ldd	r23, Z+1	; 0x01
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	4a ef       	ldi	r20, 0xFA	; 250
    2118:	54 e4       	ldi	r21, 0x44	; 68
    211a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	f8 01       	movw	r30, r16
    2124:	80 83       	st	Z, r24
    2126:	91 83       	std	Z+1, r25	; 0x01
    2128:	a2 83       	std	Z+2, r26	; 0x02
    212a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    212c:	fe 01       	movw	r30, r28
    212e:	e7 59       	subi	r30, 0x97	; 151
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	60 81       	ld	r22, Z
    2134:	71 81       	ldd	r23, Z+1	; 0x01
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	44 f4       	brge	.+16     	; 0x215a <LCD_VidSendCommand+0x20e>
		__ticks = 1;
    214a:	fe 01       	movw	r30, r28
    214c:	e9 59       	subi	r30, 0x99	; 153
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	80 83       	st	Z, r24
    2158:	64 c0       	rjmp	.+200    	; 0x2222 <LCD_VidSendCommand+0x2d6>
	else if (__tmp > 65535)
    215a:	fe 01       	movw	r30, r28
    215c:	e7 59       	subi	r30, 0x97	; 151
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	60 81       	ld	r22, Z
    2162:	71 81       	ldd	r23, Z+1	; 0x01
    2164:	82 81       	ldd	r24, Z+2	; 0x02
    2166:	93 81       	ldd	r25, Z+3	; 0x03
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	3f ef       	ldi	r19, 0xFF	; 255
    216c:	4f e7       	ldi	r20, 0x7F	; 127
    216e:	57 e4       	ldi	r21, 0x47	; 71
    2170:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2174:	18 16       	cp	r1, r24
    2176:	0c f0       	brlt	.+2      	; 0x217a <LCD_VidSendCommand+0x22e>
    2178:	43 c0       	rjmp	.+134    	; 0x2200 <LCD_VidSendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217a:	fe 01       	movw	r30, r28
    217c:	e3 59       	subi	r30, 0x93	; 147
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e2       	ldi	r20, 0x20	; 32
    218e:	51 e4       	ldi	r21, 0x41	; 65
    2190:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8e 01       	movw	r16, r28
    219a:	09 59       	subi	r16, 0x99	; 153
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	f8 01       	movw	r30, r16
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	80 83       	st	Z, r24
    21b0:	1f c0       	rjmp	.+62     	; 0x21f0 <LCD_VidSendCommand+0x2a4>
    21b2:	fe 01       	movw	r30, r28
    21b4:	eb 59       	subi	r30, 0x9B	; 155
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	88 ec       	ldi	r24, 0xC8	; 200
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	91 83       	std	Z+1, r25	; 0x01
    21be:	80 83       	st	Z, r24
    21c0:	fe 01       	movw	r30, r28
    21c2:	eb 59       	subi	r30, 0x9B	; 155
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 81       	ld	r24, Z
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LCD_VidSendCommand+0x27e>
    21ce:	fe 01       	movw	r30, r28
    21d0:	eb 59       	subi	r30, 0x9B	; 155
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d8:	de 01       	movw	r26, r28
    21da:	a9 59       	subi	r26, 0x99	; 153
    21dc:	bf 4f       	sbci	r27, 0xFF	; 255
    21de:	fe 01       	movw	r30, r28
    21e0:	e9 59       	subi	r30, 0x99	; 153
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	80 81       	ld	r24, Z
    21e6:	91 81       	ldd	r25, Z+1	; 0x01
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	11 96       	adiw	r26, 0x01	; 1
    21ec:	9c 93       	st	X, r25
    21ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f0:	fe 01       	movw	r30, r28
    21f2:	e9 59       	subi	r30, 0x99	; 153
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	80 81       	ld	r24, Z
    21f8:	91 81       	ldd	r25, Z+1	; 0x01
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	d1 f6       	brne	.-76     	; 0x21b2 <LCD_VidSendCommand+0x266>
    21fe:	27 c0       	rjmp	.+78     	; 0x224e <LCD_VidSendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2200:	8e 01       	movw	r16, r28
    2202:	09 59       	subi	r16, 0x99	; 153
    2204:	1f 4f       	sbci	r17, 0xFF	; 255
    2206:	fe 01       	movw	r30, r28
    2208:	e7 59       	subi	r30, 0x97	; 151
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	60 81       	ld	r22, Z
    220e:	71 81       	ldd	r23, Z+1	; 0x01
    2210:	82 81       	ldd	r24, Z+2	; 0x02
    2212:	93 81       	ldd	r25, Z+3	; 0x03
    2214:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	f8 01       	movw	r30, r16
    221e:	91 83       	std	Z+1, r25	; 0x01
    2220:	80 83       	st	Z, r24
    2222:	de 01       	movw	r26, r28
    2224:	ad 59       	subi	r26, 0x9D	; 157
    2226:	bf 4f       	sbci	r27, 0xFF	; 255
    2228:	fe 01       	movw	r30, r28
    222a:	e9 59       	subi	r30, 0x99	; 153
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	8d 93       	st	X+, r24
    2234:	9c 93       	st	X, r25
    2236:	fe 01       	movw	r30, r28
    2238:	ed 59       	subi	r30, 0x9D	; 157
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <LCD_VidSendCommand+0x2f4>
    2244:	fe 01       	movw	r30, r28
    2246:	ed 59       	subi	r30, 0x9D	; 157
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	91 83       	std	Z+1, r25	; 0x01
    224c:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_voidSetPinValue (Control_Port,EN,HIGH);  // Enable
    224e:	82 e0       	ldi	r24, 0x02	; 2
    2250:	61 e0       	ldi	r22, 0x01	; 1
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
    2258:	fe 01       	movw	r30, r28
    225a:	e1 5a       	subi	r30, 0xA1	; 161
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	a0 e8       	ldi	r26, 0x80	; 128
    2264:	bf e3       	ldi	r27, 0x3F	; 63
    2266:	80 83       	st	Z, r24
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	a2 83       	std	Z+2, r26	; 0x02
    226c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	8e 01       	movw	r16, r28
    2270:	05 5a       	subi	r16, 0xA5	; 165
    2272:	1f 4f       	sbci	r17, 0xFF	; 255
    2274:	fe 01       	movw	r30, r28
    2276:	e1 5a       	subi	r30, 0xA1	; 161
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	60 81       	ld	r22, Z
    227c:	71 81       	ldd	r23, Z+1	; 0x01
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	4a ef       	ldi	r20, 0xFA	; 250
    2288:	54 e4       	ldi	r21, 0x44	; 68
    228a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	f8 01       	movw	r30, r16
    2294:	80 83       	st	Z, r24
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	a2 83       	std	Z+2, r26	; 0x02
    229a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    229c:	fe 01       	movw	r30, r28
    229e:	e5 5a       	subi	r30, 0xA5	; 165
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e8       	ldi	r20, 0x80	; 128
    22b0:	5f e3       	ldi	r21, 0x3F	; 63
    22b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22b6:	88 23       	and	r24, r24
    22b8:	44 f4       	brge	.+16     	; 0x22ca <LCD_VidSendCommand+0x37e>
		__ticks = 1;
    22ba:	fe 01       	movw	r30, r28
    22bc:	e7 5a       	subi	r30, 0xA7	; 167
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
    22c8:	64 c0       	rjmp	.+200    	; 0x2392 <LCD_VidSendCommand+0x446>
	else if (__tmp > 65535)
    22ca:	fe 01       	movw	r30, r28
    22cc:	e5 5a       	subi	r30, 0xA5	; 165
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	60 81       	ld	r22, Z
    22d2:	71 81       	ldd	r23, Z+1	; 0x01
    22d4:	82 81       	ldd	r24, Z+2	; 0x02
    22d6:	93 81       	ldd	r25, Z+3	; 0x03
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	3f ef       	ldi	r19, 0xFF	; 255
    22dc:	4f e7       	ldi	r20, 0x7F	; 127
    22de:	57 e4       	ldi	r21, 0x47	; 71
    22e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22e4:	18 16       	cp	r1, r24
    22e6:	0c f0       	brlt	.+2      	; 0x22ea <LCD_VidSendCommand+0x39e>
    22e8:	43 c0       	rjmp	.+134    	; 0x2370 <LCD_VidSendCommand+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ea:	fe 01       	movw	r30, r28
    22ec:	e1 5a       	subi	r30, 0xA1	; 161
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	60 81       	ld	r22, Z
    22f2:	71 81       	ldd	r23, Z+1	; 0x01
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	93 81       	ldd	r25, Z+3	; 0x03
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e2       	ldi	r20, 0x20	; 32
    22fe:	51 e4       	ldi	r21, 0x41	; 65
    2300:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	8e 01       	movw	r16, r28
    230a:	07 5a       	subi	r16, 0xA7	; 167
    230c:	1f 4f       	sbci	r17, 0xFF	; 255
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	1f c0       	rjmp	.+62     	; 0x2360 <LCD_VidSendCommand+0x414>
    2322:	fe 01       	movw	r30, r28
    2324:	e9 5a       	subi	r30, 0xA9	; 169
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	88 ec       	ldi	r24, 0xC8	; 200
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	91 83       	std	Z+1, r25	; 0x01
    232e:	80 83       	st	Z, r24
    2330:	fe 01       	movw	r30, r28
    2332:	e9 5a       	subi	r30, 0xA9	; 169
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	80 81       	ld	r24, Z
    2338:	91 81       	ldd	r25, Z+1	; 0x01
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_VidSendCommand+0x3ee>
    233e:	fe 01       	movw	r30, r28
    2340:	e9 5a       	subi	r30, 0xA9	; 169
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2348:	de 01       	movw	r26, r28
    234a:	a7 5a       	subi	r26, 0xA7	; 167
    234c:	bf 4f       	sbci	r27, 0xFF	; 255
    234e:	fe 01       	movw	r30, r28
    2350:	e7 5a       	subi	r30, 0xA7	; 167
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 81       	ld	r24, Z
    2356:	91 81       	ldd	r25, Z+1	; 0x01
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	11 96       	adiw	r26, 0x01	; 1
    235c:	9c 93       	st	X, r25
    235e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	fe 01       	movw	r30, r28
    2362:	e7 5a       	subi	r30, 0xA7	; 167
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	80 81       	ld	r24, Z
    2368:	91 81       	ldd	r25, Z+1	; 0x01
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	d1 f6       	brne	.-76     	; 0x2322 <LCD_VidSendCommand+0x3d6>
    236e:	27 c0       	rjmp	.+78     	; 0x23be <LCD_VidSendCommand+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2370:	8e 01       	movw	r16, r28
    2372:	07 5a       	subi	r16, 0xA7	; 167
    2374:	1f 4f       	sbci	r17, 0xFF	; 255
    2376:	fe 01       	movw	r30, r28
    2378:	e5 5a       	subi	r30, 0xA5	; 165
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	f8 01       	movw	r30, r16
    238e:	91 83       	std	Z+1, r25	; 0x01
    2390:	80 83       	st	Z, r24
    2392:	de 01       	movw	r26, r28
    2394:	ab 5a       	subi	r26, 0xAB	; 171
    2396:	bf 4f       	sbci	r27, 0xFF	; 255
    2398:	fe 01       	movw	r30, r28
    239a:	e7 5a       	subi	r30, 0xA7	; 167
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 81       	ld	r24, Z
    23a0:	91 81       	ldd	r25, Z+1	; 0x01
    23a2:	8d 93       	st	X+, r24
    23a4:	9c 93       	st	X, r25
    23a6:	fe 01       	movw	r30, r28
    23a8:	eb 5a       	subi	r30, 0xAB	; 171
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	91 81       	ldd	r25, Z+1	; 0x01
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <LCD_VidSendCommand+0x464>
    23b4:	fe 01       	movw	r30, r28
    23b6:	eb 5a       	subi	r30, 0xAB	; 171
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	80 83       	st	Z, r24


#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	DIO_voidSetLastNipple(Data_Port,  Copy_uint8_tCommand);
    23be:	fe 01       	movw	r30, r28
    23c0:	e1 58       	subi	r30, 0x81	; 129
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	60 81       	ld	r22, Z
    23c8:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <DIO_voidSetLastNipple>
    23cc:	fe 01       	movw	r30, r28
    23ce:	ef 5a       	subi	r30, 0xAF	; 175
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 e8       	ldi	r26, 0x80	; 128
    23d8:	bf e3       	ldi	r27, 0x3F	; 63
    23da:	80 83       	st	Z, r24
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	a2 83       	std	Z+2, r26	; 0x02
    23e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e2:	8e 01       	movw	r16, r28
    23e4:	03 5b       	subi	r16, 0xB3	; 179
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	fe 01       	movw	r30, r28
    23ea:	ef 5a       	subi	r30, 0xAF	; 175
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a ef       	ldi	r20, 0xFA	; 250
    23fc:	54 e4       	ldi	r21, 0x44	; 68
    23fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	f8 01       	movw	r30, r16
    2408:	80 83       	st	Z, r24
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	a2 83       	std	Z+2, r26	; 0x02
    240e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2410:	fe 01       	movw	r30, r28
    2412:	e3 5b       	subi	r30, 0xB3	; 179
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	60 81       	ld	r22, Z
    2418:	71 81       	ldd	r23, Z+1	; 0x01
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    242a:	88 23       	and	r24, r24
    242c:	44 f4       	brge	.+16     	; 0x243e <LCD_VidSendCommand+0x4f2>
		__ticks = 1;
    242e:	fe 01       	movw	r30, r28
    2430:	e5 5b       	subi	r30, 0xB5	; 181
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	80 83       	st	Z, r24
    243c:	64 c0       	rjmp	.+200    	; 0x2506 <LCD_VidSendCommand+0x5ba>
	else if (__tmp > 65535)
    243e:	fe 01       	movw	r30, r28
    2440:	e3 5b       	subi	r30, 0xB3	; 179
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	0c f0       	brlt	.+2      	; 0x245e <LCD_VidSendCommand+0x512>
    245c:	43 c0       	rjmp	.+134    	; 0x24e4 <LCD_VidSendCommand+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	fe 01       	movw	r30, r28
    2460:	ef 5a       	subi	r30, 0xAF	; 175
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	60 81       	ld	r22, Z
    2466:	71 81       	ldd	r23, Z+1	; 0x01
    2468:	82 81       	ldd	r24, Z+2	; 0x02
    246a:	93 81       	ldd	r25, Z+3	; 0x03
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e2       	ldi	r20, 0x20	; 32
    2472:	51 e4       	ldi	r21, 0x41	; 65
    2474:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8e 01       	movw	r16, r28
    247e:	05 5b       	subi	r16, 0xB5	; 181
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	f8 01       	movw	r30, r16
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
    2494:	1f c0       	rjmp	.+62     	; 0x24d4 <LCD_VidSendCommand+0x588>
    2496:	fe 01       	movw	r30, r28
    2498:	e7 5b       	subi	r30, 0xB7	; 183
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	88 ec       	ldi	r24, 0xC8	; 200
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    24a4:	fe 01       	movw	r30, r28
    24a6:	e7 5b       	subi	r30, 0xB7	; 183
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <LCD_VidSendCommand+0x562>
    24b2:	fe 01       	movw	r30, r28
    24b4:	e7 5b       	subi	r30, 0xB7	; 183
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	de 01       	movw	r26, r28
    24be:	a5 5b       	subi	r26, 0xB5	; 181
    24c0:	bf 4f       	sbci	r27, 0xFF	; 255
    24c2:	fe 01       	movw	r30, r28
    24c4:	e5 5b       	subi	r30, 0xB5	; 181
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 81       	ld	r24, Z
    24ca:	91 81       	ldd	r25, Z+1	; 0x01
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	11 96       	adiw	r26, 0x01	; 1
    24d0:	9c 93       	st	X, r25
    24d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d4:	fe 01       	movw	r30, r28
    24d6:	e5 5b       	subi	r30, 0xB5	; 181
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	d1 f6       	brne	.-76     	; 0x2496 <LCD_VidSendCommand+0x54a>
    24e2:	27 c0       	rjmp	.+78     	; 0x2532 <LCD_VidSendCommand+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e4:	8e 01       	movw	r16, r28
    24e6:	05 5b       	subi	r16, 0xB5	; 181
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	e3 5b       	subi	r30, 0xB3	; 179
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	f8 01       	movw	r30, r16
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	de 01       	movw	r26, r28
    2508:	a9 5b       	subi	r26, 0xB9	; 185
    250a:	bf 4f       	sbci	r27, 0xFF	; 255
    250c:	fe 01       	movw	r30, r28
    250e:	e5 5b       	subi	r30, 0xB5	; 181
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	8d 93       	st	X+, r24
    2518:	9c 93       	st	X, r25
    251a:	fe 01       	movw	r30, r28
    251c:	e9 5b       	subi	r30, 0xB9	; 185
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 81       	ld	r24, Z
    2522:	91 81       	ldd	r25, Z+1	; 0x01
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_VidSendCommand+0x5d8>
    2528:	fe 01       	movw	r30, r28
    252a:	e9 5b       	subi	r30, 0xB9	; 185
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
#else
	DIO_voidPLaceLastnipple(Data_Port, Copy_uint8_tCommand);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(Control_Port, EN,LOW);
    2532:	82 e0       	ldi	r24, 0x02	; 2
    2534:	61 e0       	ldi	r22, 0x01	; 1
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
    253c:	fe 01       	movw	r30, r28
    253e:	ed 5b       	subi	r30, 0xBD	; 189
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	a0 e8       	ldi	r26, 0x80	; 128
    2548:	bf e3       	ldi	r27, 0x3F	; 63
    254a:	80 83       	st	Z, r24
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	a2 83       	std	Z+2, r26	; 0x02
    2550:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2552:	8e 01       	movw	r16, r28
    2554:	01 5c       	subi	r16, 0xC1	; 193
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	fe 01       	movw	r30, r28
    255a:	ed 5b       	subi	r30, 0xBD	; 189
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4a ef       	ldi	r20, 0xFA	; 250
    256c:	54 e4       	ldi	r21, 0x44	; 68
    256e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	f8 01       	movw	r30, r16
    2578:	80 83       	st	Z, r24
    257a:	91 83       	std	Z+1, r25	; 0x01
    257c:	a2 83       	std	Z+2, r26	; 0x02
    257e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2580:	fe 01       	movw	r30, r28
    2582:	ff 96       	adiw	r30, 0x3f	; 63
    2584:	60 81       	ld	r22, Z
    2586:	71 81       	ldd	r23, Z+1	; 0x01
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	93 81       	ldd	r25, Z+3	; 0x03
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e8       	ldi	r20, 0x80	; 128
    2592:	5f e3       	ldi	r21, 0x3F	; 63
    2594:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2598:	88 23       	and	r24, r24
    259a:	2c f4       	brge	.+10     	; 0x25a6 <LCD_VidSendCommand+0x65a>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9e af       	std	Y+62, r25	; 0x3e
    25a2:	8d af       	std	Y+61, r24	; 0x3d
    25a4:	46 c0       	rjmp	.+140    	; 0x2632 <LCD_VidSendCommand+0x6e6>
	else if (__tmp > 65535)
    25a6:	fe 01       	movw	r30, r28
    25a8:	ff 96       	adiw	r30, 0x3f	; 63
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	64 f5       	brge	.+88     	; 0x261a <LCD_VidSendCommand+0x6ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c2:	fe 01       	movw	r30, r28
    25c4:	ed 5b       	subi	r30, 0xBD	; 189
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	60 81       	ld	r22, Z
    25ca:	71 81       	ldd	r23, Z+1	; 0x01
    25cc:	82 81       	ldd	r24, Z+2	; 0x02
    25ce:	93 81       	ldd	r25, Z+3	; 0x03
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e2       	ldi	r20, 0x20	; 32
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9e af       	std	Y+62, r25	; 0x3e
    25ee:	8d af       	std	Y+61, r24	; 0x3d
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <LCD_VidSendCommand+0x6c4>
    25f2:	88 ec       	ldi	r24, 0xC8	; 200
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	9c af       	std	Y+60, r25	; 0x3c
    25f8:	8b af       	std	Y+59, r24	; 0x3b
    25fa:	8b ad       	ldd	r24, Y+59	; 0x3b
    25fc:	9c ad       	ldd	r25, Y+60	; 0x3c
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <LCD_VidSendCommand+0x6b2>
    2602:	9c af       	std	Y+60, r25	; 0x3c
    2604:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2606:	8d ad       	ldd	r24, Y+61	; 0x3d
    2608:	9e ad       	ldd	r25, Y+62	; 0x3e
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	9e af       	std	Y+62, r25	; 0x3e
    260e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2610:	8d ad       	ldd	r24, Y+61	; 0x3d
    2612:	9e ad       	ldd	r25, Y+62	; 0x3e
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	69 f7       	brne	.-38     	; 0x25f2 <LCD_VidSendCommand+0x6a6>
    2618:	16 c0       	rjmp	.+44     	; 0x2646 <LCD_VidSendCommand+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	fe 01       	movw	r30, r28
    261c:	ff 96       	adiw	r30, 0x3f	; 63
    261e:	60 81       	ld	r22, Z
    2620:	71 81       	ldd	r23, Z+1	; 0x01
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	93 81       	ldd	r25, Z+3	; 0x03
    2626:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9e af       	std	Y+62, r25	; 0x3e
    2630:	8d af       	std	Y+61, r24	; 0x3d
    2632:	8d ad       	ldd	r24, Y+61	; 0x3d
    2634:	9e ad       	ldd	r25, Y+62	; 0x3e
    2636:	9a af       	std	Y+58, r25	; 0x3a
    2638:	89 af       	std	Y+57, r24	; 0x39
    263a:	89 ad       	ldd	r24, Y+57	; 0x39
    263c:	9a ad       	ldd	r25, Y+58	; 0x3a
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_VidSendCommand+0x6f2>
    2642:	9a af       	std	Y+58, r25	; 0x3a
    2644:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_voidSetPinValue(Control_Port, EN,HIGH);
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	61 e0       	ldi	r22, 0x01	; 1
    264a:	41 e0       	ldi	r20, 0x01	; 1
    264c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	a0 e8       	ldi	r26, 0x80	; 128
    2656:	bf e3       	ldi	r27, 0x3F	; 63
    2658:	8d ab       	std	Y+53, r24	; 0x35
    265a:	9e ab       	std	Y+54, r25	; 0x36
    265c:	af ab       	std	Y+55, r26	; 0x37
    265e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2660:	6d a9       	ldd	r22, Y+53	; 0x35
    2662:	7e a9       	ldd	r23, Y+54	; 0x36
    2664:	8f a9       	ldd	r24, Y+55	; 0x37
    2666:	98 ad       	ldd	r25, Y+56	; 0x38
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a ef       	ldi	r20, 0xFA	; 250
    266e:	54 e4       	ldi	r21, 0x44	; 68
    2670:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	89 ab       	std	Y+49, r24	; 0x31
    267a:	9a ab       	std	Y+50, r25	; 0x32
    267c:	ab ab       	std	Y+51, r26	; 0x33
    267e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2680:	69 a9       	ldd	r22, Y+49	; 0x31
    2682:	7a a9       	ldd	r23, Y+50	; 0x32
    2684:	8b a9       	ldd	r24, Y+51	; 0x33
    2686:	9c a9       	ldd	r25, Y+52	; 0x34
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	2c f4       	brge	.+10     	; 0x26a2 <LCD_VidSendCommand+0x756>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	98 ab       	std	Y+48, r25	; 0x30
    269e:	8f a7       	std	Y+47, r24	; 0x2f
    26a0:	3f c0       	rjmp	.+126    	; 0x2720 <LCD_VidSendCommand+0x7d4>
	else if (__tmp > 65535)
    26a2:	69 a9       	ldd	r22, Y+49	; 0x31
    26a4:	7a a9       	ldd	r23, Y+50	; 0x32
    26a6:	8b a9       	ldd	r24, Y+51	; 0x33
    26a8:	9c a9       	ldd	r25, Y+52	; 0x34
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	4c f5       	brge	.+82     	; 0x270c <LCD_VidSendCommand+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	6d a9       	ldd	r22, Y+53	; 0x35
    26bc:	7e a9       	ldd	r23, Y+54	; 0x36
    26be:	8f a9       	ldd	r24, Y+55	; 0x37
    26c0:	98 ad       	ldd	r25, Y+56	; 0x38
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	98 ab       	std	Y+48, r25	; 0x30
    26e0:	8f a7       	std	Y+47, r24	; 0x2f
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <LCD_VidSendCommand+0x7b6>
    26e4:	88 ec       	ldi	r24, 0xC8	; 200
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9e a7       	std	Y+46, r25	; 0x2e
    26ea:	8d a7       	std	Y+45, r24	; 0x2d
    26ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    26ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <LCD_VidSendCommand+0x7a4>
    26f4:	9e a7       	std	Y+46, r25	; 0x2e
    26f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26fa:	98 a9       	ldd	r25, Y+48	; 0x30
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	98 ab       	std	Y+48, r25	; 0x30
    2700:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	8f a5       	ldd	r24, Y+47	; 0x2f
    2704:	98 a9       	ldd	r25, Y+48	; 0x30
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	69 f7       	brne	.-38     	; 0x26e4 <LCD_VidSendCommand+0x798>
    270a:	14 c0       	rjmp	.+40     	; 0x2734 <LCD_VidSendCommand+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	69 a9       	ldd	r22, Y+49	; 0x31
    270e:	7a a9       	ldd	r23, Y+50	; 0x32
    2710:	8b a9       	ldd	r24, Y+51	; 0x33
    2712:	9c a9       	ldd	r25, Y+52	; 0x34
    2714:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	98 ab       	std	Y+48, r25	; 0x30
    271e:	8f a7       	std	Y+47, r24	; 0x2f
    2720:	8f a5       	ldd	r24, Y+47	; 0x2f
    2722:	98 a9       	ldd	r25, Y+48	; 0x30
    2724:	9c a7       	std	Y+44, r25	; 0x2c
    2726:	8b a7       	std	Y+43, r24	; 0x2b
    2728:	8b a5       	ldd	r24, Y+43	; 0x2b
    272a:	9c a5       	ldd	r25, Y+44	; 0x2c
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <LCD_VidSendCommand+0x7e0>
    2730:	9c a7       	std	Y+44, r25	; 0x2c
    2732:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	DIO_voidPlaceFirstNipple(Data_Port,  Copy_uint8_tCommand );
    2734:	fe 01       	movw	r30, r28
    2736:	e1 58       	subi	r30, 0x81	; 129
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	82 e0       	ldi	r24, 0x02	; 2
    273c:	60 81       	ld	r22, Z
    273e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_voidPlaceFirstNipple>
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	a0 e8       	ldi	r26, 0x80	; 128
    2748:	bf e3       	ldi	r27, 0x3F	; 63
    274a:	8f a3       	std	Y+39, r24	; 0x27
    274c:	98 a7       	std	Y+40, r25	; 0x28
    274e:	a9 a7       	std	Y+41, r26	; 0x29
    2750:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2752:	6f a1       	ldd	r22, Y+39	; 0x27
    2754:	78 a5       	ldd	r23, Y+40	; 0x28
    2756:	89 a5       	ldd	r24, Y+41	; 0x29
    2758:	9a a5       	ldd	r25, Y+42	; 0x2a
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	4a ef       	ldi	r20, 0xFA	; 250
    2760:	54 e4       	ldi	r21, 0x44	; 68
    2762:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	8b a3       	std	Y+35, r24	; 0x23
    276c:	9c a3       	std	Y+36, r25	; 0x24
    276e:	ad a3       	std	Y+37, r26	; 0x25
    2770:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2772:	6b a1       	ldd	r22, Y+35	; 0x23
    2774:	7c a1       	ldd	r23, Y+36	; 0x24
    2776:	8d a1       	ldd	r24, Y+37	; 0x25
    2778:	9e a1       	ldd	r25, Y+38	; 0x26
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e8       	ldi	r20, 0x80	; 128
    2780:	5f e3       	ldi	r21, 0x3F	; 63
    2782:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2786:	88 23       	and	r24, r24
    2788:	2c f4       	brge	.+10     	; 0x2794 <LCD_VidSendCommand+0x848>
		__ticks = 1;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9a a3       	std	Y+34, r25	; 0x22
    2790:	89 a3       	std	Y+33, r24	; 0x21
    2792:	3f c0       	rjmp	.+126    	; 0x2812 <LCD_VidSendCommand+0x8c6>
	else if (__tmp > 65535)
    2794:	6b a1       	ldd	r22, Y+35	; 0x23
    2796:	7c a1       	ldd	r23, Y+36	; 0x24
    2798:	8d a1       	ldd	r24, Y+37	; 0x25
    279a:	9e a1       	ldd	r25, Y+38	; 0x26
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	3f ef       	ldi	r19, 0xFF	; 255
    27a0:	4f e7       	ldi	r20, 0x7F	; 127
    27a2:	57 e4       	ldi	r21, 0x47	; 71
    27a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27a8:	18 16       	cp	r1, r24
    27aa:	4c f5       	brge	.+82     	; 0x27fe <LCD_VidSendCommand+0x8b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	6f a1       	ldd	r22, Y+39	; 0x27
    27ae:	78 a5       	ldd	r23, Y+40	; 0x28
    27b0:	89 a5       	ldd	r24, Y+41	; 0x29
    27b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e2       	ldi	r20, 0x20	; 32
    27ba:	51 e4       	ldi	r21, 0x41	; 65
    27bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9a a3       	std	Y+34, r25	; 0x22
    27d2:	89 a3       	std	Y+33, r24	; 0x21
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <LCD_VidSendCommand+0x8a8>
    27d6:	88 ec       	ldi	r24, 0xC8	; 200
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	98 a3       	std	Y+32, r25	; 0x20
    27dc:	8f 8f       	std	Y+31, r24	; 0x1f
    27de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e0:	98 a1       	ldd	r25, Y+32	; 0x20
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <LCD_VidSendCommand+0x896>
    27e6:	98 a3       	std	Y+32, r25	; 0x20
    27e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	89 a1       	ldd	r24, Y+33	; 0x21
    27ec:	9a a1       	ldd	r25, Y+34	; 0x22
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	9a a3       	std	Y+34, r25	; 0x22
    27f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f4:	89 a1       	ldd	r24, Y+33	; 0x21
    27f6:	9a a1       	ldd	r25, Y+34	; 0x22
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	69 f7       	brne	.-38     	; 0x27d6 <LCD_VidSendCommand+0x88a>
    27fc:	14 c0       	rjmp	.+40     	; 0x2826 <LCD_VidSendCommand+0x8da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2800:	7c a1       	ldd	r23, Y+36	; 0x24
    2802:	8d a1       	ldd	r24, Y+37	; 0x25
    2804:	9e a1       	ldd	r25, Y+38	; 0x26
    2806:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9a a3       	std	Y+34, r25	; 0x22
    2810:	89 a3       	std	Y+33, r24	; 0x21
    2812:	89 a1       	ldd	r24, Y+33	; 0x21
    2814:	9a a1       	ldd	r25, Y+34	; 0x22
    2816:	9e 8f       	std	Y+30, r25	; 0x1e
    2818:	8d 8f       	std	Y+29, r24	; 0x1d
    281a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    281c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <LCD_VidSendCommand+0x8d2>
    2822:	9e 8f       	std	Y+30, r25	; 0x1e
    2824:	8d 8f       	std	Y+29, r24	; 0x1d
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	a0 e8       	ldi	r26, 0x80	; 128
    282c:	bf e3       	ldi	r27, 0x3F	; 63
    282e:	89 8f       	std	Y+25, r24	; 0x19
    2830:	9a 8f       	std	Y+26, r25	; 0x1a
    2832:	ab 8f       	std	Y+27, r26	; 0x1b
    2834:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2836:	69 8d       	ldd	r22, Y+25	; 0x19
    2838:	7a 8d       	ldd	r23, Y+26	; 0x1a
    283a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    283c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	4a ef       	ldi	r20, 0xFA	; 250
    2844:	54 e4       	ldi	r21, 0x44	; 68
    2846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	8d 8b       	std	Y+21, r24	; 0x15
    2850:	9e 8b       	std	Y+22, r25	; 0x16
    2852:	af 8b       	std	Y+23, r26	; 0x17
    2854:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2856:	6d 89       	ldd	r22, Y+21	; 0x15
    2858:	7e 89       	ldd	r23, Y+22	; 0x16
    285a:	8f 89       	ldd	r24, Y+23	; 0x17
    285c:	98 8d       	ldd	r25, Y+24	; 0x18
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e8       	ldi	r20, 0x80	; 128
    2864:	5f e3       	ldi	r21, 0x3F	; 63
    2866:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    286a:	88 23       	and	r24, r24
    286c:	2c f4       	brge	.+10     	; 0x2878 <LCD_VidSendCommand+0x92c>
		__ticks = 1;
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9c 8b       	std	Y+20, r25	; 0x14
    2874:	8b 8b       	std	Y+19, r24	; 0x13
    2876:	3f c0       	rjmp	.+126    	; 0x28f6 <LCD_VidSendCommand+0x9aa>
	else if (__tmp > 65535)
    2878:	6d 89       	ldd	r22, Y+21	; 0x15
    287a:	7e 89       	ldd	r23, Y+22	; 0x16
    287c:	8f 89       	ldd	r24, Y+23	; 0x17
    287e:	98 8d       	ldd	r25, Y+24	; 0x18
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	3f ef       	ldi	r19, 0xFF	; 255
    2884:	4f e7       	ldi	r20, 0x7F	; 127
    2886:	57 e4       	ldi	r21, 0x47	; 71
    2888:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    288c:	18 16       	cp	r1, r24
    288e:	4c f5       	brge	.+82     	; 0x28e2 <LCD_VidSendCommand+0x996>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2890:	69 8d       	ldd	r22, Y+25	; 0x19
    2892:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e2       	ldi	r20, 0x20	; 32
    289e:	51 e4       	ldi	r21, 0x41	; 65
    28a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	bc 01       	movw	r22, r24
    28aa:	cd 01       	movw	r24, r26
    28ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13
    28b8:	0f c0       	rjmp	.+30     	; 0x28d8 <LCD_VidSendCommand+0x98c>
    28ba:	88 ec       	ldi	r24, 0xC8	; 200
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	9a 8b       	std	Y+18, r25	; 0x12
    28c0:	89 8b       	std	Y+17, r24	; 0x11
    28c2:	89 89       	ldd	r24, Y+17	; 0x11
    28c4:	9a 89       	ldd	r25, Y+18	; 0x12
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <LCD_VidSendCommand+0x97a>
    28ca:	9a 8b       	std	Y+18, r25	; 0x12
    28cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ce:	8b 89       	ldd	r24, Y+19	; 0x13
    28d0:	9c 89       	ldd	r25, Y+20	; 0x14
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	9c 8b       	std	Y+20, r25	; 0x14
    28d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d8:	8b 89       	ldd	r24, Y+19	; 0x13
    28da:	9c 89       	ldd	r25, Y+20	; 0x14
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	69 f7       	brne	.-38     	; 0x28ba <LCD_VidSendCommand+0x96e>
    28e0:	14 c0       	rjmp	.+40     	; 0x290a <LCD_VidSendCommand+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e2:	6d 89       	ldd	r22, Y+21	; 0x15
    28e4:	7e 89       	ldd	r23, Y+22	; 0x16
    28e6:	8f 89       	ldd	r24, Y+23	; 0x17
    28e8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9c 8b       	std	Y+20, r25	; 0x14
    28f4:	8b 8b       	std	Y+19, r24	; 0x13
    28f6:	8b 89       	ldd	r24, Y+19	; 0x13
    28f8:	9c 89       	ldd	r25, Y+20	; 0x14
    28fa:	98 8b       	std	Y+16, r25	; 0x10
    28fc:	8f 87       	std	Y+15, r24	; 0x0f
    28fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2900:	98 89       	ldd	r25, Y+16	; 0x10
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	f1 f7       	brne	.-4      	; 0x2902 <LCD_VidSendCommand+0x9b6>
    2906:	98 8b       	std	Y+16, r25	; 0x10
    2908:	8f 87       	std	Y+15, r24	; 0x0f
#else
	DIO_voidSetFirstNipple(Data_Port,  Copy_uint8_tCommand);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(Control_Port, EN,LOW);
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	61 e0       	ldi	r22, 0x01	; 1
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	a0 e8       	ldi	r26, 0x80	; 128
    291a:	bf e3       	ldi	r27, 0x3F	; 63
    291c:	8b 87       	std	Y+11, r24	; 0x0b
    291e:	9c 87       	std	Y+12, r25	; 0x0c
    2920:	ad 87       	std	Y+13, r26	; 0x0d
    2922:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2924:	6b 85       	ldd	r22, Y+11	; 0x0b
    2926:	7c 85       	ldd	r23, Y+12	; 0x0c
    2928:	8d 85       	ldd	r24, Y+13	; 0x0d
    292a:	9e 85       	ldd	r25, Y+14	; 0x0e
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	4a ef       	ldi	r20, 0xFA	; 250
    2932:	54 e4       	ldi	r21, 0x44	; 68
    2934:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	8f 83       	std	Y+7, r24	; 0x07
    293e:	98 87       	std	Y+8, r25	; 0x08
    2940:	a9 87       	std	Y+9, r26	; 0x09
    2942:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2944:	6f 81       	ldd	r22, Y+7	; 0x07
    2946:	78 85       	ldd	r23, Y+8	; 0x08
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e8       	ldi	r20, 0x80	; 128
    2952:	5f e3       	ldi	r21, 0x3F	; 63
    2954:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2958:	88 23       	and	r24, r24
    295a:	2c f4       	brge	.+10     	; 0x2966 <LCD_VidSendCommand+0xa1a>
		__ticks = 1;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
    2964:	3f c0       	rjmp	.+126    	; 0x29e4 <LCD_VidSendCommand+0xa98>
	else if (__tmp > 65535)
    2966:	6f 81       	ldd	r22, Y+7	; 0x07
    2968:	78 85       	ldd	r23, Y+8	; 0x08
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	3f ef       	ldi	r19, 0xFF	; 255
    2972:	4f e7       	ldi	r20, 0x7F	; 127
    2974:	57 e4       	ldi	r21, 0x47	; 71
    2976:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    297a:	18 16       	cp	r1, r24
    297c:	4c f5       	brge	.+82     	; 0x29d0 <LCD_VidSendCommand+0xa84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2980:	7c 85       	ldd	r23, Y+12	; 0x0c
    2982:	8d 85       	ldd	r24, Y+13	; 0x0d
    2984:	9e 85       	ldd	r25, Y+14	; 0x0e
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e2       	ldi	r20, 0x20	; 32
    298c:	51 e4       	ldi	r21, 0x41	; 65
    298e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <LCD_VidSendCommand+0xa7a>
    29a8:	88 ec       	ldi	r24, 0xC8	; 200
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	9c 83       	std	Y+4, r25	; 0x04
    29ae:	8b 83       	std	Y+3, r24	; 0x03
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_VidSendCommand+0xa68>
    29b8:	9c 83       	std	Y+4, r25	; 0x04
    29ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	69 f7       	brne	.-38     	; 0x29a8 <LCD_VidSendCommand+0xa5c>
    29ce:	14 c0       	rjmp	.+40     	; 0x29f8 <LCD_VidSendCommand+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d0:	6f 81       	ldd	r22, Y+7	; 0x07
    29d2:	78 85       	ldd	r23, Y+8	; 0x08
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	9a 83       	std	Y+2, r25	; 0x02
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	9a 81       	ldd	r25, Y+2	; 0x02
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <LCD_VidSendCommand+0xaa4>
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortValue (Data_Port,Copy_uint8_tCommand);  //PORT Data
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue (Control_Port,EN,LOW);
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    29f8:	c1 58       	subi	r28, 0x81	; 129
    29fa:	df 4f       	sbci	r29, 0xFF	; 255
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	1f 91       	pop	r17
    2a0c:	0f 91       	pop	r16
    2a0e:	08 95       	ret

00002a10 <LCD_VidInit>:


void LCD_VidInit(void){
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	e8 97       	sbiw	r28, 0x38	; 56
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection (Control_Port ,RS,OUTPUT);
    2a24:	82 e0       	ldi	r24, 0x02	; 2
    2a26:	60 e0       	ldi	r22, 0x00	; 0
    2a28:	41 e0       	ldi	r20, 0x01	; 1
    2a2a:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (Control_Port ,RW,OUTPUT);
    2a2e:	82 e0       	ldi	r24, 0x02	; 2
    2a30:	62 e0       	ldi	r22, 0x02	; 2
    2a32:	41 e0       	ldi	r20, 0x01	; 1
    2a34:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (Control_Port ,EN,OUTPUT);
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	61 e0       	ldi	r22, 0x01	; 1
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>
#if (DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_PINS
	DIO_voidSetlastnippleDir (Data_Port, OUTPUT);
    2a42:	82 e0       	ldi	r24, 0x02	; 2
    2a44:	61 e0       	ldi	r22, 0x01	; 1
    2a46:	0e 94 96 0c 	call	0x192c	; 0x192c <DIO_voidSetlastnippleDir>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a0 ea       	ldi	r26, 0xA0	; 160
    2a50:	b2 e4       	ldi	r27, 0x42	; 66
    2a52:	8d ab       	std	Y+53, r24	; 0x35
    2a54:	9e ab       	std	Y+54, r25	; 0x36
    2a56:	af ab       	std	Y+55, r26	; 0x37
    2a58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a5c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a5e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a60:	98 ad       	ldd	r25, Y+56	; 0x38
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a ef       	ldi	r20, 0xFA	; 250
    2a68:	54 e4       	ldi	r21, 0x44	; 68
    2a6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	89 ab       	std	Y+49, r24	; 0x31
    2a74:	9a ab       	std	Y+50, r25	; 0x32
    2a76:	ab ab       	std	Y+51, r26	; 0x33
    2a78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a80:	9c a9       	ldd	r25, Y+52	; 0x34
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	2c f4       	brge	.+10     	; 0x2a9c <LCD_VidInit+0x8c>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	98 ab       	std	Y+48, r25	; 0x30
    2a98:	8f a7       	std	Y+47, r24	; 0x2f
    2a9a:	3f c0       	rjmp	.+126    	; 0x2b1a <LCD_VidInit+0x10a>
	else if (__tmp > 65535)
    2a9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa0:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa2:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	4c f5       	brge	.+82     	; 0x2b06 <LCD_VidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ab6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab8:	8f a9       	ldd	r24, Y+55	; 0x37
    2aba:	98 ad       	ldd	r25, Y+56	; 0x38
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	98 ab       	std	Y+48, r25	; 0x30
    2ada:	8f a7       	std	Y+47, r24	; 0x2f
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <LCD_VidInit+0xec>
    2ade:	88 ec       	ldi	r24, 0xC8	; 200
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9e a7       	std	Y+46, r25	; 0x2e
    2ae4:	8d a7       	std	Y+45, r24	; 0x2d
    2ae6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ae8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_VidInit+0xda>
    2aee:	9e a7       	std	Y+46, r25	; 0x2e
    2af0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af4:	98 a9       	ldd	r25, Y+48	; 0x30
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	98 ab       	std	Y+48, r25	; 0x30
    2afa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2afe:	98 a9       	ldd	r25, Y+48	; 0x30
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	69 f7       	brne	.-38     	; 0x2ade <LCD_VidInit+0xce>
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <LCD_VidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	69 a9       	ldd	r22, Y+49	; 0x31
    2b08:	7a a9       	ldd	r23, Y+50	; 0x32
    2b0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	98 ab       	std	Y+48, r25	; 0x30
    2b18:	8f a7       	std	Y+47, r24	; 0x2f
    2b1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1e:	9c a7       	std	Y+44, r25	; 0x2c
    2b20:	8b a7       	std	Y+43, r24	; 0x2b
    2b22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b24:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_VidInit+0x116>
    2b2a:	9c a7       	std	Y+44, r25	; 0x2c
    2b2c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(80);

#else
	DIO_SetfirstnippleDir(LCD_DATA_CONNECTED_PORT, 1);
#endif
	LCD_VidSendCommand( Four_Bit_Mode); /* initialize LCD in 4-bit mode */
    2b2e:	82 e0       	ldi	r24, 0x02	; 2
    2b30:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_VidSendCommand>
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	a0 e8       	ldi	r26, 0x80	; 128
    2b3a:	bf e3       	ldi	r27, 0x3F	; 63
    2b3c:	8f a3       	std	Y+39, r24	; 0x27
    2b3e:	98 a7       	std	Y+40, r25	; 0x28
    2b40:	a9 a7       	std	Y+41, r26	; 0x29
    2b42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b44:	6f a1       	ldd	r22, Y+39	; 0x27
    2b46:	78 a5       	ldd	r23, Y+40	; 0x28
    2b48:	89 a5       	ldd	r24, Y+41	; 0x29
    2b4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	4a ef       	ldi	r20, 0xFA	; 250
    2b52:	54 e4       	ldi	r21, 0x44	; 68
    2b54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	8b a3       	std	Y+35, r24	; 0x23
    2b5e:	9c a3       	std	Y+36, r25	; 0x24
    2b60:	ad a3       	std	Y+37, r26	; 0x25
    2b62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b64:	6b a1       	ldd	r22, Y+35	; 0x23
    2b66:	7c a1       	ldd	r23, Y+36	; 0x24
    2b68:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e8       	ldi	r20, 0x80	; 128
    2b72:	5f e3       	ldi	r21, 0x3F	; 63
    2b74:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b78:	88 23       	and	r24, r24
    2b7a:	2c f4       	brge	.+10     	; 0x2b86 <LCD_VidInit+0x176>
		__ticks = 1;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	9a a3       	std	Y+34, r25	; 0x22
    2b82:	89 a3       	std	Y+33, r24	; 0x21
    2b84:	3f c0       	rjmp	.+126    	; 0x2c04 <LCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    2b86:	6b a1       	ldd	r22, Y+35	; 0x23
    2b88:	7c a1       	ldd	r23, Y+36	; 0x24
    2b8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	3f ef       	ldi	r19, 0xFF	; 255
    2b92:	4f e7       	ldi	r20, 0x7F	; 127
    2b94:	57 e4       	ldi	r21, 0x47	; 71
    2b96:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b9a:	18 16       	cp	r1, r24
    2b9c:	4c f5       	brge	.+82     	; 0x2bf0 <LCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9e:	6f a1       	ldd	r22, Y+39	; 0x27
    2ba0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ba2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e2       	ldi	r20, 0x20	; 32
    2bac:	51 e4       	ldi	r21, 0x41	; 65
    2bae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	cd 01       	movw	r24, r26
    2bba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	9a a3       	std	Y+34, r25	; 0x22
    2bc4:	89 a3       	std	Y+33, r24	; 0x21
    2bc6:	0f c0       	rjmp	.+30     	; 0x2be6 <LCD_VidInit+0x1d6>
    2bc8:	88 ec       	ldi	r24, 0xC8	; 200
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	98 a3       	std	Y+32, r25	; 0x20
    2bce:	8f 8f       	std	Y+31, r24	; 0x1f
    2bd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bd2:	98 a1       	ldd	r25, Y+32	; 0x20
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <LCD_VidInit+0x1c4>
    2bd8:	98 a3       	std	Y+32, r25	; 0x20
    2bda:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bdc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bde:	9a a1       	ldd	r25, Y+34	; 0x22
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	9a a3       	std	Y+34, r25	; 0x22
    2be4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be6:	89 a1       	ldd	r24, Y+33	; 0x21
    2be8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bea:	00 97       	sbiw	r24, 0x00	; 0
    2bec:	69 f7       	brne	.-38     	; 0x2bc8 <LCD_VidInit+0x1b8>
    2bee:	14 c0       	rjmp	.+40     	; 0x2c18 <LCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf0:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf2:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf4:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf6:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	9a a3       	std	Y+34, r25	; 0x22
    2c02:	89 a3       	std	Y+33, r24	; 0x21
    2c04:	89 a1       	ldd	r24, Y+33	; 0x21
    2c06:	9a a1       	ldd	r25, Y+34	; 0x22
    2c08:	9e 8f       	std	Y+30, r25	; 0x1e
    2c0a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	f1 f7       	brne	.-4      	; 0x2c10 <LCD_VidInit+0x200>
    2c14:	9e 8f       	std	Y+30, r25	; 0x1e
    2c16:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_VidSendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode +
    2c18:	88 e2       	ldi	r24, 0x28	; 40
    2c1a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_VidSendCommand>
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	a0 e8       	ldi	r26, 0x80	; 128
    2c24:	bf e3       	ldi	r27, 0x3F	; 63
    2c26:	89 8f       	std	Y+25, r24	; 0x19
    2c28:	9a 8f       	std	Y+26, r25	; 0x1a
    2c2a:	ab 8f       	std	Y+27, r26	; 0x1b
    2c2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	4a ef       	ldi	r20, 0xFA	; 250
    2c3c:	54 e4       	ldi	r21, 0x44	; 68
    2c3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	8d 8b       	std	Y+21, r24	; 0x15
    2c48:	9e 8b       	std	Y+22, r25	; 0x16
    2c4a:	af 8b       	std	Y+23, r26	; 0x17
    2c4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c50:	7e 89       	ldd	r23, Y+22	; 0x16
    2c52:	8f 89       	ldd	r24, Y+23	; 0x17
    2c54:	98 8d       	ldd	r25, Y+24	; 0x18
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c62:	88 23       	and	r24, r24
    2c64:	2c f4       	brge	.+10     	; 0x2c70 <LCD_VidInit+0x260>
		__ticks = 1;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9c 8b       	std	Y+20, r25	; 0x14
    2c6c:	8b 8b       	std	Y+19, r24	; 0x13
    2c6e:	3f c0       	rjmp	.+126    	; 0x2cee <LCD_VidInit+0x2de>
	else if (__tmp > 65535)
    2c70:	6d 89       	ldd	r22, Y+21	; 0x15
    2c72:	7e 89       	ldd	r23, Y+22	; 0x16
    2c74:	8f 89       	ldd	r24, Y+23	; 0x17
    2c76:	98 8d       	ldd	r25, Y+24	; 0x18
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	3f ef       	ldi	r19, 0xFF	; 255
    2c7c:	4f e7       	ldi	r20, 0x7F	; 127
    2c7e:	57 e4       	ldi	r21, 0x47	; 71
    2c80:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c84:	18 16       	cp	r1, r24
    2c86:	4c f5       	brge	.+82     	; 0x2cda <LCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c88:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e2       	ldi	r20, 0x20	; 32
    2c96:	51 e4       	ldi	r21, 0x41	; 65
    2c98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9c 8b       	std	Y+20, r25	; 0x14
    2cae:	8b 8b       	std	Y+19, r24	; 0x13
    2cb0:	0f c0       	rjmp	.+30     	; 0x2cd0 <LCD_VidInit+0x2c0>
    2cb2:	88 ec       	ldi	r24, 0xC8	; 200
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9a 8b       	std	Y+18, r25	; 0x12
    2cb8:	89 8b       	std	Y+17, r24	; 0x11
    2cba:	89 89       	ldd	r24, Y+17	; 0x11
    2cbc:	9a 89       	ldd	r25, Y+18	; 0x12
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <LCD_VidInit+0x2ae>
    2cc2:	9a 8b       	std	Y+18, r25	; 0x12
    2cc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	9c 8b       	std	Y+20, r25	; 0x14
    2cce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	69 f7       	brne	.-38     	; 0x2cb2 <LCD_VidInit+0x2a2>
    2cd8:	14 c0       	rjmp	.+40     	; 0x2d02 <LCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cda:	6d 89       	ldd	r22, Y+21	; 0x15
    2cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cde:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	9c 8b       	std	Y+20, r25	; 0x14
    2cec:	8b 8b       	std	Y+19, r24	; 0x13
    2cee:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf2:	98 8b       	std	Y+16, r25	; 0x10
    2cf4:	8f 87       	std	Y+15, r24	; 0x0f
    2cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf8:	98 89       	ldd	r25, Y+16	; 0x10
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <LCD_VidInit+0x2ea>
    2cfe:	98 8b       	std	Y+16, r25	; 0x10
    2d00:	8f 87       	std	Y+15, r24	; 0x0f
5*7 dot display Mode */
	_delay_ms(1);

	LCD_VidSendCommand(CURSOR_ON);
    2d02:	8e e0       	ldi	r24, 0x0E	; 14
    2d04:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_VidSendCommand>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	a0 ea       	ldi	r26, 0xA0	; 160
    2d0e:	b0 e4       	ldi	r27, 0x40	; 64
    2d10:	8b 87       	std	Y+11, r24	; 0x0b
    2d12:	9c 87       	std	Y+12, r25	; 0x0c
    2d14:	ad 87       	std	Y+13, r26	; 0x0d
    2d16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	4a ef       	ldi	r20, 0xFA	; 250
    2d26:	54 e4       	ldi	r21, 0x44	; 68
    2d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	8f 83       	std	Y+7, r24	; 0x07
    2d32:	98 87       	std	Y+8, r25	; 0x08
    2d34:	a9 87       	std	Y+9, r26	; 0x09
    2d36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d38:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3a:	78 85       	ldd	r23, Y+8	; 0x08
    2d3c:	89 85       	ldd	r24, Y+9	; 0x09
    2d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e8       	ldi	r20, 0x80	; 128
    2d46:	5f e3       	ldi	r21, 0x3F	; 63
    2d48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d4c:	88 23       	and	r24, r24
    2d4e:	2c f4       	brge	.+10     	; 0x2d5a <LCD_VidInit+0x34a>
		__ticks = 1;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
    2d58:	3f c0       	rjmp	.+126    	; 0x2dd8 <LCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    2d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5c:	78 85       	ldd	r23, Y+8	; 0x08
    2d5e:	89 85       	ldd	r24, Y+9	; 0x09
    2d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	3f ef       	ldi	r19, 0xFF	; 255
    2d66:	4f e7       	ldi	r20, 0x7F	; 127
    2d68:	57 e4       	ldi	r21, 0x47	; 71
    2d6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d6e:	18 16       	cp	r1, r24
    2d70:	4c f5       	brge	.+82     	; 0x2dc4 <LCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	40 e2       	ldi	r20, 0x20	; 32
    2d80:	51 e4       	ldi	r21, 0x41	; 65
    2d82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	0f c0       	rjmp	.+30     	; 0x2dba <LCD_VidInit+0x3aa>
    2d9c:	88 ec       	ldi	r24, 0xC8	; 200
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	9c 83       	std	Y+4, r25	; 0x04
    2da2:	8b 83       	std	Y+3, r24	; 0x03
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	9c 81       	ldd	r25, Y+4	; 0x04
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <LCD_VidInit+0x398>
    2dac:	9c 83       	std	Y+4, r25	; 0x04
    2dae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dba:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	69 f7       	brne	.-38     	; 0x2d9c <LCD_VidInit+0x38c>
    2dc2:	14 c0       	rjmp	.+40     	; 0x2dec <LCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc6:	78 85       	ldd	r23, Y+8	; 0x08
    2dc8:	89 85       	ldd	r24, Y+9	; 0x09
    2dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	9e 83       	std	Y+6, r25	; 0x06
    2dd6:	8d 83       	std	Y+5, r24	; 0x05
    2dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dda:	9e 81       	ldd	r25, Y+6	; 0x06
    2ddc:	9a 83       	std	Y+2, r25	; 0x02
    2dde:	89 83       	std	Y+1, r24	; 0x01
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	9a 81       	ldd	r25, Y+2	; 0x02
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <LCD_VidInit+0x3d4>
    2de8:	9a 83       	std	Y+2, r25	; 0x02
    2dea:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_VidSendCommand(0b00000001);   // 8_bit mode
		_delay_ms(5);
#endif

}
    2dec:	e8 96       	adiw	r28, 0x38	; 56
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	08 95       	ret

00002dfe <LCD_VidSendData>:



void LCD_VidSendData(uint8_t Copy_uint8_tData){
    2dfe:	0f 93       	push	r16
    2e00:	1f 93       	push	r17
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	cf 57       	subi	r28, 0x7F	; 127
    2e0c:	d0 40       	sbci	r29, 0x00	; 0
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e1 58       	subi	r30, 0x81	; 129
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 83       	st	Z, r24
    2e20:	fe 01       	movw	r30, r28
    2e22:	e5 58       	subi	r30, 0x85	; 133
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	a0 ea       	ldi	r26, 0xA0	; 160
    2e2c:	b0 e4       	ldi	r27, 0x40	; 64
    2e2e:	80 83       	st	Z, r24
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	a2 83       	std	Z+2, r26	; 0x02
    2e34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e36:	8e 01       	movw	r16, r28
    2e38:	09 58       	subi	r16, 0x89	; 137
    2e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e5 58       	subi	r30, 0x85	; 133
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	60 81       	ld	r22, Z
    2e44:	71 81       	ldd	r23, Z+1	; 0x01
    2e46:	82 81       	ldd	r24, Z+2	; 0x02
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	4a ef       	ldi	r20, 0xFA	; 250
    2e50:	54 e4       	ldi	r21, 0x44	; 68
    2e52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	f8 01       	movw	r30, r16
    2e5c:	80 83       	st	Z, r24
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	a2 83       	std	Z+2, r26	; 0x02
    2e62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e64:	fe 01       	movw	r30, r28
    2e66:	e9 58       	subi	r30, 0x89	; 137
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e8       	ldi	r20, 0x80	; 128
    2e78:	5f e3       	ldi	r21, 0x3F	; 63
    2e7a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e7e:	88 23       	and	r24, r24
    2e80:	44 f4       	brge	.+16     	; 0x2e92 <LCD_VidSendData+0x94>
		__ticks = 1;
    2e82:	fe 01       	movw	r30, r28
    2e84:	eb 58       	subi	r30, 0x8B	; 139
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	91 83       	std	Z+1, r25	; 0x01
    2e8e:	80 83       	st	Z, r24
    2e90:	64 c0       	rjmp	.+200    	; 0x2f5a <LCD_VidSendData+0x15c>
	else if (__tmp > 65535)
    2e92:	fe 01       	movw	r30, r28
    2e94:	e9 58       	subi	r30, 0x89	; 137
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	3f ef       	ldi	r19, 0xFF	; 255
    2ea4:	4f e7       	ldi	r20, 0x7F	; 127
    2ea6:	57 e4       	ldi	r21, 0x47	; 71
    2ea8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2eac:	18 16       	cp	r1, r24
    2eae:	0c f0       	brlt	.+2      	; 0x2eb2 <LCD_VidSendData+0xb4>
    2eb0:	43 c0       	rjmp	.+134    	; 0x2f38 <LCD_VidSendData+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e5 58       	subi	r30, 0x85	; 133
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	60 81       	ld	r22, Z
    2eba:	71 81       	ldd	r23, Z+1	; 0x01
    2ebc:	82 81       	ldd	r24, Z+2	; 0x02
    2ebe:	93 81       	ldd	r25, Z+3	; 0x03
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e2       	ldi	r20, 0x20	; 32
    2ec6:	51 e4       	ldi	r21, 0x41	; 65
    2ec8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	8e 01       	movw	r16, r28
    2ed2:	0b 58       	subi	r16, 0x8B	; 139
    2ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed6:	bc 01       	movw	r22, r24
    2ed8:	cd 01       	movw	r24, r26
    2eda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	91 83       	std	Z+1, r25	; 0x01
    2ee6:	80 83       	st	Z, r24
    2ee8:	1f c0       	rjmp	.+62     	; 0x2f28 <LCD_VidSendData+0x12a>
    2eea:	fe 01       	movw	r30, r28
    2eec:	ed 58       	subi	r30, 0x8D	; 141
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	88 ec       	ldi	r24, 0xC8	; 200
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	80 83       	st	Z, r24
    2ef8:	fe 01       	movw	r30, r28
    2efa:	ed 58       	subi	r30, 0x8D	; 141
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	80 81       	ld	r24, Z
    2f00:	91 81       	ldd	r25, Z+1	; 0x01
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <LCD_VidSendData+0x104>
    2f06:	fe 01       	movw	r30, r28
    2f08:	ed 58       	subi	r30, 0x8D	; 141
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f10:	de 01       	movw	r26, r28
    2f12:	ab 58       	subi	r26, 0x8B	; 139
    2f14:	bf 4f       	sbci	r27, 0xFF	; 255
    2f16:	fe 01       	movw	r30, r28
    2f18:	eb 58       	subi	r30, 0x8B	; 139
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	11 96       	adiw	r26, 0x01	; 1
    2f24:	9c 93       	st	X, r25
    2f26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f28:	fe 01       	movw	r30, r28
    2f2a:	eb 58       	subi	r30, 0x8B	; 139
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	d1 f6       	brne	.-76     	; 0x2eea <LCD_VidSendData+0xec>
    2f36:	27 c0       	rjmp	.+78     	; 0x2f86 <LCD_VidSendData+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f38:	8e 01       	movw	r16, r28
    2f3a:	0b 58       	subi	r16, 0x8B	; 139
    2f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e9 58       	subi	r30, 0x89	; 137
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	60 81       	ld	r22, Z
    2f46:	71 81       	ldd	r23, Z+1	; 0x01
    2f48:	82 81       	ldd	r24, Z+2	; 0x02
    2f4a:	93 81       	ldd	r25, Z+3	; 0x03
    2f4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	f8 01       	movw	r30, r16
    2f56:	91 83       	std	Z+1, r25	; 0x01
    2f58:	80 83       	st	Z, r24
    2f5a:	de 01       	movw	r26, r28
    2f5c:	af 58       	subi	r26, 0x8F	; 143
    2f5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f60:	fe 01       	movw	r30, r28
    2f62:	eb 58       	subi	r30, 0x8B	; 139
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	8d 93       	st	X+, r24
    2f6c:	9c 93       	st	X, r25
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ef 58       	subi	r30, 0x8F	; 143
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	80 81       	ld	r24, Z
    2f76:	91 81       	ldd	r25, Z+1	; 0x01
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <LCD_VidSendData+0x17a>
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	ef 58       	subi	r30, 0x8F	; 143
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24

	_delay_ms(5);

	DIO_voidSetPinValue(Control_Port,RS,HIGH);	// RS=1 D0
    2f86:	82 e0       	ldi	r24, 0x02	; 2
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	41 e0       	ldi	r20, 0x01	; 1
    2f8c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Control_Port,RW,LOW);  // RW=0 D1
    2f90:	82 e0       	ldi	r24, 0x02	; 2
    2f92:	62 e0       	ldi	r22, 0x02	; 2
    2f94:	40 e0       	ldi	r20, 0x00	; 0
    2f96:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	e3 59       	subi	r30, 0x93	; 147
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	a0 e8       	ldi	r26, 0x80	; 128
    2fa6:	bf e3       	ldi	r27, 0x3F	; 63
    2fa8:	80 83       	st	Z, r24
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	a2 83       	std	Z+2, r26	; 0x02
    2fae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb0:	8e 01       	movw	r16, r28
    2fb2:	07 59       	subi	r16, 0x97	; 151
    2fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e3 59       	subi	r30, 0x93	; 147
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	4a ef       	ldi	r20, 0xFA	; 250
    2fca:	54 e4       	ldi	r21, 0x44	; 68
    2fcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	f8 01       	movw	r30, r16
    2fd6:	80 83       	st	Z, r24
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	a2 83       	std	Z+2, r26	; 0x02
    2fdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e7 59       	subi	r30, 0x97	; 151
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	60 81       	ld	r22, Z
    2fe6:	71 81       	ldd	r23, Z+1	; 0x01
    2fe8:	82 81       	ldd	r24, Z+2	; 0x02
    2fea:	93 81       	ldd	r25, Z+3	; 0x03
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e8       	ldi	r20, 0x80	; 128
    2ff2:	5f e3       	ldi	r21, 0x3F	; 63
    2ff4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ff8:	88 23       	and	r24, r24
    2ffa:	44 f4       	brge	.+16     	; 0x300c <LCD_VidSendData+0x20e>
		__ticks = 1;
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e9 59       	subi	r30, 0x99	; 153
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	91 83       	std	Z+1, r25	; 0x01
    3008:	80 83       	st	Z, r24
    300a:	64 c0       	rjmp	.+200    	; 0x30d4 <LCD_VidSendData+0x2d6>
	else if (__tmp > 65535)
    300c:	fe 01       	movw	r30, r28
    300e:	e7 59       	subi	r30, 0x97	; 151
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	60 81       	ld	r22, Z
    3014:	71 81       	ldd	r23, Z+1	; 0x01
    3016:	82 81       	ldd	r24, Z+2	; 0x02
    3018:	93 81       	ldd	r25, Z+3	; 0x03
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	3f ef       	ldi	r19, 0xFF	; 255
    301e:	4f e7       	ldi	r20, 0x7F	; 127
    3020:	57 e4       	ldi	r21, 0x47	; 71
    3022:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3026:	18 16       	cp	r1, r24
    3028:	0c f0       	brlt	.+2      	; 0x302c <LCD_VidSendData+0x22e>
    302a:	43 c0       	rjmp	.+134    	; 0x30b2 <LCD_VidSendData+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302c:	fe 01       	movw	r30, r28
    302e:	e3 59       	subi	r30, 0x93	; 147
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	60 81       	ld	r22, Z
    3034:	71 81       	ldd	r23, Z+1	; 0x01
    3036:	82 81       	ldd	r24, Z+2	; 0x02
    3038:	93 81       	ldd	r25, Z+3	; 0x03
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e2       	ldi	r20, 0x20	; 32
    3040:	51 e4       	ldi	r21, 0x41	; 65
    3042:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	8e 01       	movw	r16, r28
    304c:	09 59       	subi	r16, 0x99	; 153
    304e:	1f 4f       	sbci	r17, 0xFF	; 255
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	f8 01       	movw	r30, r16
    305e:	91 83       	std	Z+1, r25	; 0x01
    3060:	80 83       	st	Z, r24
    3062:	1f c0       	rjmp	.+62     	; 0x30a2 <LCD_VidSendData+0x2a4>
    3064:	fe 01       	movw	r30, r28
    3066:	eb 59       	subi	r30, 0x9B	; 155
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	88 ec       	ldi	r24, 0xC8	; 200
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
    3072:	fe 01       	movw	r30, r28
    3074:	eb 59       	subi	r30, 0x9B	; 155
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	80 81       	ld	r24, Z
    307a:	91 81       	ldd	r25, Z+1	; 0x01
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	f1 f7       	brne	.-4      	; 0x307c <LCD_VidSendData+0x27e>
    3080:	fe 01       	movw	r30, r28
    3082:	eb 59       	subi	r30, 0x9B	; 155
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	91 83       	std	Z+1, r25	; 0x01
    3088:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308a:	de 01       	movw	r26, r28
    308c:	a9 59       	subi	r26, 0x99	; 153
    308e:	bf 4f       	sbci	r27, 0xFF	; 255
    3090:	fe 01       	movw	r30, r28
    3092:	e9 59       	subi	r30, 0x99	; 153
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 81       	ld	r24, Z
    3098:	91 81       	ldd	r25, Z+1	; 0x01
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	11 96       	adiw	r26, 0x01	; 1
    309e:	9c 93       	st	X, r25
    30a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a2:	fe 01       	movw	r30, r28
    30a4:	e9 59       	subi	r30, 0x99	; 153
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	d1 f6       	brne	.-76     	; 0x3064 <LCD_VidSendData+0x266>
    30b0:	27 c0       	rjmp	.+78     	; 0x3100 <LCD_VidSendData+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b2:	8e 01       	movw	r16, r28
    30b4:	09 59       	subi	r16, 0x99	; 153
    30b6:	1f 4f       	sbci	r17, 0xFF	; 255
    30b8:	fe 01       	movw	r30, r28
    30ba:	e7 59       	subi	r30, 0x97	; 151
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	60 81       	ld	r22, Z
    30c0:	71 81       	ldd	r23, Z+1	; 0x01
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	93 81       	ldd	r25, Z+3	; 0x03
    30c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	f8 01       	movw	r30, r16
    30d0:	91 83       	std	Z+1, r25	; 0x01
    30d2:	80 83       	st	Z, r24
    30d4:	de 01       	movw	r26, r28
    30d6:	ad 59       	subi	r26, 0x9D	; 157
    30d8:	bf 4f       	sbci	r27, 0xFF	; 255
    30da:	fe 01       	movw	r30, r28
    30dc:	e9 59       	subi	r30, 0x99	; 153
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 81       	ld	r24, Z
    30e2:	91 81       	ldd	r25, Z+1	; 0x01
    30e4:	8d 93       	st	X+, r24
    30e6:	9c 93       	st	X, r25
    30e8:	fe 01       	movw	r30, r28
    30ea:	ed 59       	subi	r30, 0x9D	; 157
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	80 81       	ld	r24, Z
    30f0:	91 81       	ldd	r25, Z+1	; 0x01
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	f1 f7       	brne	.-4      	; 0x30f2 <LCD_VidSendData+0x2f4>
    30f6:	fe 01       	movw	r30, r28
    30f8:	ed 59       	subi	r30, 0x9D	; 157
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_voidSetPinValue (Control_Port,EN,HIGH);  // Enable
    3100:	82 e0       	ldi	r24, 0x02	; 2
    3102:	61 e0       	ldi	r22, 0x01	; 1
    3104:	41 e0       	ldi	r20, 0x01	; 1
    3106:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
    310a:	fe 01       	movw	r30, r28
    310c:	e1 5a       	subi	r30, 0xA1	; 161
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	a0 e8       	ldi	r26, 0x80	; 128
    3116:	bf e3       	ldi	r27, 0x3F	; 63
    3118:	80 83       	st	Z, r24
    311a:	91 83       	std	Z+1, r25	; 0x01
    311c:	a2 83       	std	Z+2, r26	; 0x02
    311e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3120:	8e 01       	movw	r16, r28
    3122:	05 5a       	subi	r16, 0xA5	; 165
    3124:	1f 4f       	sbci	r17, 0xFF	; 255
    3126:	fe 01       	movw	r30, r28
    3128:	e1 5a       	subi	r30, 0xA1	; 161
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	60 81       	ld	r22, Z
    312e:	71 81       	ldd	r23, Z+1	; 0x01
    3130:	82 81       	ldd	r24, Z+2	; 0x02
    3132:	93 81       	ldd	r25, Z+3	; 0x03
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	4a ef       	ldi	r20, 0xFA	; 250
    313a:	54 e4       	ldi	r21, 0x44	; 68
    313c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	f8 01       	movw	r30, r16
    3146:	80 83       	st	Z, r24
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	a2 83       	std	Z+2, r26	; 0x02
    314c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    314e:	fe 01       	movw	r30, r28
    3150:	e5 5a       	subi	r30, 0xA5	; 165
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	60 81       	ld	r22, Z
    3156:	71 81       	ldd	r23, Z+1	; 0x01
    3158:	82 81       	ldd	r24, Z+2	; 0x02
    315a:	93 81       	ldd	r25, Z+3	; 0x03
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	40 e8       	ldi	r20, 0x80	; 128
    3162:	5f e3       	ldi	r21, 0x3F	; 63
    3164:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3168:	88 23       	and	r24, r24
    316a:	44 f4       	brge	.+16     	; 0x317c <LCD_VidSendData+0x37e>
		__ticks = 1;
    316c:	fe 01       	movw	r30, r28
    316e:	e7 5a       	subi	r30, 0xA7	; 167
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	91 83       	std	Z+1, r25	; 0x01
    3178:	80 83       	st	Z, r24
    317a:	64 c0       	rjmp	.+200    	; 0x3244 <LCD_VidSendData+0x446>
	else if (__tmp > 65535)
    317c:	fe 01       	movw	r30, r28
    317e:	e5 5a       	subi	r30, 0xA5	; 165
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	60 81       	ld	r22, Z
    3184:	71 81       	ldd	r23, Z+1	; 0x01
    3186:	82 81       	ldd	r24, Z+2	; 0x02
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	3f ef       	ldi	r19, 0xFF	; 255
    318e:	4f e7       	ldi	r20, 0x7F	; 127
    3190:	57 e4       	ldi	r21, 0x47	; 71
    3192:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3196:	18 16       	cp	r1, r24
    3198:	0c f0       	brlt	.+2      	; 0x319c <LCD_VidSendData+0x39e>
    319a:	43 c0       	rjmp	.+134    	; 0x3222 <LCD_VidSendData+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319c:	fe 01       	movw	r30, r28
    319e:	e1 5a       	subi	r30, 0xA1	; 161
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	60 81       	ld	r22, Z
    31a4:	71 81       	ldd	r23, Z+1	; 0x01
    31a6:	82 81       	ldd	r24, Z+2	; 0x02
    31a8:	93 81       	ldd	r25, Z+3	; 0x03
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	40 e2       	ldi	r20, 0x20	; 32
    31b0:	51 e4       	ldi	r21, 0x41	; 65
    31b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	8e 01       	movw	r16, r28
    31bc:	07 5a       	subi	r16, 0xA7	; 167
    31be:	1f 4f       	sbci	r17, 0xFF	; 255
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	f8 01       	movw	r30, r16
    31ce:	91 83       	std	Z+1, r25	; 0x01
    31d0:	80 83       	st	Z, r24
    31d2:	1f c0       	rjmp	.+62     	; 0x3212 <LCD_VidSendData+0x414>
    31d4:	fe 01       	movw	r30, r28
    31d6:	e9 5a       	subi	r30, 0xA9	; 169
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	88 ec       	ldi	r24, 0xC8	; 200
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	91 83       	std	Z+1, r25	; 0x01
    31e0:	80 83       	st	Z, r24
    31e2:	fe 01       	movw	r30, r28
    31e4:	e9 5a       	subi	r30, 0xA9	; 169
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	80 81       	ld	r24, Z
    31ea:	91 81       	ldd	r25, Z+1	; 0x01
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <LCD_VidSendData+0x3ee>
    31f0:	fe 01       	movw	r30, r28
    31f2:	e9 5a       	subi	r30, 0xA9	; 169
    31f4:	ff 4f       	sbci	r31, 0xFF	; 255
    31f6:	91 83       	std	Z+1, r25	; 0x01
    31f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fa:	de 01       	movw	r26, r28
    31fc:	a7 5a       	subi	r26, 0xA7	; 167
    31fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3200:	fe 01       	movw	r30, r28
    3202:	e7 5a       	subi	r30, 0xA7	; 167
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	80 81       	ld	r24, Z
    3208:	91 81       	ldd	r25, Z+1	; 0x01
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	11 96       	adiw	r26, 0x01	; 1
    320e:	9c 93       	st	X, r25
    3210:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3212:	fe 01       	movw	r30, r28
    3214:	e7 5a       	subi	r30, 0xA7	; 167
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	80 81       	ld	r24, Z
    321a:	91 81       	ldd	r25, Z+1	; 0x01
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	d1 f6       	brne	.-76     	; 0x31d4 <LCD_VidSendData+0x3d6>
    3220:	27 c0       	rjmp	.+78     	; 0x3270 <LCD_VidSendData+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3222:	8e 01       	movw	r16, r28
    3224:	07 5a       	subi	r16, 0xA7	; 167
    3226:	1f 4f       	sbci	r17, 0xFF	; 255
    3228:	fe 01       	movw	r30, r28
    322a:	e5 5a       	subi	r30, 0xA5	; 165
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	60 81       	ld	r22, Z
    3230:	71 81       	ldd	r23, Z+1	; 0x01
    3232:	82 81       	ldd	r24, Z+2	; 0x02
    3234:	93 81       	ldd	r25, Z+3	; 0x03
    3236:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	f8 01       	movw	r30, r16
    3240:	91 83       	std	Z+1, r25	; 0x01
    3242:	80 83       	st	Z, r24
    3244:	de 01       	movw	r26, r28
    3246:	ab 5a       	subi	r26, 0xAB	; 171
    3248:	bf 4f       	sbci	r27, 0xFF	; 255
    324a:	fe 01       	movw	r30, r28
    324c:	e7 5a       	subi	r30, 0xA7	; 167
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	80 81       	ld	r24, Z
    3252:	91 81       	ldd	r25, Z+1	; 0x01
    3254:	8d 93       	st	X+, r24
    3256:	9c 93       	st	X, r25
    3258:	fe 01       	movw	r30, r28
    325a:	eb 5a       	subi	r30, 0xAB	; 171
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	80 81       	ld	r24, Z
    3260:	91 81       	ldd	r25, Z+1	; 0x01
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	f1 f7       	brne	.-4      	; 0x3262 <LCD_VidSendData+0x464>
    3266:	fe 01       	movw	r30, r28
    3268:	eb 5a       	subi	r30, 0xAB	; 171
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	91 83       	std	Z+1, r25	; 0x01
    326e:	80 83       	st	Z, r24
	_delay_ms(1);
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	DIO_voidSetLastNipple(Data_Port,  Copy_uint8_tData);
    3270:	fe 01       	movw	r30, r28
    3272:	e1 58       	subi	r30, 0x81	; 129
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	82 e0       	ldi	r24, 0x02	; 2
    3278:	60 81       	ld	r22, Z
    327a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <DIO_voidSetLastNipple>
    327e:	fe 01       	movw	r30, r28
    3280:	ef 5a       	subi	r30, 0xAF	; 175
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	a0 e8       	ldi	r26, 0x80	; 128
    328a:	bf e3       	ldi	r27, 0x3F	; 63
    328c:	80 83       	st	Z, r24
    328e:	91 83       	std	Z+1, r25	; 0x01
    3290:	a2 83       	std	Z+2, r26	; 0x02
    3292:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3294:	8e 01       	movw	r16, r28
    3296:	03 5b       	subi	r16, 0xB3	; 179
    3298:	1f 4f       	sbci	r17, 0xFF	; 255
    329a:	fe 01       	movw	r30, r28
    329c:	ef 5a       	subi	r30, 0xAF	; 175
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	60 81       	ld	r22, Z
    32a2:	71 81       	ldd	r23, Z+1	; 0x01
    32a4:	82 81       	ldd	r24, Z+2	; 0x02
    32a6:	93 81       	ldd	r25, Z+3	; 0x03
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	4a ef       	ldi	r20, 0xFA	; 250
    32ae:	54 e4       	ldi	r21, 0x44	; 68
    32b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	f8 01       	movw	r30, r16
    32ba:	80 83       	st	Z, r24
    32bc:	91 83       	std	Z+1, r25	; 0x01
    32be:	a2 83       	std	Z+2, r26	; 0x02
    32c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32c2:	fe 01       	movw	r30, r28
    32c4:	e3 5b       	subi	r30, 0xB3	; 179
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	60 81       	ld	r22, Z
    32ca:	71 81       	ldd	r23, Z+1	; 0x01
    32cc:	82 81       	ldd	r24, Z+2	; 0x02
    32ce:	93 81       	ldd	r25, Z+3	; 0x03
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	40 e8       	ldi	r20, 0x80	; 128
    32d6:	5f e3       	ldi	r21, 0x3F	; 63
    32d8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    32dc:	88 23       	and	r24, r24
    32de:	44 f4       	brge	.+16     	; 0x32f0 <LCD_VidSendData+0x4f2>
		__ticks = 1;
    32e0:	fe 01       	movw	r30, r28
    32e2:	e5 5b       	subi	r30, 0xB5	; 181
    32e4:	ff 4f       	sbci	r31, 0xFF	; 255
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	91 83       	std	Z+1, r25	; 0x01
    32ec:	80 83       	st	Z, r24
    32ee:	64 c0       	rjmp	.+200    	; 0x33b8 <LCD_VidSendData+0x5ba>
	else if (__tmp > 65535)
    32f0:	fe 01       	movw	r30, r28
    32f2:	e3 5b       	subi	r30, 0xB3	; 179
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	60 81       	ld	r22, Z
    32f8:	71 81       	ldd	r23, Z+1	; 0x01
    32fa:	82 81       	ldd	r24, Z+2	; 0x02
    32fc:	93 81       	ldd	r25, Z+3	; 0x03
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	0c f0       	brlt	.+2      	; 0x3310 <LCD_VidSendData+0x512>
    330e:	43 c0       	rjmp	.+134    	; 0x3396 <LCD_VidSendData+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3310:	fe 01       	movw	r30, r28
    3312:	ef 5a       	subi	r30, 0xAF	; 175
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	60 81       	ld	r22, Z
    3318:	71 81       	ldd	r23, Z+1	; 0x01
    331a:	82 81       	ldd	r24, Z+2	; 0x02
    331c:	93 81       	ldd	r25, Z+3	; 0x03
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	40 e2       	ldi	r20, 0x20	; 32
    3324:	51 e4       	ldi	r21, 0x41	; 65
    3326:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	8e 01       	movw	r16, r28
    3330:	05 5b       	subi	r16, 0xB5	; 181
    3332:	1f 4f       	sbci	r17, 0xFF	; 255
    3334:	bc 01       	movw	r22, r24
    3336:	cd 01       	movw	r24, r26
    3338:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	f8 01       	movw	r30, r16
    3342:	91 83       	std	Z+1, r25	; 0x01
    3344:	80 83       	st	Z, r24
    3346:	1f c0       	rjmp	.+62     	; 0x3386 <LCD_VidSendData+0x588>
    3348:	fe 01       	movw	r30, r28
    334a:	e7 5b       	subi	r30, 0xB7	; 183
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	88 ec       	ldi	r24, 0xC8	; 200
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	91 83       	std	Z+1, r25	; 0x01
    3354:	80 83       	st	Z, r24
    3356:	fe 01       	movw	r30, r28
    3358:	e7 5b       	subi	r30, 0xB7	; 183
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	80 81       	ld	r24, Z
    335e:	91 81       	ldd	r25, Z+1	; 0x01
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <LCD_VidSendData+0x562>
    3364:	fe 01       	movw	r30, r28
    3366:	e7 5b       	subi	r30, 0xB7	; 183
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	91 83       	std	Z+1, r25	; 0x01
    336c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336e:	de 01       	movw	r26, r28
    3370:	a5 5b       	subi	r26, 0xB5	; 181
    3372:	bf 4f       	sbci	r27, 0xFF	; 255
    3374:	fe 01       	movw	r30, r28
    3376:	e5 5b       	subi	r30, 0xB5	; 181
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	80 81       	ld	r24, Z
    337c:	91 81       	ldd	r25, Z+1	; 0x01
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	11 96       	adiw	r26, 0x01	; 1
    3382:	9c 93       	st	X, r25
    3384:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3386:	fe 01       	movw	r30, r28
    3388:	e5 5b       	subi	r30, 0xB5	; 181
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	80 81       	ld	r24, Z
    338e:	91 81       	ldd	r25, Z+1	; 0x01
    3390:	00 97       	sbiw	r24, 0x00	; 0
    3392:	d1 f6       	brne	.-76     	; 0x3348 <LCD_VidSendData+0x54a>
    3394:	27 c0       	rjmp	.+78     	; 0x33e4 <LCD_VidSendData+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3396:	8e 01       	movw	r16, r28
    3398:	05 5b       	subi	r16, 0xB5	; 181
    339a:	1f 4f       	sbci	r17, 0xFF	; 255
    339c:	fe 01       	movw	r30, r28
    339e:	e3 5b       	subi	r30, 0xB3	; 179
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	f8 01       	movw	r30, r16
    33b4:	91 83       	std	Z+1, r25	; 0x01
    33b6:	80 83       	st	Z, r24
    33b8:	de 01       	movw	r26, r28
    33ba:	a9 5b       	subi	r26, 0xB9	; 185
    33bc:	bf 4f       	sbci	r27, 0xFF	; 255
    33be:	fe 01       	movw	r30, r28
    33c0:	e5 5b       	subi	r30, 0xB5	; 181
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	80 81       	ld	r24, Z
    33c6:	91 81       	ldd	r25, Z+1	; 0x01
    33c8:	8d 93       	st	X+, r24
    33ca:	9c 93       	st	X, r25
    33cc:	fe 01       	movw	r30, r28
    33ce:	e9 5b       	subi	r30, 0xB9	; 185
    33d0:	ff 4f       	sbci	r31, 0xFF	; 255
    33d2:	80 81       	ld	r24, Z
    33d4:	91 81       	ldd	r25, Z+1	; 0x01
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <LCD_VidSendData+0x5d8>
    33da:	fe 01       	movw	r30, r28
    33dc:	e9 5b       	subi	r30, 0xB9	; 185
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	91 83       	std	Z+1, r25	; 0x01
    33e2:	80 83       	st	Z, r24
#else
	DIO_voidPLaceLastnipple(LCD_DATA_CONNECTED_PORT, Copy_U8Data);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(Control_Port, EN,LOW);
    33e4:	82 e0       	ldi	r24, 0x02	; 2
    33e6:	61 e0       	ldi	r22, 0x01	; 1
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
    33ee:	fe 01       	movw	r30, r28
    33f0:	ed 5b       	subi	r30, 0xBD	; 189
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	a0 e8       	ldi	r26, 0x80	; 128
    33fa:	bf e3       	ldi	r27, 0x3F	; 63
    33fc:	80 83       	st	Z, r24
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	a2 83       	std	Z+2, r26	; 0x02
    3402:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3404:	8e 01       	movw	r16, r28
    3406:	01 5c       	subi	r16, 0xC1	; 193
    3408:	1f 4f       	sbci	r17, 0xFF	; 255
    340a:	fe 01       	movw	r30, r28
    340c:	ed 5b       	subi	r30, 0xBD	; 189
    340e:	ff 4f       	sbci	r31, 0xFF	; 255
    3410:	60 81       	ld	r22, Z
    3412:	71 81       	ldd	r23, Z+1	; 0x01
    3414:	82 81       	ldd	r24, Z+2	; 0x02
    3416:	93 81       	ldd	r25, Z+3	; 0x03
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	4a ef       	ldi	r20, 0xFA	; 250
    341e:	54 e4       	ldi	r21, 0x44	; 68
    3420:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	f8 01       	movw	r30, r16
    342a:	80 83       	st	Z, r24
    342c:	91 83       	std	Z+1, r25	; 0x01
    342e:	a2 83       	std	Z+2, r26	; 0x02
    3430:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3432:	fe 01       	movw	r30, r28
    3434:	ff 96       	adiw	r30, 0x3f	; 63
    3436:	60 81       	ld	r22, Z
    3438:	71 81       	ldd	r23, Z+1	; 0x01
    343a:	82 81       	ldd	r24, Z+2	; 0x02
    343c:	93 81       	ldd	r25, Z+3	; 0x03
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	40 e8       	ldi	r20, 0x80	; 128
    3444:	5f e3       	ldi	r21, 0x3F	; 63
    3446:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    344a:	88 23       	and	r24, r24
    344c:	2c f4       	brge	.+10     	; 0x3458 <LCD_VidSendData+0x65a>
		__ticks = 1;
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	9e af       	std	Y+62, r25	; 0x3e
    3454:	8d af       	std	Y+61, r24	; 0x3d
    3456:	46 c0       	rjmp	.+140    	; 0x34e4 <LCD_VidSendData+0x6e6>
	else if (__tmp > 65535)
    3458:	fe 01       	movw	r30, r28
    345a:	ff 96       	adiw	r30, 0x3f	; 63
    345c:	60 81       	ld	r22, Z
    345e:	71 81       	ldd	r23, Z+1	; 0x01
    3460:	82 81       	ldd	r24, Z+2	; 0x02
    3462:	93 81       	ldd	r25, Z+3	; 0x03
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	3f ef       	ldi	r19, 0xFF	; 255
    3468:	4f e7       	ldi	r20, 0x7F	; 127
    346a:	57 e4       	ldi	r21, 0x47	; 71
    346c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3470:	18 16       	cp	r1, r24
    3472:	64 f5       	brge	.+88     	; 0x34cc <LCD_VidSendData+0x6ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3474:	fe 01       	movw	r30, r28
    3476:	ed 5b       	subi	r30, 0xBD	; 189
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	60 81       	ld	r22, Z
    347c:	71 81       	ldd	r23, Z+1	; 0x01
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	93 81       	ldd	r25, Z+3	; 0x03
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e2       	ldi	r20, 0x20	; 32
    3488:	51 e4       	ldi	r21, 0x41	; 65
    348a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	9e af       	std	Y+62, r25	; 0x3e
    34a0:	8d af       	std	Y+61, r24	; 0x3d
    34a2:	0f c0       	rjmp	.+30     	; 0x34c2 <LCD_VidSendData+0x6c4>
    34a4:	88 ec       	ldi	r24, 0xC8	; 200
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	9c af       	std	Y+60, r25	; 0x3c
    34aa:	8b af       	std	Y+59, r24	; 0x3b
    34ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    34ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <LCD_VidSendData+0x6b2>
    34b4:	9c af       	std	Y+60, r25	; 0x3c
    34b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    34ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	9e af       	std	Y+62, r25	; 0x3e
    34c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    34c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	69 f7       	brne	.-38     	; 0x34a4 <LCD_VidSendData+0x6a6>
    34ca:	16 c0       	rjmp	.+44     	; 0x34f8 <LCD_VidSendData+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34cc:	fe 01       	movw	r30, r28
    34ce:	ff 96       	adiw	r30, 0x3f	; 63
    34d0:	60 81       	ld	r22, Z
    34d2:	71 81       	ldd	r23, Z+1	; 0x01
    34d4:	82 81       	ldd	r24, Z+2	; 0x02
    34d6:	93 81       	ldd	r25, Z+3	; 0x03
    34d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	9e af       	std	Y+62, r25	; 0x3e
    34e2:	8d af       	std	Y+61, r24	; 0x3d
    34e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    34e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    34e8:	9a af       	std	Y+58, r25	; 0x3a
    34ea:	89 af       	std	Y+57, r24	; 0x39
    34ec:	89 ad       	ldd	r24, Y+57	; 0x39
    34ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <LCD_VidSendData+0x6f2>
    34f4:	9a af       	std	Y+58, r25	; 0x3a
    34f6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_voidSetPinValue(Control_Port, EN,HIGH);
    34f8:	82 e0       	ldi	r24, 0x02	; 2
    34fa:	61 e0       	ldi	r22, 0x01	; 1
    34fc:	41 e0       	ldi	r20, 0x01	; 1
    34fe:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	a0 e8       	ldi	r26, 0x80	; 128
    3508:	bf e3       	ldi	r27, 0x3F	; 63
    350a:	8d ab       	std	Y+53, r24	; 0x35
    350c:	9e ab       	std	Y+54, r25	; 0x36
    350e:	af ab       	std	Y+55, r26	; 0x37
    3510:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3512:	6d a9       	ldd	r22, Y+53	; 0x35
    3514:	7e a9       	ldd	r23, Y+54	; 0x36
    3516:	8f a9       	ldd	r24, Y+55	; 0x37
    3518:	98 ad       	ldd	r25, Y+56	; 0x38
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	4a ef       	ldi	r20, 0xFA	; 250
    3520:	54 e4       	ldi	r21, 0x44	; 68
    3522:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	89 ab       	std	Y+49, r24	; 0x31
    352c:	9a ab       	std	Y+50, r25	; 0x32
    352e:	ab ab       	std	Y+51, r26	; 0x33
    3530:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3532:	69 a9       	ldd	r22, Y+49	; 0x31
    3534:	7a a9       	ldd	r23, Y+50	; 0x32
    3536:	8b a9       	ldd	r24, Y+51	; 0x33
    3538:	9c a9       	ldd	r25, Y+52	; 0x34
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e8       	ldi	r20, 0x80	; 128
    3540:	5f e3       	ldi	r21, 0x3F	; 63
    3542:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3546:	88 23       	and	r24, r24
    3548:	2c f4       	brge	.+10     	; 0x3554 <LCD_VidSendData+0x756>
		__ticks = 1;
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	98 ab       	std	Y+48, r25	; 0x30
    3550:	8f a7       	std	Y+47, r24	; 0x2f
    3552:	3f c0       	rjmp	.+126    	; 0x35d2 <LCD_VidSendData+0x7d4>
	else if (__tmp > 65535)
    3554:	69 a9       	ldd	r22, Y+49	; 0x31
    3556:	7a a9       	ldd	r23, Y+50	; 0x32
    3558:	8b a9       	ldd	r24, Y+51	; 0x33
    355a:	9c a9       	ldd	r25, Y+52	; 0x34
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	3f ef       	ldi	r19, 0xFF	; 255
    3560:	4f e7       	ldi	r20, 0x7F	; 127
    3562:	57 e4       	ldi	r21, 0x47	; 71
    3564:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3568:	18 16       	cp	r1, r24
    356a:	4c f5       	brge	.+82     	; 0x35be <LCD_VidSendData+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356c:	6d a9       	ldd	r22, Y+53	; 0x35
    356e:	7e a9       	ldd	r23, Y+54	; 0x36
    3570:	8f a9       	ldd	r24, Y+55	; 0x37
    3572:	98 ad       	ldd	r25, Y+56	; 0x38
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	40 e2       	ldi	r20, 0x20	; 32
    357a:	51 e4       	ldi	r21, 0x41	; 65
    357c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	bc 01       	movw	r22, r24
    3586:	cd 01       	movw	r24, r26
    3588:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	98 ab       	std	Y+48, r25	; 0x30
    3592:	8f a7       	std	Y+47, r24	; 0x2f
    3594:	0f c0       	rjmp	.+30     	; 0x35b4 <LCD_VidSendData+0x7b6>
    3596:	88 ec       	ldi	r24, 0xC8	; 200
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	9e a7       	std	Y+46, r25	; 0x2e
    359c:	8d a7       	std	Y+45, r24	; 0x2d
    359e:	8d a5       	ldd	r24, Y+45	; 0x2d
    35a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	f1 f7       	brne	.-4      	; 0x35a2 <LCD_VidSendData+0x7a4>
    35a6:	9e a7       	std	Y+46, r25	; 0x2e
    35a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    35ac:	98 a9       	ldd	r25, Y+48	; 0x30
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	98 ab       	std	Y+48, r25	; 0x30
    35b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    35b6:	98 a9       	ldd	r25, Y+48	; 0x30
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	69 f7       	brne	.-38     	; 0x3596 <LCD_VidSendData+0x798>
    35bc:	14 c0       	rjmp	.+40     	; 0x35e6 <LCD_VidSendData+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35be:	69 a9       	ldd	r22, Y+49	; 0x31
    35c0:	7a a9       	ldd	r23, Y+50	; 0x32
    35c2:	8b a9       	ldd	r24, Y+51	; 0x33
    35c4:	9c a9       	ldd	r25, Y+52	; 0x34
    35c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	98 ab       	std	Y+48, r25	; 0x30
    35d0:	8f a7       	std	Y+47, r24	; 0x2f
    35d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    35d4:	98 a9       	ldd	r25, Y+48	; 0x30
    35d6:	9c a7       	std	Y+44, r25	; 0x2c
    35d8:	8b a7       	std	Y+43, r24	; 0x2b
    35da:	8b a5       	ldd	r24, Y+43	; 0x2b
    35dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	f1 f7       	brne	.-4      	; 0x35de <LCD_VidSendData+0x7e0>
    35e2:	9c a7       	std	Y+44, r25	; 0x2c
    35e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	DIO_voidPlaceFirstNipple(Data_Port,  Copy_uint8_tData );
    35e6:	fe 01       	movw	r30, r28
    35e8:	e1 58       	subi	r30, 0x81	; 129
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	82 e0       	ldi	r24, 0x02	; 2
    35ee:	60 81       	ld	r22, Z
    35f0:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_voidPlaceFirstNipple>
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	a0 e8       	ldi	r26, 0x80	; 128
    35fa:	bf e3       	ldi	r27, 0x3F	; 63
    35fc:	8f a3       	std	Y+39, r24	; 0x27
    35fe:	98 a7       	std	Y+40, r25	; 0x28
    3600:	a9 a7       	std	Y+41, r26	; 0x29
    3602:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3604:	6f a1       	ldd	r22, Y+39	; 0x27
    3606:	78 a5       	ldd	r23, Y+40	; 0x28
    3608:	89 a5       	ldd	r24, Y+41	; 0x29
    360a:	9a a5       	ldd	r25, Y+42	; 0x2a
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	4a ef       	ldi	r20, 0xFA	; 250
    3612:	54 e4       	ldi	r21, 0x44	; 68
    3614:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	8b a3       	std	Y+35, r24	; 0x23
    361e:	9c a3       	std	Y+36, r25	; 0x24
    3620:	ad a3       	std	Y+37, r26	; 0x25
    3622:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3624:	6b a1       	ldd	r22, Y+35	; 0x23
    3626:	7c a1       	ldd	r23, Y+36	; 0x24
    3628:	8d a1       	ldd	r24, Y+37	; 0x25
    362a:	9e a1       	ldd	r25, Y+38	; 0x26
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	40 e8       	ldi	r20, 0x80	; 128
    3632:	5f e3       	ldi	r21, 0x3F	; 63
    3634:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3638:	88 23       	and	r24, r24
    363a:	2c f4       	brge	.+10     	; 0x3646 <LCD_VidSendData+0x848>
		__ticks = 1;
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	9a a3       	std	Y+34, r25	; 0x22
    3642:	89 a3       	std	Y+33, r24	; 0x21
    3644:	3f c0       	rjmp	.+126    	; 0x36c4 <LCD_VidSendData+0x8c6>
	else if (__tmp > 65535)
    3646:	6b a1       	ldd	r22, Y+35	; 0x23
    3648:	7c a1       	ldd	r23, Y+36	; 0x24
    364a:	8d a1       	ldd	r24, Y+37	; 0x25
    364c:	9e a1       	ldd	r25, Y+38	; 0x26
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	3f ef       	ldi	r19, 0xFF	; 255
    3652:	4f e7       	ldi	r20, 0x7F	; 127
    3654:	57 e4       	ldi	r21, 0x47	; 71
    3656:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    365a:	18 16       	cp	r1, r24
    365c:	4c f5       	brge	.+82     	; 0x36b0 <LCD_VidSendData+0x8b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365e:	6f a1       	ldd	r22, Y+39	; 0x27
    3660:	78 a5       	ldd	r23, Y+40	; 0x28
    3662:	89 a5       	ldd	r24, Y+41	; 0x29
    3664:	9a a5       	ldd	r25, Y+42	; 0x2a
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	40 e2       	ldi	r20, 0x20	; 32
    366c:	51 e4       	ldi	r21, 0x41	; 65
    366e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	bc 01       	movw	r22, r24
    3678:	cd 01       	movw	r24, r26
    367a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	9a a3       	std	Y+34, r25	; 0x22
    3684:	89 a3       	std	Y+33, r24	; 0x21
    3686:	0f c0       	rjmp	.+30     	; 0x36a6 <LCD_VidSendData+0x8a8>
    3688:	88 ec       	ldi	r24, 0xC8	; 200
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	98 a3       	std	Y+32, r25	; 0x20
    368e:	8f 8f       	std	Y+31, r24	; 0x1f
    3690:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3692:	98 a1       	ldd	r25, Y+32	; 0x20
    3694:	01 97       	sbiw	r24, 0x01	; 1
    3696:	f1 f7       	brne	.-4      	; 0x3694 <LCD_VidSendData+0x896>
    3698:	98 a3       	std	Y+32, r25	; 0x20
    369a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    369c:	89 a1       	ldd	r24, Y+33	; 0x21
    369e:	9a a1       	ldd	r25, Y+34	; 0x22
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	9a a3       	std	Y+34, r25	; 0x22
    36a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a6:	89 a1       	ldd	r24, Y+33	; 0x21
    36a8:	9a a1       	ldd	r25, Y+34	; 0x22
    36aa:	00 97       	sbiw	r24, 0x00	; 0
    36ac:	69 f7       	brne	.-38     	; 0x3688 <LCD_VidSendData+0x88a>
    36ae:	14 c0       	rjmp	.+40     	; 0x36d8 <LCD_VidSendData+0x8da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b0:	6b a1       	ldd	r22, Y+35	; 0x23
    36b2:	7c a1       	ldd	r23, Y+36	; 0x24
    36b4:	8d a1       	ldd	r24, Y+37	; 0x25
    36b6:	9e a1       	ldd	r25, Y+38	; 0x26
    36b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	9a a3       	std	Y+34, r25	; 0x22
    36c2:	89 a3       	std	Y+33, r24	; 0x21
    36c4:	89 a1       	ldd	r24, Y+33	; 0x21
    36c6:	9a a1       	ldd	r25, Y+34	; 0x22
    36c8:	9e 8f       	std	Y+30, r25	; 0x1e
    36ca:	8d 8f       	std	Y+29, r24	; 0x1d
    36cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36d0:	01 97       	sbiw	r24, 0x01	; 1
    36d2:	f1 f7       	brne	.-4      	; 0x36d0 <LCD_VidSendData+0x8d2>
    36d4:	9e 8f       	std	Y+30, r25	; 0x1e
    36d6:	8d 8f       	std	Y+29, r24	; 0x1d
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	a0 e8       	ldi	r26, 0x80	; 128
    36de:	bf e3       	ldi	r27, 0x3F	; 63
    36e0:	89 8f       	std	Y+25, r24	; 0x19
    36e2:	9a 8f       	std	Y+26, r25	; 0x1a
    36e4:	ab 8f       	std	Y+27, r26	; 0x1b
    36e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e8:	69 8d       	ldd	r22, Y+25	; 0x19
    36ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	4a ef       	ldi	r20, 0xFA	; 250
    36f6:	54 e4       	ldi	r21, 0x44	; 68
    36f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	8d 8b       	std	Y+21, r24	; 0x15
    3702:	9e 8b       	std	Y+22, r25	; 0x16
    3704:	af 8b       	std	Y+23, r26	; 0x17
    3706:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3708:	6d 89       	ldd	r22, Y+21	; 0x15
    370a:	7e 89       	ldd	r23, Y+22	; 0x16
    370c:	8f 89       	ldd	r24, Y+23	; 0x17
    370e:	98 8d       	ldd	r25, Y+24	; 0x18
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	40 e8       	ldi	r20, 0x80	; 128
    3716:	5f e3       	ldi	r21, 0x3F	; 63
    3718:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    371c:	88 23       	and	r24, r24
    371e:	2c f4       	brge	.+10     	; 0x372a <LCD_VidSendData+0x92c>
		__ticks = 1;
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	9c 8b       	std	Y+20, r25	; 0x14
    3726:	8b 8b       	std	Y+19, r24	; 0x13
    3728:	3f c0       	rjmp	.+126    	; 0x37a8 <LCD_VidSendData+0x9aa>
	else if (__tmp > 65535)
    372a:	6d 89       	ldd	r22, Y+21	; 0x15
    372c:	7e 89       	ldd	r23, Y+22	; 0x16
    372e:	8f 89       	ldd	r24, Y+23	; 0x17
    3730:	98 8d       	ldd	r25, Y+24	; 0x18
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	3f ef       	ldi	r19, 0xFF	; 255
    3736:	4f e7       	ldi	r20, 0x7F	; 127
    3738:	57 e4       	ldi	r21, 0x47	; 71
    373a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    373e:	18 16       	cp	r1, r24
    3740:	4c f5       	brge	.+82     	; 0x3794 <LCD_VidSendData+0x996>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3742:	69 8d       	ldd	r22, Y+25	; 0x19
    3744:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3746:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3748:	9c 8d       	ldd	r25, Y+28	; 0x1c
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	40 e2       	ldi	r20, 0x20	; 32
    3750:	51 e4       	ldi	r21, 0x41	; 65
    3752:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	bc 01       	movw	r22, r24
    375c:	cd 01       	movw	r24, r26
    375e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	9c 8b       	std	Y+20, r25	; 0x14
    3768:	8b 8b       	std	Y+19, r24	; 0x13
    376a:	0f c0       	rjmp	.+30     	; 0x378a <LCD_VidSendData+0x98c>
    376c:	88 ec       	ldi	r24, 0xC8	; 200
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	9a 8b       	std	Y+18, r25	; 0x12
    3772:	89 8b       	std	Y+17, r24	; 0x11
    3774:	89 89       	ldd	r24, Y+17	; 0x11
    3776:	9a 89       	ldd	r25, Y+18	; 0x12
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	f1 f7       	brne	.-4      	; 0x3778 <LCD_VidSendData+0x97a>
    377c:	9a 8b       	std	Y+18, r25	; 0x12
    377e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3780:	8b 89       	ldd	r24, Y+19	; 0x13
    3782:	9c 89       	ldd	r25, Y+20	; 0x14
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	9c 8b       	std	Y+20, r25	; 0x14
    3788:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    378a:	8b 89       	ldd	r24, Y+19	; 0x13
    378c:	9c 89       	ldd	r25, Y+20	; 0x14
    378e:	00 97       	sbiw	r24, 0x00	; 0
    3790:	69 f7       	brne	.-38     	; 0x376c <LCD_VidSendData+0x96e>
    3792:	14 c0       	rjmp	.+40     	; 0x37bc <LCD_VidSendData+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3794:	6d 89       	ldd	r22, Y+21	; 0x15
    3796:	7e 89       	ldd	r23, Y+22	; 0x16
    3798:	8f 89       	ldd	r24, Y+23	; 0x17
    379a:	98 8d       	ldd	r25, Y+24	; 0x18
    379c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	9c 8b       	std	Y+20, r25	; 0x14
    37a6:	8b 8b       	std	Y+19, r24	; 0x13
    37a8:	8b 89       	ldd	r24, Y+19	; 0x13
    37aa:	9c 89       	ldd	r25, Y+20	; 0x14
    37ac:	98 8b       	std	Y+16, r25	; 0x10
    37ae:	8f 87       	std	Y+15, r24	; 0x0f
    37b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    37b2:	98 89       	ldd	r25, Y+16	; 0x10
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	f1 f7       	brne	.-4      	; 0x37b4 <LCD_VidSendData+0x9b6>
    37b8:	98 8b       	std	Y+16, r25	; 0x10
    37ba:	8f 87       	std	Y+15, r24	; 0x0f
#else
	DIO_voidSetFirstNipple(LCD_DATA_CONNECTED_PORT,  Copy_U8Data);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(Control_Port, EN,LOW);
    37bc:	82 e0       	ldi	r24, 0x02	; 2
    37be:	61 e0       	ldi	r22, 0x01	; 1
    37c0:	40 e0       	ldi	r20, 0x00	; 0
    37c2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	a0 e8       	ldi	r26, 0x80	; 128
    37cc:	bf e3       	ldi	r27, 0x3F	; 63
    37ce:	8b 87       	std	Y+11, r24	; 0x0b
    37d0:	9c 87       	std	Y+12, r25	; 0x0c
    37d2:	ad 87       	std	Y+13, r26	; 0x0d
    37d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37da:	8d 85       	ldd	r24, Y+13	; 0x0d
    37dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	4a ef       	ldi	r20, 0xFA	; 250
    37e4:	54 e4       	ldi	r21, 0x44	; 68
    37e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	8f 83       	std	Y+7, r24	; 0x07
    37f0:	98 87       	std	Y+8, r25	; 0x08
    37f2:	a9 87       	std	Y+9, r26	; 0x09
    37f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37f6:	6f 81       	ldd	r22, Y+7	; 0x07
    37f8:	78 85       	ldd	r23, Y+8	; 0x08
    37fa:	89 85       	ldd	r24, Y+9	; 0x09
    37fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e8       	ldi	r20, 0x80	; 128
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    380a:	88 23       	and	r24, r24
    380c:	2c f4       	brge	.+10     	; 0x3818 <LCD_VidSendData+0xa1a>
		__ticks = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
    3816:	3f c0       	rjmp	.+126    	; 0x3896 <LCD_VidSendData+0xa98>
	else if (__tmp > 65535)
    3818:	6f 81       	ldd	r22, Y+7	; 0x07
    381a:	78 85       	ldd	r23, Y+8	; 0x08
    381c:	89 85       	ldd	r24, Y+9	; 0x09
    381e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	57 e4       	ldi	r21, 0x47	; 71
    3828:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	4c f5       	brge	.+82     	; 0x3882 <LCD_VidSendData+0xa84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	6b 85       	ldd	r22, Y+11	; 0x0b
    3832:	7c 85       	ldd	r23, Y+12	; 0x0c
    3834:	8d 85       	ldd	r24, Y+13	; 0x0d
    3836:	9e 85       	ldd	r25, Y+14	; 0x0e
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9e 83       	std	Y+6, r25	; 0x06
    3856:	8d 83       	std	Y+5, r24	; 0x05
    3858:	0f c0       	rjmp	.+30     	; 0x3878 <LCD_VidSendData+0xa7a>
    385a:	88 ec       	ldi	r24, 0xC8	; 200
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	9c 83       	std	Y+4, r25	; 0x04
    3860:	8b 83       	std	Y+3, r24	; 0x03
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	9c 81       	ldd	r25, Y+4	; 0x04
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <LCD_VidSendData+0xa68>
    386a:	9c 83       	std	Y+4, r25	; 0x04
    386c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	9e 81       	ldd	r25, Y+6	; 0x06
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	9e 83       	std	Y+6, r25	; 0x06
    3876:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3878:	8d 81       	ldd	r24, Y+5	; 0x05
    387a:	9e 81       	ldd	r25, Y+6	; 0x06
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	69 f7       	brne	.-38     	; 0x385a <LCD_VidSendData+0xa5c>
    3880:	14 c0       	rjmp	.+40     	; 0x38aa <LCD_VidSendData+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3882:	6f 81       	ldd	r22, Y+7	; 0x07
    3884:	78 85       	ldd	r23, Y+8	; 0x08
    3886:	89 85       	ldd	r24, Y+9	; 0x09
    3888:	9a 85       	ldd	r25, Y+10	; 0x0a
    388a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	8d 81       	ldd	r24, Y+5	; 0x05
    3898:	9e 81       	ldd	r25, Y+6	; 0x06
    389a:	9a 83       	std	Y+2, r25	; 0x02
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	9a 81       	ldd	r25, Y+2	; 0x02
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <LCD_VidSendData+0xaa4>
    38a6:	9a 83       	std	Y+2, r25	; 0x02
    38a8:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortValue (Data_Port,Copy_uint8_tData);  //PORT Data
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue (Control_Port,EN,LOW);
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    38aa:	c1 58       	subi	r28, 0x81	; 129
    38ac:	df 4f       	sbci	r29, 0xFF	; 255
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	cf 91       	pop	r28
    38ba:	df 91       	pop	r29
    38bc:	1f 91       	pop	r17
    38be:	0f 91       	pop	r16
    38c0:	08 95       	ret

000038c2 <LCD_VidSendNumber>:


void LCD_VidSendNumber(uint32_t num){
    38c2:	1f 93       	push	r17
    38c4:	df 93       	push	r29
    38c6:	cf 93       	push	r28
    38c8:	00 d0       	rcall	.+0      	; 0x38ca <LCD_VidSendNumber+0x8>
    38ca:	00 d0       	rcall	.+0      	; 0x38cc <LCD_VidSendNumber+0xa>
    38cc:	00 d0       	rcall	.+0      	; 0x38ce <LCD_VidSendNumber+0xc>
    38ce:	cd b7       	in	r28, 0x3d	; 61
    38d0:	de b7       	in	r29, 0x3e	; 62
    38d2:	6b 83       	std	Y+3, r22	; 0x03
    38d4:	7c 83       	std	Y+4, r23	; 0x04
    38d6:	8d 83       	std	Y+5, r24	; 0x05
    38d8:	9e 83       	std	Y+6, r25	; 0x06
    38da:	30 c0       	rjmp	.+96     	; 0x393c <LCD_VidSendNumber+0x7a>
	uint8_t rev;

	while (num>0){

		uint8_t rev;
		rev=(rev*10)+(num%10);
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	88 2f       	mov	r24, r24
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	9c 01       	movw	r18, r24
    38e4:	22 0f       	add	r18, r18
    38e6:	33 1f       	adc	r19, r19
    38e8:	c9 01       	movw	r24, r18
    38ea:	88 0f       	add	r24, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	88 0f       	add	r24, r24
    38f0:	99 1f       	adc	r25, r25
    38f2:	82 0f       	add	r24, r18
    38f4:	93 1f       	adc	r25, r19
    38f6:	18 2f       	mov	r17, r24
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
    38fa:	9c 81       	ldd	r25, Y+4	; 0x04
    38fc:	ad 81       	ldd	r26, Y+5	; 0x05
    38fe:	be 81       	ldd	r27, Y+6	; 0x06
    3900:	2a e0       	ldi	r18, 0x0A	; 10
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	40 e0       	ldi	r20, 0x00	; 0
    3906:	50 e0       	ldi	r21, 0x00	; 0
    3908:	bc 01       	movw	r22, r24
    390a:	cd 01       	movw	r24, r26
    390c:	0e 94 98 21 	call	0x4330	; 0x4330 <__udivmodsi4>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	81 0f       	add	r24, r17
    3916:	89 83       	std	Y+1, r24	; 0x01
		num=num/10;
    3918:	8b 81       	ldd	r24, Y+3	; 0x03
    391a:	9c 81       	ldd	r25, Y+4	; 0x04
    391c:	ad 81       	ldd	r26, Y+5	; 0x05
    391e:	be 81       	ldd	r27, Y+6	; 0x06
    3920:	2a e0       	ldi	r18, 0x0A	; 10
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	40 e0       	ldi	r20, 0x00	; 0
    3926:	50 e0       	ldi	r21, 0x00	; 0
    3928:	bc 01       	movw	r22, r24
    392a:	cd 01       	movw	r24, r26
    392c:	0e 94 98 21 	call	0x4330	; 0x4330 <__udivmodsi4>
    3930:	da 01       	movw	r26, r20
    3932:	c9 01       	movw	r24, r18
    3934:	8b 83       	std	Y+3, r24	; 0x03
    3936:	9c 83       	std	Y+4, r25	; 0x04
    3938:	ad 83       	std	Y+5, r26	; 0x05
    393a:	be 83       	std	Y+6, r27	; 0x06


void LCD_VidSendNumber(uint32_t num){
	uint8_t rev;

	while (num>0){
    393c:	8b 81       	ldd	r24, Y+3	; 0x03
    393e:	9c 81       	ldd	r25, Y+4	; 0x04
    3940:	ad 81       	ldd	r26, Y+5	; 0x05
    3942:	be 81       	ldd	r27, Y+6	; 0x06
    3944:	00 97       	sbiw	r24, 0x00	; 0
    3946:	a1 05       	cpc	r26, r1
    3948:	b1 05       	cpc	r27, r1
    394a:	41 f6       	brne	.-112    	; 0x38dc <LCD_VidSendNumber+0x1a>
    394c:	0f c0       	rjmp	.+30     	; 0x396c <LCD_VidSendNumber+0xaa>
	}


	while(rev>0){

		LCD_VidSendData(48+(rev%10));
    394e:	8a 81       	ldd	r24, Y+2	; 0x02
    3950:	9a e0       	ldi	r25, 0x0A	; 10
    3952:	69 2f       	mov	r22, r25
    3954:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodqi4>
    3958:	89 2f       	mov	r24, r25
    395a:	80 5d       	subi	r24, 0xD0	; 208
    395c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_VidSendData>
		rev=rev/10;
    3960:	8a 81       	ldd	r24, Y+2	; 0x02
    3962:	9a e0       	ldi	r25, 0x0A	; 10
    3964:	69 2f       	mov	r22, r25
    3966:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodqi4>
    396a:	8a 83       	std	Y+2, r24	; 0x02
		num=num/10;

	}


	while(rev>0){
    396c:	8a 81       	ldd	r24, Y+2	; 0x02
    396e:	88 23       	and	r24, r24
    3970:	71 f7       	brne	.-36     	; 0x394e <LCD_VidSendNumber+0x8c>
		rev=rev/10;

	}


}
    3972:	26 96       	adiw	r28, 0x06	; 6
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	1f 91       	pop	r17
    3984:	08 95       	ret

00003986 <LCD_VidWriteString>:

void LCD_VidWriteString(char *str)
{
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	00 d0       	rcall	.+0      	; 0x398c <LCD_VidWriteString+0x6>
    398c:	0f 92       	push	r0
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	9b 83       	std	Y+3, r25	; 0x03
    3994:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
    3996:	19 82       	std	Y+1, r1	; 0x01
    3998:	0e c0       	rjmp	.+28     	; 0x39b6 <LCD_VidWriteString+0x30>
	while(str[i]!='\0'){
		// loop will go on till the NULL character in the string
		LCD_VidSendData(str[i]); // sending data on LCD byte by byte
    399a:	89 81       	ldd	r24, Y+1	; 0x01
    399c:	28 2f       	mov	r18, r24
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	8a 81       	ldd	r24, Y+2	; 0x02
    39a2:	9b 81       	ldd	r25, Y+3	; 0x03
    39a4:	fc 01       	movw	r30, r24
    39a6:	e2 0f       	add	r30, r18
    39a8:	f3 1f       	adc	r31, r19
    39aa:	80 81       	ld	r24, Z
    39ac:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_VidSendData>
		i++;
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
    39b2:	8f 5f       	subi	r24, 0xFF	; 255
    39b4:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_VidWriteString(char *str)
{
	uint8_t i=0;
	while(str[i]!='\0'){
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
    39b8:	28 2f       	mov	r18, r24
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	9b 81       	ldd	r25, Y+3	; 0x03
    39c0:	fc 01       	movw	r30, r24
    39c2:	e2 0f       	add	r30, r18
    39c4:	f3 1f       	adc	r31, r19
    39c6:	80 81       	ld	r24, Z
    39c8:	88 23       	and	r24, r24
    39ca:	39 f7       	brne	.-50     	; 0x399a <LCD_VidWriteString+0x14>
		// loop will go on till the NULL character in the string
		LCD_VidSendData(str[i]); // sending data on LCD byte by byte
		i++;
	}
}
    39cc:	0f 90       	pop	r0
    39ce:	0f 90       	pop	r0
    39d0:	0f 90       	pop	r0
    39d2:	cf 91       	pop	r28
    39d4:	df 91       	pop	r29
    39d6:	08 95       	ret

000039d8 <LCD_IntegerToString>:
void LCD_IntegerToString(uint8_t copy_uint8_tnum){
    39d8:	df 93       	push	r29
    39da:	cf 93       	push	r28
    39dc:	cd b7       	in	r28, 0x3d	; 61
    39de:	de b7       	in	r29, 0x3e	; 62
    39e0:	a5 97       	sbiw	r28, 0x25	; 37
    39e2:	0f b6       	in	r0, 0x3f	; 63
    39e4:	f8 94       	cli
    39e6:	de bf       	out	0x3e, r29	; 62
    39e8:	0f be       	out	0x3f, r0	; 63
    39ea:	cd bf       	out	0x3d, r28	; 61
    39ec:	8d a3       	std	Y+37, r24	; 0x25
	uint32_t i, rem, len = 0, n;
    39ee:	1d 82       	std	Y+5, r1	; 0x05
    39f0:	1e 82       	std	Y+6, r1	; 0x06
    39f2:	1f 82       	std	Y+7, r1	; 0x07
    39f4:	18 86       	std	Y+8, r1	; 0x08
	uint8_t str[20]={0};
    39f6:	84 e1       	ldi	r24, 0x14	; 20
    39f8:	fe 01       	movw	r30, r28
    39fa:	71 96       	adiw	r30, 0x11	; 17
    39fc:	df 01       	movw	r26, r30
    39fe:	98 2f       	mov	r25, r24
    3a00:	1d 92       	st	X+, r1
    3a02:	9a 95       	dec	r25
    3a04:	e9 f7       	brne	.-6      	; 0x3a00 <LCD_IntegerToString+0x28>

	n = copy_uint8_tnum;
    3a06:	8d a1       	ldd	r24, Y+37	; 0x25
    3a08:	88 2f       	mov	r24, r24
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	a0 e0       	ldi	r26, 0x00	; 0
    3a0e:	b0 e0       	ldi	r27, 0x00	; 0
    3a10:	89 83       	std	Y+1, r24	; 0x01
    3a12:	9a 83       	std	Y+2, r25	; 0x02
    3a14:	ab 83       	std	Y+3, r26	; 0x03
    3a16:	bc 83       	std	Y+4, r27	; 0x04
    3a18:	1d c0       	rjmp	.+58     	; 0x3a54 <LCD_IntegerToString+0x7c>
	while (n != 0)
	{
		len++;
    3a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a1e:	af 81       	ldd	r26, Y+7	; 0x07
    3a20:	b8 85       	ldd	r27, Y+8	; 0x08
    3a22:	01 96       	adiw	r24, 0x01	; 1
    3a24:	a1 1d       	adc	r26, r1
    3a26:	b1 1d       	adc	r27, r1
    3a28:	8d 83       	std	Y+5, r24	; 0x05
    3a2a:	9e 83       	std	Y+6, r25	; 0x06
    3a2c:	af 83       	std	Y+7, r26	; 0x07
    3a2e:	b8 87       	std	Y+8, r27	; 0x08
		n /= 10;
    3a30:	89 81       	ldd	r24, Y+1	; 0x01
    3a32:	9a 81       	ldd	r25, Y+2	; 0x02
    3a34:	ab 81       	ldd	r26, Y+3	; 0x03
    3a36:	bc 81       	ldd	r27, Y+4	; 0x04
    3a38:	2a e0       	ldi	r18, 0x0A	; 10
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	40 e0       	ldi	r20, 0x00	; 0
    3a3e:	50 e0       	ldi	r21, 0x00	; 0
    3a40:	bc 01       	movw	r22, r24
    3a42:	cd 01       	movw	r24, r26
    3a44:	0e 94 98 21 	call	0x4330	; 0x4330 <__udivmodsi4>
    3a48:	da 01       	movw	r26, r20
    3a4a:	c9 01       	movw	r24, r18
    3a4c:	89 83       	std	Y+1, r24	; 0x01
    3a4e:	9a 83       	std	Y+2, r25	; 0x02
    3a50:	ab 83       	std	Y+3, r26	; 0x03
    3a52:	bc 83       	std	Y+4, r27	; 0x04
void LCD_IntegerToString(uint8_t copy_uint8_tnum){
	uint32_t i, rem, len = 0, n;
	uint8_t str[20]={0};

	n = copy_uint8_tnum;
	while (n != 0)
    3a54:	89 81       	ldd	r24, Y+1	; 0x01
    3a56:	9a 81       	ldd	r25, Y+2	; 0x02
    3a58:	ab 81       	ldd	r26, Y+3	; 0x03
    3a5a:	bc 81       	ldd	r27, Y+4	; 0x04
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	a1 05       	cpc	r26, r1
    3a60:	b1 05       	cpc	r27, r1
    3a62:	d9 f6       	brne	.-74     	; 0x3a1a <LCD_IntegerToString+0x42>
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    3a64:	1d 86       	std	Y+13, r1	; 0x0d
    3a66:	1e 86       	std	Y+14, r1	; 0x0e
    3a68:	1f 86       	std	Y+15, r1	; 0x0f
    3a6a:	18 8a       	std	Y+16, r1	; 0x10
    3a6c:	3a c0       	rjmp	.+116    	; 0x3ae2 <LCD_IntegerToString+0x10a>
	{
		rem = copy_uint8_tnum % 10;
    3a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a70:	9a e0       	ldi	r25, 0x0A	; 10
    3a72:	69 2f       	mov	r22, r25
    3a74:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodqi4>
    3a78:	89 2f       	mov	r24, r25
    3a7a:	88 2f       	mov	r24, r24
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	a0 e0       	ldi	r26, 0x00	; 0
    3a80:	b0 e0       	ldi	r27, 0x00	; 0
    3a82:	89 87       	std	Y+9, r24	; 0x09
    3a84:	9a 87       	std	Y+10, r25	; 0x0a
    3a86:	ab 87       	std	Y+11, r26	; 0x0b
    3a88:	bc 87       	std	Y+12, r27	; 0x0c
		copy_uint8_tnum = copy_uint8_tnum / 10;
    3a8a:	8d a1       	ldd	r24, Y+37	; 0x25
    3a8c:	9a e0       	ldi	r25, 0x0A	; 10
    3a8e:	69 2f       	mov	r22, r25
    3a90:	0e 94 8c 21 	call	0x4318	; 0x4318 <__udivmodqi4>
    3a94:	8d a3       	std	Y+37, r24	; 0x25
		str[len - (i + 1)] = rem + '0';
    3a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a98:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a9a:	af 85       	ldd	r26, Y+15	; 0x0f
    3a9c:	b8 89       	ldd	r27, Y+16	; 0x10
    3a9e:	9c 01       	movw	r18, r24
    3aa0:	ad 01       	movw	r20, r26
    3aa2:	20 95       	com	r18
    3aa4:	30 95       	com	r19
    3aa6:	40 95       	com	r20
    3aa8:	50 95       	com	r21
    3aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3aac:	9e 81       	ldd	r25, Y+6	; 0x06
    3aae:	af 81       	ldd	r26, Y+7	; 0x07
    3ab0:	b8 85       	ldd	r27, Y+8	; 0x08
    3ab2:	28 0f       	add	r18, r24
    3ab4:	39 1f       	adc	r19, r25
    3ab6:	4a 1f       	adc	r20, r26
    3ab8:	5b 1f       	adc	r21, r27
    3aba:	89 85       	ldd	r24, Y+9	; 0x09
    3abc:	68 2f       	mov	r22, r24
    3abe:	60 5d       	subi	r22, 0xD0	; 208
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	41 96       	adiw	r24, 0x11	; 17
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	e2 0f       	add	r30, r18
    3ac8:	f3 1f       	adc	r31, r19
    3aca:	60 83       	st	Z, r22
	while (n != 0)
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    3acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad0:	af 85       	ldd	r26, Y+15	; 0x0f
    3ad2:	b8 89       	ldd	r27, Y+16	; 0x10
    3ad4:	01 96       	adiw	r24, 0x01	; 1
    3ad6:	a1 1d       	adc	r26, r1
    3ad8:	b1 1d       	adc	r27, r1
    3ada:	8d 87       	std	Y+13, r24	; 0x0d
    3adc:	9e 87       	std	Y+14, r25	; 0x0e
    3ade:	af 87       	std	Y+15, r26	; 0x0f
    3ae0:	b8 8b       	std	Y+16, r27	; 0x10
    3ae2:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ae4:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ae6:	4f 85       	ldd	r20, Y+15	; 0x0f
    3ae8:	58 89       	ldd	r21, Y+16	; 0x10
    3aea:	8d 81       	ldd	r24, Y+5	; 0x05
    3aec:	9e 81       	ldd	r25, Y+6	; 0x06
    3aee:	af 81       	ldd	r26, Y+7	; 0x07
    3af0:	b8 85       	ldd	r27, Y+8	; 0x08
    3af2:	28 17       	cp	r18, r24
    3af4:	39 07       	cpc	r19, r25
    3af6:	4a 07       	cpc	r20, r26
    3af8:	5b 07       	cpc	r21, r27
    3afa:	08 f4       	brcc	.+2      	; 0x3afe <LCD_IntegerToString+0x126>
    3afc:	b8 cf       	rjmp	.-144    	; 0x3a6e <LCD_IntegerToString+0x96>
	{
		rem = copy_uint8_tnum % 10;
		copy_uint8_tnum = copy_uint8_tnum / 10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
    3afe:	8d 81       	ldd	r24, Y+5	; 0x05
    3b00:	9e 81       	ldd	r25, Y+6	; 0x06
    3b02:	af 81       	ldd	r26, Y+7	; 0x07
    3b04:	b8 85       	ldd	r27, Y+8	; 0x08
    3b06:	9e 01       	movw	r18, r28
    3b08:	2f 5e       	subi	r18, 0xEF	; 239
    3b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0c:	f9 01       	movw	r30, r18
    3b0e:	e8 0f       	add	r30, r24
    3b10:	f9 1f       	adc	r31, r25
    3b12:	10 82       	st	Z, r1
	LCD_VidWriteString(str);
    3b14:	ce 01       	movw	r24, r28
    3b16:	41 96       	adiw	r24, 0x11	; 17
    3b18:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_VidWriteString>
}
    3b1c:	a5 96       	adiw	r28, 0x25	; 37
    3b1e:	0f b6       	in	r0, 0x3f	; 63
    3b20:	f8 94       	cli
    3b22:	de bf       	out	0x3e, r29	; 62
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	cd bf       	out	0x3d, r28	; 61
    3b28:	cf 91       	pop	r28
    3b2a:	df 91       	pop	r29
    3b2c:	08 95       	ret

00003b2e <LCD_VidGoToRowColum>:

void LCD_VidGoToRowColum(uint8_t Copy_uint8_tRow,uint8_t Copy_uint8_tColum ){
    3b2e:	df 93       	push	r29
    3b30:	cf 93       	push	r28
    3b32:	00 d0       	rcall	.+0      	; 0x3b34 <LCD_VidGoToRowColum+0x6>
    3b34:	00 d0       	rcall	.+0      	; 0x3b36 <LCD_VidGoToRowColum+0x8>
    3b36:	0f 92       	push	r0
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
    3b3c:	8a 83       	std	Y+2, r24	; 0x02
    3b3e:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t address;
	switch(Copy_uint8_tRow){
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	28 2f       	mov	r18, r24
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	3d 83       	std	Y+5, r19	; 0x05
    3b48:	2c 83       	std	Y+4, r18	; 0x04
    3b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	31 f0       	breq	.+12     	; 0x3b5e <LCD_VidGoToRowColum+0x30>
    3b52:	2c 81       	ldd	r18, Y+4	; 0x04
    3b54:	3d 81       	ldd	r19, Y+5	; 0x05
    3b56:	21 30       	cpi	r18, 0x01	; 1
    3b58:	31 05       	cpc	r19, r1
    3b5a:	21 f0       	breq	.+8      	; 0x3b64 <LCD_VidGoToRowColum+0x36>
    3b5c:	06 c0       	rjmp	.+12     	; 0x3b6a <LCD_VidGoToRowColum+0x3c>
	case 0: address= Copy_uint8_tColum; break;
    3b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b60:	89 83       	std	Y+1, r24	; 0x01
    3b62:	03 c0       	rjmp	.+6      	; 0x3b6a <LCD_VidGoToRowColum+0x3c>
	case 1: address= Copy_uint8_tColum +0x40; break;
    3b64:	8b 81       	ldd	r24, Y+3	; 0x03
    3b66:	80 5c       	subi	r24, 0xC0	; 192
    3b68:	89 83       	std	Y+1, r24	; 0x01
	}

	LCD_VidSendCommand(address|0x80);
    3b6a:	89 81       	ldd	r24, Y+1	; 0x01
    3b6c:	80 68       	ori	r24, 0x80	; 128
    3b6e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_VidSendCommand>


}
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	0f 90       	pop	r0
    3b7a:	0f 90       	pop	r0
    3b7c:	cf 91       	pop	r28
    3b7e:	df 91       	pop	r29
    3b80:	08 95       	ret

00003b82 <LCD_DrowChar>:
void LCD_DrowChar( uint8_t POS, uint8_t* Copy_Puint8_tSpecialChar)
{
    3b82:	df 93       	push	r29
    3b84:	cf 93       	push	r28
    3b86:	00 d0       	rcall	.+0      	; 0x3b88 <LCD_DrowChar+0x6>
    3b88:	00 d0       	rcall	.+0      	; 0x3b8a <LCD_DrowChar+0x8>
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
    3b8e:	8a 83       	std	Y+2, r24	; 0x02
    3b90:	7c 83       	std	Y+4, r23	; 0x04
    3b92:	6b 83       	std	Y+3, r22	; 0x03
	LCD_VidSendCommand(0x40 + (POS*8)); // 0b01000000; //64 /*0x40 GOTO CGRAM */
    3b94:	8a 81       	ldd	r24, Y+2	; 0x02
    3b96:	88 2f       	mov	r24, r24
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	08 96       	adiw	r24, 0x08	; 8
    3b9c:	88 0f       	add	r24, r24
    3b9e:	99 1f       	adc	r25, r25
    3ba0:	88 0f       	add	r24, r24
    3ba2:	99 1f       	adc	r25, r25
    3ba4:	88 0f       	add	r24, r24
    3ba6:	99 1f       	adc	r25, r25
    3ba8:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_VidSendCommand>
	for(uint8_t i=0 ; i<8 ; i++)
    3bac:	19 82       	std	Y+1, r1	; 0x01
    3bae:	0e c0       	rjmp	.+28     	; 0x3bcc <LCD_DrowChar+0x4a>
	{
		LCD_VidSendData(Copy_Puint8_tSpecialChar[i]);
    3bb0:	89 81       	ldd	r24, Y+1	; 0x01
    3bb2:	28 2f       	mov	r18, r24
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bba:	fc 01       	movw	r30, r24
    3bbc:	e2 0f       	add	r30, r18
    3bbe:	f3 1f       	adc	r31, r19
    3bc0:	80 81       	ld	r24, Z
    3bc2:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_VidSendData>

}
void LCD_DrowChar( uint8_t POS, uint8_t* Copy_Puint8_tSpecialChar)
{
	LCD_VidSendCommand(0x40 + (POS*8)); // 0b01000000; //64 /*0x40 GOTO CGRAM */
	for(uint8_t i=0 ; i<8 ; i++)
    3bc6:	89 81       	ldd	r24, Y+1	; 0x01
    3bc8:	8f 5f       	subi	r24, 0xFF	; 255
    3bca:	89 83       	std	Y+1, r24	; 0x01
    3bcc:	89 81       	ldd	r24, Y+1	; 0x01
    3bce:	88 30       	cpi	r24, 0x08	; 8
    3bd0:	78 f3       	brcs	.-34     	; 0x3bb0 <LCD_DrowChar+0x2e>
	{
		LCD_VidSendData(Copy_Puint8_tSpecialChar[i]);
	}
	LCD_VidSendCommand(0x80);//first address in ddram
    3bd2:	80 e8       	ldi	r24, 0x80	; 128
    3bd4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_VidSendCommand>
}
    3bd8:	0f 90       	pop	r0
    3bda:	0f 90       	pop	r0
    3bdc:	0f 90       	pop	r0
    3bde:	0f 90       	pop	r0
    3be0:	cf 91       	pop	r28
    3be2:	df 91       	pop	r29
    3be4:	08 95       	ret

00003be6 <LCD_DrowSpecial>:

void LCD_DrowSpecial( uint8_t Length,uint8_t* Copy_Puint8_tSpecialChar , uint8_t ROW , uint8_t COL)
{
    3be6:	df 93       	push	r29
    3be8:	cf 93       	push	r28
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
    3bee:	27 97       	sbiw	r28, 0x07	; 7
    3bf0:	0f b6       	in	r0, 0x3f	; 63
    3bf2:	f8 94       	cli
    3bf4:	de bf       	out	0x3e, r29	; 62
    3bf6:	0f be       	out	0x3f, r0	; 63
    3bf8:	cd bf       	out	0x3d, r28	; 61
    3bfa:	8b 83       	std	Y+3, r24	; 0x03
    3bfc:	7d 83       	std	Y+5, r23	; 0x05
    3bfe:	6c 83       	std	Y+4, r22	; 0x04
    3c00:	4e 83       	std	Y+6, r20	; 0x06
    3c02:	2f 83       	std	Y+7, r18	; 0x07

	LCD_VidSendCommand(0x40); // 0b01000000; //64
    3c04:	80 e4       	ldi	r24, 0x40	; 64
    3c06:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_VidSendCommand>
	for(uint8_t i=0 ; i<(Length*8); i++)
    3c0a:	1a 82       	std	Y+2, r1	; 0x02
    3c0c:	0e c0       	rjmp	.+28     	; 0x3c2a <LCD_DrowSpecial+0x44>
	{
		LCD_VidSendData(Copy_Puint8_tSpecialChar[i]);
    3c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c10:	28 2f       	mov	r18, r24
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	8c 81       	ldd	r24, Y+4	; 0x04
    3c16:	9d 81       	ldd	r25, Y+5	; 0x05
    3c18:	fc 01       	movw	r30, r24
    3c1a:	e2 0f       	add	r30, r18
    3c1c:	f3 1f       	adc	r31, r19
    3c1e:	80 81       	ld	r24, Z
    3c20:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_VidSendData>

void LCD_DrowSpecial( uint8_t Length,uint8_t* Copy_Puint8_tSpecialChar , uint8_t ROW , uint8_t COL)
{

	LCD_VidSendCommand(0x40); // 0b01000000; //64
	for(uint8_t i=0 ; i<(Length*8); i++)
    3c24:	8a 81       	ldd	r24, Y+2	; 0x02
    3c26:	8f 5f       	subi	r24, 0xFF	; 255
    3c28:	8a 83       	std	Y+2, r24	; 0x02
    3c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2c:	28 2f       	mov	r18, r24
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	8b 81       	ldd	r24, Y+3	; 0x03
    3c32:	88 2f       	mov	r24, r24
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	88 0f       	add	r24, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	88 0f       	add	r24, r24
    3c3c:	99 1f       	adc	r25, r25
    3c3e:	88 0f       	add	r24, r24
    3c40:	99 1f       	adc	r25, r25
    3c42:	28 17       	cp	r18, r24
    3c44:	39 07       	cpc	r19, r25
    3c46:	1c f3       	brlt	.-58     	; 0x3c0e <LCD_DrowSpecial+0x28>
	{
		LCD_VidSendData(Copy_Puint8_tSpecialChar[i]);
	}
	LCD_VidSendCommand(0x80);//first address in ddram
    3c48:	80 e8       	ldi	r24, 0x80	; 128
    3c4a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_VidSendCommand>
	LCD_VidGoToRowColum(ROW,COL);
    3c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c50:	6f 81       	ldd	r22, Y+7	; 0x07
    3c52:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_VidGoToRowColum>

	for( sint8_t j = Length-1  ; j >= 0   ; j-- )
    3c56:	8b 81       	ldd	r24, Y+3	; 0x03
    3c58:	81 50       	subi	r24, 0x01	; 1
    3c5a:	89 83       	std	Y+1, r24	; 0x01
    3c5c:	06 c0       	rjmp	.+12     	; 0x3c6a <LCD_DrowSpecial+0x84>
	{
		LCD_VidSendData(j);
    3c5e:	89 81       	ldd	r24, Y+1	; 0x01
    3c60:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_VidSendData>
		LCD_VidSendData(Copy_Puint8_tSpecialChar[i]);
	}
	LCD_VidSendCommand(0x80);//first address in ddram
	LCD_VidGoToRowColum(ROW,COL);

	for( sint8_t j = Length-1  ; j >= 0   ; j-- )
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	81 50       	subi	r24, 0x01	; 1
    3c68:	89 83       	std	Y+1, r24	; 0x01
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	88 23       	and	r24, r24
    3c6e:	bc f7       	brge	.-18     	; 0x3c5e <LCD_DrowSpecial+0x78>
	{
		LCD_VidSendData(j);

	}
}
    3c70:	27 96       	adiw	r28, 0x07	; 7
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	cf 91       	pop	r28
    3c7e:	df 91       	pop	r29
    3c80:	08 95       	ret

00003c82 <LCD_VidDisplayStringRow>:



void LCD_VidDisplayStringRow(uint8_t Copy_uint8_tRow, uint8_t Copy_uint8_tColum ,uint32_t *str){
    3c82:	df 93       	push	r29
    3c84:	cf 93       	push	r28
    3c86:	00 d0       	rcall	.+0      	; 0x3c88 <LCD_VidDisplayStringRow+0x6>
    3c88:	00 d0       	rcall	.+0      	; 0x3c8a <LCD_VidDisplayStringRow+0x8>
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
    3c8e:	89 83       	std	Y+1, r24	; 0x01
    3c90:	6a 83       	std	Y+2, r22	; 0x02
    3c92:	5c 83       	std	Y+4, r21	; 0x04
    3c94:	4b 83       	std	Y+3, r20	; 0x03

	LCD_VidGoToRowColum(Copy_uint8_tRow,Copy_uint8_tColum);
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	6a 81       	ldd	r22, Y+2	; 0x02
    3c9a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <LCD_VidGoToRowColum>
	LCD_VidWriteString(str);
    3c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca2:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_VidWriteString>

}
    3ca6:	0f 90       	pop	r0
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
    3cae:	cf 91       	pop	r28
    3cb0:	df 91       	pop	r29
    3cb2:	08 95       	ret

00003cb4 <LCD_VidClearScreen>:
void LCD_VidClearScreen (void)
{
    3cb4:	df 93       	push	r29
    3cb6:	cf 93       	push	r28
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    3cbc:	2e 97       	sbiw	r28, 0x0e	; 14
    3cbe:	0f b6       	in	r0, 0x3f	; 63
    3cc0:	f8 94       	cli
    3cc2:	de bf       	out	0x3e, r29	; 62
    3cc4:	0f be       	out	0x3f, r0	; 63
    3cc6:	cd bf       	out	0x3d, r28	; 61
	/*send CLear screen command */
	LCD_VidSendCommand(0x01);
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_VidSendCommand>
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	a0 e2       	ldi	r26, 0x20	; 32
    3cd4:	b1 e4       	ldi	r27, 0x41	; 65
    3cd6:	8b 87       	std	Y+11, r24	; 0x0b
    3cd8:	9c 87       	std	Y+12, r25	; 0x0c
    3cda:	ad 87       	std	Y+13, r26	; 0x0d
    3cdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	4a ef       	ldi	r20, 0xFA	; 250
    3cec:	54 e4       	ldi	r21, 0x44	; 68
    3cee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	8f 83       	std	Y+7, r24	; 0x07
    3cf8:	98 87       	std	Y+8, r25	; 0x08
    3cfa:	a9 87       	std	Y+9, r26	; 0x09
    3cfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    3d00:	78 85       	ldd	r23, Y+8	; 0x08
    3d02:	89 85       	ldd	r24, Y+9	; 0x09
    3d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 e8       	ldi	r20, 0x80	; 128
    3d0c:	5f e3       	ldi	r21, 0x3F	; 63
    3d0e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3d12:	88 23       	and	r24, r24
    3d14:	2c f4       	brge	.+10     	; 0x3d20 <LCD_VidClearScreen+0x6c>
		__ticks = 1;
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	9e 83       	std	Y+6, r25	; 0x06
    3d1c:	8d 83       	std	Y+5, r24	; 0x05
    3d1e:	3f c0       	rjmp	.+126    	; 0x3d9e <LCD_VidClearScreen+0xea>
	else if (__tmp > 65535)
    3d20:	6f 81       	ldd	r22, Y+7	; 0x07
    3d22:	78 85       	ldd	r23, Y+8	; 0x08
    3d24:	89 85       	ldd	r24, Y+9	; 0x09
    3d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	3f ef       	ldi	r19, 0xFF	; 255
    3d2c:	4f e7       	ldi	r20, 0x7F	; 127
    3d2e:	57 e4       	ldi	r21, 0x47	; 71
    3d30:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3d34:	18 16       	cp	r1, r24
    3d36:	4c f5       	brge	.+82     	; 0x3d8a <LCD_VidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e2       	ldi	r20, 0x20	; 32
    3d46:	51 e4       	ldi	r21, 0x41	; 65
    3d48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	bc 01       	movw	r22, r24
    3d52:	cd 01       	movw	r24, r26
    3d54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	9e 83       	std	Y+6, r25	; 0x06
    3d5e:	8d 83       	std	Y+5, r24	; 0x05
    3d60:	0f c0       	rjmp	.+30     	; 0x3d80 <LCD_VidClearScreen+0xcc>
    3d62:	88 ec       	ldi	r24, 0xC8	; 200
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	9c 83       	std	Y+4, r25	; 0x04
    3d68:	8b 83       	std	Y+3, r24	; 0x03
    3d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d6e:	01 97       	sbiw	r24, 0x01	; 1
    3d70:	f1 f7       	brne	.-4      	; 0x3d6e <LCD_VidClearScreen+0xba>
    3d72:	9c 83       	std	Y+4, r25	; 0x04
    3d74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d76:	8d 81       	ldd	r24, Y+5	; 0x05
    3d78:	9e 81       	ldd	r25, Y+6	; 0x06
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	9e 83       	std	Y+6, r25	; 0x06
    3d7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d80:	8d 81       	ldd	r24, Y+5	; 0x05
    3d82:	9e 81       	ldd	r25, Y+6	; 0x06
    3d84:	00 97       	sbiw	r24, 0x00	; 0
    3d86:	69 f7       	brne	.-38     	; 0x3d62 <LCD_VidClearScreen+0xae>
    3d88:	14 c0       	rjmp	.+40     	; 0x3db2 <LCD_VidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d8c:	78 85       	ldd	r23, Y+8	; 0x08
    3d8e:	89 85       	ldd	r24, Y+9	; 0x09
    3d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	9e 83       	std	Y+6, r25	; 0x06
    3d9c:	8d 83       	std	Y+5, r24	; 0x05
    3d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3da0:	9e 81       	ldd	r25, Y+6	; 0x06
    3da2:	9a 83       	std	Y+2, r25	; 0x02
    3da4:	89 83       	std	Y+1, r24	; 0x01
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	9a 81       	ldd	r25, Y+2	; 0x02
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	f1 f7       	brne	.-4      	; 0x3daa <LCD_VidClearScreen+0xf6>
    3dae:	9a 83       	std	Y+2, r25	; 0x02
    3db0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3db2:	2e 96       	adiw	r28, 0x0e	; 14
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	f8 94       	cli
    3db8:	de bf       	out	0x3e, r29	; 62
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	cd bf       	out	0x3d, r28	; 61
    3dbe:	cf 91       	pop	r28
    3dc0:	df 91       	pop	r29
    3dc2:	08 95       	ret

00003dc4 <Read_Pin>:
#include "KEYPAD_Interface.h"
#include <avr/delay.h>



uint8_t Read_Pin(void){
    3dc4:	df 93       	push	r29
    3dc6:	cf 93       	push	r28
    3dc8:	cd b7       	in	r28, 0x3d	; 61
    3dca:	de b7       	in	r29, 0x3e	; 62
    3dcc:	68 97       	sbiw	r28, 0x18	; 24
    3dce:	0f b6       	in	r0, 0x3f	; 63
    3dd0:	f8 94       	cli
    3dd2:	de bf       	out	0x3e, r29	; 62
    3dd4:	0f be       	out	0x3f, r0	; 63
    3dd6:	cd bf       	out	0x3d, r28	; 61
	//u8 col,row;
	uint8_t c=0;
    3dd8:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t pressed_default=0;
    3dda:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t	keys [4][4]={
			{'/', 9, 8, 7 },
			{'*', 6, 5, 4 },
			{'-', 3, 2, 1 },
			{'+','=',0,0x0D}
	};
    3ddc:	ce 01       	movw	r24, r28
    3dde:	04 96       	adiw	r24, 0x04	; 4
    3de0:	9d 8b       	std	Y+21, r25	; 0x15
    3de2:	8c 8b       	std	Y+20, r24	; 0x14
    3de4:	e2 e8       	ldi	r30, 0x82	; 130
    3de6:	f1 e0       	ldi	r31, 0x01	; 1
    3de8:	ff 8b       	std	Y+23, r31	; 0x17
    3dea:	ee 8b       	std	Y+22, r30	; 0x16
    3dec:	f0 e1       	ldi	r31, 0x10	; 16
    3dee:	f8 8f       	std	Y+24, r31	; 0x18
    3df0:	ee 89       	ldd	r30, Y+22	; 0x16
    3df2:	ff 89       	ldd	r31, Y+23	; 0x17
    3df4:	00 80       	ld	r0, Z
    3df6:	8e 89       	ldd	r24, Y+22	; 0x16
    3df8:	9f 89       	ldd	r25, Y+23	; 0x17
    3dfa:	01 96       	adiw	r24, 0x01	; 1
    3dfc:	9f 8b       	std	Y+23, r25	; 0x17
    3dfe:	8e 8b       	std	Y+22, r24	; 0x16
    3e00:	ec 89       	ldd	r30, Y+20	; 0x14
    3e02:	fd 89       	ldd	r31, Y+21	; 0x15
    3e04:	00 82       	st	Z, r0
    3e06:	8c 89       	ldd	r24, Y+20	; 0x14
    3e08:	9d 89       	ldd	r25, Y+21	; 0x15
    3e0a:	01 96       	adiw	r24, 0x01	; 1
    3e0c:	9d 8b       	std	Y+21, r25	; 0x15
    3e0e:	8c 8b       	std	Y+20, r24	; 0x14
    3e10:	98 8d       	ldd	r25, Y+24	; 0x18
    3e12:	91 50       	subi	r25, 0x01	; 1
    3e14:	98 8f       	std	Y+24, r25	; 0x18
    3e16:	e8 8d       	ldd	r30, Y+24	; 0x18
    3e18:	ee 23       	and	r30, r30
    3e1a:	51 f7       	brne	.-44     	; 0x3df0 <Read_Pin+0x2c>
	while(1){
		for ( c=0;c<=3;c++){
    3e1c:	1b 82       	std	Y+3, r1	; 0x03
    3e1e:	43 c0       	rjmp	.+134    	; 0x3ea6 <Read_Pin+0xe2>
			DIO_voidSetPinValue     (KEYPAD_PORT, c,LOW);
    3e20:	83 e0       	ldi	r24, 0x03	; 3
    3e22:	6b 81       	ldd	r22, Y+3	; 0x03
    3e24:	40 e0       	ldi	r20, 0x00	; 0
    3e26:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
			for(uint8_t r=4 ;r<=7;r++){
    3e2a:	84 e0       	ldi	r24, 0x04	; 4
    3e2c:	89 83       	std	Y+1, r24	; 0x01
    3e2e:	30 c0       	rjmp	.+96     	; 0x3e90 <Read_Pin+0xcc>
				if (   DIO_u8GetPinValue (KEYPAD_PORT, r)==0){
    3e30:	83 e0       	ldi	r24, 0x03	; 3
    3e32:	69 81       	ldd	r22, Y+1	; 0x01
    3e34:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8GetPinValue>
    3e38:	88 23       	and	r24, r24
    3e3a:	39 f5       	brne	.+78     	; 0x3e8a <Read_Pin+0xc6>
					while ( DIO_u8GetPinValue (KEYPAD_PORT, r)==0);
    3e3c:	83 e0       	ldi	r24, 0x03	; 3
    3e3e:	69 81       	ldd	r22, Y+1	; 0x01
    3e40:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8GetPinValue>
    3e44:	88 23       	and	r24, r24
    3e46:	d1 f3       	breq	.-12     	; 0x3e3c <Read_Pin+0x78>

					//_delay_ms(20);
					return pressed_default=keys[r-4][c];
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	88 2f       	mov	r24, r24
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	9c 01       	movw	r18, r24
    3e50:	24 50       	subi	r18, 0x04	; 4
    3e52:	30 40       	sbci	r19, 0x00	; 0
    3e54:	8b 81       	ldd	r24, Y+3	; 0x03
    3e56:	48 2f       	mov	r20, r24
    3e58:	50 e0       	ldi	r21, 0x00	; 0
    3e5a:	22 0f       	add	r18, r18
    3e5c:	33 1f       	adc	r19, r19
    3e5e:	22 0f       	add	r18, r18
    3e60:	33 1f       	adc	r19, r19
    3e62:	ce 01       	movw	r24, r28
    3e64:	01 96       	adiw	r24, 0x01	; 1
    3e66:	82 0f       	add	r24, r18
    3e68:	93 1f       	adc	r25, r19
    3e6a:	84 0f       	add	r24, r20
    3e6c:	95 1f       	adc	r25, r21
    3e6e:	fc 01       	movw	r30, r24
    3e70:	33 96       	adiw	r30, 0x03	; 3
    3e72:	80 81       	ld	r24, Z
    3e74:	8a 83       	std	Y+2, r24	; 0x02
    3e76:	8a 81       	ldd	r24, Y+2	; 0x02
			//_delay_ms(10);

		}

	}
}
    3e78:	68 96       	adiw	r28, 0x18	; 24
    3e7a:	0f b6       	in	r0, 0x3f	; 63
    3e7c:	f8 94       	cli
    3e7e:	de bf       	out	0x3e, r29	; 62
    3e80:	0f be       	out	0x3f, r0	; 63
    3e82:	cd bf       	out	0x3d, r28	; 61
    3e84:	cf 91       	pop	r28
    3e86:	df 91       	pop	r29
    3e88:	08 95       	ret
			{'+','=',0,0x0D}
	};
	while(1){
		for ( c=0;c<=3;c++){
			DIO_voidSetPinValue     (KEYPAD_PORT, c,LOW);
			for(uint8_t r=4 ;r<=7;r++){
    3e8a:	89 81       	ldd	r24, Y+1	; 0x01
    3e8c:	8f 5f       	subi	r24, 0xFF	; 255
    3e8e:	89 83       	std	Y+1, r24	; 0x01
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	88 30       	cpi	r24, 0x08	; 8
    3e94:	68 f2       	brcs	.-102    	; 0x3e30 <Read_Pin+0x6c>
					return pressed_default=keys[r-4][c];


				}
			}
			DIO_voidSetPinValue     (KEYPAD_PORT, c,HIGH);
    3e96:	83 e0       	ldi	r24, 0x03	; 3
    3e98:	6b 81       	ldd	r22, Y+3	; 0x03
    3e9a:	41 e0       	ldi	r20, 0x01	; 1
    3e9c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
			{'*', 6, 5, 4 },
			{'-', 3, 2, 1 },
			{'+','=',0,0x0D}
	};
	while(1){
		for ( c=0;c<=3;c++){
    3ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea2:	8f 5f       	subi	r24, 0xFF	; 255
    3ea4:	8b 83       	std	Y+3, r24	; 0x03
    3ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea8:	84 30       	cpi	r24, 0x04	; 4
    3eaa:	08 f4       	brcc	.+2      	; 0x3eae <Read_Pin+0xea>
    3eac:	b9 cf       	rjmp	.-142    	; 0x3e20 <Read_Pin+0x5c>
    3eae:	b6 cf       	rjmp	.-148    	; 0x3e1c <Read_Pin+0x58>

00003eb0 <KeyPad_Init>:

		}

	}
}
void KeyPad_Init(void){
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection (KEYPAD_PORT,PIN0,OUTPUT );
    3eb8:	83 e0       	ldi	r24, 0x03	; 3
    3eba:	60 e0       	ldi	r22, 0x00	; 0
    3ebc:	41 e0       	ldi	r20, 0x01	; 1
    3ebe:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (KEYPAD_PORT,PIN1,OUTPUT );
    3ec2:	83 e0       	ldi	r24, 0x03	; 3
    3ec4:	61 e0       	ldi	r22, 0x01	; 1
    3ec6:	41 e0       	ldi	r20, 0x01	; 1
    3ec8:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (KEYPAD_PORT,PIN2,OUTPUT );
    3ecc:	83 e0       	ldi	r24, 0x03	; 3
    3ece:	62 e0       	ldi	r22, 0x02	; 2
    3ed0:	41 e0       	ldi	r20, 0x01	; 1
    3ed2:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (KEYPAD_PORT,PIN3,OUTPUT );
    3ed6:	83 e0       	ldi	r24, 0x03	; 3
    3ed8:	63 e0       	ldi	r22, 0x03	; 3
    3eda:	41 e0       	ldi	r20, 0x01	; 1
    3edc:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (KEYPAD_PORT,PIN4,INPUT );
    3ee0:	83 e0       	ldi	r24, 0x03	; 3
    3ee2:	64 e0       	ldi	r22, 0x04	; 4
    3ee4:	40 e0       	ldi	r20, 0x00	; 0
    3ee6:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (KEYPAD_PORT,PIN5,INPUT );
    3eea:	83 e0       	ldi	r24, 0x03	; 3
    3eec:	65 e0       	ldi	r22, 0x05	; 5
    3eee:	40 e0       	ldi	r20, 0x00	; 0
    3ef0:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (KEYPAD_PORT,PIN6,INPUT);
    3ef4:	83 e0       	ldi	r24, 0x03	; 3
    3ef6:	66 e0       	ldi	r22, 0x06	; 6
    3ef8:	40 e0       	ldi	r20, 0x00	; 0
    3efa:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (KEYPAD_PORT,PIN7,INPUT);
    3efe:	83 e0       	ldi	r24, 0x03	; 3
    3f00:	67 e0       	ldi	r22, 0x07	; 7
    3f02:	40 e0       	ldi	r20, 0x00	; 0
    3f04:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>


	DIO_voidSetPortValue    (KEYPAD_PORT, 0xff);
    3f08:	83 e0       	ldi	r24, 0x03	; 3
    3f0a:	6f ef       	ldi	r22, 0xFF	; 255
    3f0c:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_voidSetPortValue>


}
    3f10:	cf 91       	pop	r28
    3f12:	df 91       	pop	r29
    3f14:	08 95       	ret

00003f16 <main>:



uint8_t compare(uint8_t temp,uint8_t *str);

int main(){
    3f16:	df 93       	push	r29
    3f18:	cf 93       	push	r28
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
    3f1e:	ae 97       	sbiw	r28, 0x2e	; 46
    3f20:	0f b6       	in	r0, 0x3f	; 63
    3f22:	f8 94       	cli
    3f24:	de bf       	out	0x3e, r29	; 62
    3f26:	0f be       	out	0x3f, r0	; 63
    3f28:	cd bf       	out	0x3d, r28	; 61
	uint8_t temp =0,num;
    3f2a:	1c a6       	std	Y+44, r1	; 0x2c
	uint8_t value[2] ={0};
    3f2c:	1e a6       	std	Y+46, r1	; 0x2e
    3f2e:	1d a6       	std	Y+45, r1	; 0x2d

	LCD_VidInit();
    3f30:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_VidInit>
	LM35_VoidInit();
    3f34:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <LM35_VoidInit>
	KeyPad_Init();
    3f38:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <KeyPad_Init>
	DIO_voidSetPinDirection(PORT_A,PIN2,OUTPUT);
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	62 e0       	ldi	r22, 0x02	; 2
    3f40:	41 e0       	ldi	r20, 0x01	; 1
    3f42:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinDirection>

	value[0]=Read_Pin();
    3f46:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <Read_Pin>
    3f4a:	8d a7       	std	Y+45, r24	; 0x2d
	LCD_IntegerToString(value[0]);
    3f4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f4e:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <LCD_IntegerToString>
	value[1]=Read_Pin();
    3f52:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <Read_Pin>
    3f56:	8e a7       	std	Y+46, r24	; 0x2e
	LCD_IntegerToString(value[1]);
    3f58:	8e a5       	ldd	r24, Y+46	; 0x2e
    3f5a:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <LCD_IntegerToString>
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	aa e7       	ldi	r26, 0x7A	; 122
    3f64:	b4 e4       	ldi	r27, 0x44	; 68
    3f66:	8f a3       	std	Y+39, r24	; 0x27
    3f68:	98 a7       	std	Y+40, r25	; 0x28
    3f6a:	a9 a7       	std	Y+41, r26	; 0x29
    3f6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f6e:	6f a1       	ldd	r22, Y+39	; 0x27
    3f70:	78 a5       	ldd	r23, Y+40	; 0x28
    3f72:	89 a5       	ldd	r24, Y+41	; 0x29
    3f74:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	4a ef       	ldi	r20, 0xFA	; 250
    3f7c:	54 e4       	ldi	r21, 0x44	; 68
    3f7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	8b a3       	std	Y+35, r24	; 0x23
    3f88:	9c a3       	std	Y+36, r25	; 0x24
    3f8a:	ad a3       	std	Y+37, r26	; 0x25
    3f8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f8e:	6b a1       	ldd	r22, Y+35	; 0x23
    3f90:	7c a1       	ldd	r23, Y+36	; 0x24
    3f92:	8d a1       	ldd	r24, Y+37	; 0x25
    3f94:	9e a1       	ldd	r25, Y+38	; 0x26
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	40 e8       	ldi	r20, 0x80	; 128
    3f9c:	5f e3       	ldi	r21, 0x3F	; 63
    3f9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3fa2:	88 23       	and	r24, r24
    3fa4:	2c f4       	brge	.+10     	; 0x3fb0 <main+0x9a>
		__ticks = 1;
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	9a a3       	std	Y+34, r25	; 0x22
    3fac:	89 a3       	std	Y+33, r24	; 0x21
    3fae:	3f c0       	rjmp	.+126    	; 0x402e <main+0x118>
	else if (__tmp > 65535)
    3fb0:	6b a1       	ldd	r22, Y+35	; 0x23
    3fb2:	7c a1       	ldd	r23, Y+36	; 0x24
    3fb4:	8d a1       	ldd	r24, Y+37	; 0x25
    3fb6:	9e a1       	ldd	r25, Y+38	; 0x26
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	3f ef       	ldi	r19, 0xFF	; 255
    3fbc:	4f e7       	ldi	r20, 0x7F	; 127
    3fbe:	57 e4       	ldi	r21, 0x47	; 71
    3fc0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3fc4:	18 16       	cp	r1, r24
    3fc6:	4c f5       	brge	.+82     	; 0x401a <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fc8:	6f a1       	ldd	r22, Y+39	; 0x27
    3fca:	78 a5       	ldd	r23, Y+40	; 0x28
    3fcc:	89 a5       	ldd	r24, Y+41	; 0x29
    3fce:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	40 e2       	ldi	r20, 0x20	; 32
    3fd6:	51 e4       	ldi	r21, 0x41	; 65
    3fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	bc 01       	movw	r22, r24
    3fe2:	cd 01       	movw	r24, r26
    3fe4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3fe8:	dc 01       	movw	r26, r24
    3fea:	cb 01       	movw	r24, r22
    3fec:	9a a3       	std	Y+34, r25	; 0x22
    3fee:	89 a3       	std	Y+33, r24	; 0x21
    3ff0:	0f c0       	rjmp	.+30     	; 0x4010 <main+0xfa>
    3ff2:	88 ec       	ldi	r24, 0xC8	; 200
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	98 a3       	std	Y+32, r25	; 0x20
    3ff8:	8f 8f       	std	Y+31, r24	; 0x1f
    3ffa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ffc:	98 a1       	ldd	r25, Y+32	; 0x20
    3ffe:	01 97       	sbiw	r24, 0x01	; 1
    4000:	f1 f7       	brne	.-4      	; 0x3ffe <main+0xe8>
    4002:	98 a3       	std	Y+32, r25	; 0x20
    4004:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4006:	89 a1       	ldd	r24, Y+33	; 0x21
    4008:	9a a1       	ldd	r25, Y+34	; 0x22
    400a:	01 97       	sbiw	r24, 0x01	; 1
    400c:	9a a3       	std	Y+34, r25	; 0x22
    400e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4010:	89 a1       	ldd	r24, Y+33	; 0x21
    4012:	9a a1       	ldd	r25, Y+34	; 0x22
    4014:	00 97       	sbiw	r24, 0x00	; 0
    4016:	69 f7       	brne	.-38     	; 0x3ff2 <main+0xdc>
    4018:	14 c0       	rjmp	.+40     	; 0x4042 <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    401a:	6b a1       	ldd	r22, Y+35	; 0x23
    401c:	7c a1       	ldd	r23, Y+36	; 0x24
    401e:	8d a1       	ldd	r24, Y+37	; 0x25
    4020:	9e a1       	ldd	r25, Y+38	; 0x26
    4022:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	9a a3       	std	Y+34, r25	; 0x22
    402c:	89 a3       	std	Y+33, r24	; 0x21
    402e:	89 a1       	ldd	r24, Y+33	; 0x21
    4030:	9a a1       	ldd	r25, Y+34	; 0x22
    4032:	9e 8f       	std	Y+30, r25	; 0x1e
    4034:	8d 8f       	std	Y+29, r24	; 0x1d
    4036:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4038:	9e 8d       	ldd	r25, Y+30	; 0x1e
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	f1 f7       	brne	.-4      	; 0x403a <main+0x124>
    403e:	9e 8f       	std	Y+30, r25	; 0x1e
    4040:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(1000);

	LCD_VidDisplayStringRow(0,0,"temp is ");
    4042:	20 e6       	ldi	r18, 0x60	; 96
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	60 e0       	ldi	r22, 0x00	; 0
    404a:	a9 01       	movw	r20, r18
    404c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <LCD_VidDisplayStringRow>
	while(1){


		temp = LM35_U16Read(0);
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LM35_U16Read>
    4056:	8c a7       	std	Y+44, r24	; 0x2c
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	aa e7       	ldi	r26, 0x7A	; 122
    405e:	b4 e4       	ldi	r27, 0x44	; 68
    4060:	89 8f       	std	Y+25, r24	; 0x19
    4062:	9a 8f       	std	Y+26, r25	; 0x1a
    4064:	ab 8f       	std	Y+27, r26	; 0x1b
    4066:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4068:	69 8d       	ldd	r22, Y+25	; 0x19
    406a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    406c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    406e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	4a ef       	ldi	r20, 0xFA	; 250
    4076:	54 e4       	ldi	r21, 0x44	; 68
    4078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    407c:	dc 01       	movw	r26, r24
    407e:	cb 01       	movw	r24, r22
    4080:	8d 8b       	std	Y+21, r24	; 0x15
    4082:	9e 8b       	std	Y+22, r25	; 0x16
    4084:	af 8b       	std	Y+23, r26	; 0x17
    4086:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4088:	6d 89       	ldd	r22, Y+21	; 0x15
    408a:	7e 89       	ldd	r23, Y+22	; 0x16
    408c:	8f 89       	ldd	r24, Y+23	; 0x17
    408e:	98 8d       	ldd	r25, Y+24	; 0x18
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	40 e8       	ldi	r20, 0x80	; 128
    4096:	5f e3       	ldi	r21, 0x3F	; 63
    4098:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    409c:	88 23       	and	r24, r24
    409e:	2c f4       	brge	.+10     	; 0x40aa <main+0x194>
		__ticks = 1;
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	9c 8b       	std	Y+20, r25	; 0x14
    40a6:	8b 8b       	std	Y+19, r24	; 0x13
    40a8:	3f c0       	rjmp	.+126    	; 0x4128 <main+0x212>
	else if (__tmp > 65535)
    40aa:	6d 89       	ldd	r22, Y+21	; 0x15
    40ac:	7e 89       	ldd	r23, Y+22	; 0x16
    40ae:	8f 89       	ldd	r24, Y+23	; 0x17
    40b0:	98 8d       	ldd	r25, Y+24	; 0x18
    40b2:	20 e0       	ldi	r18, 0x00	; 0
    40b4:	3f ef       	ldi	r19, 0xFF	; 255
    40b6:	4f e7       	ldi	r20, 0x7F	; 127
    40b8:	57 e4       	ldi	r21, 0x47	; 71
    40ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    40be:	18 16       	cp	r1, r24
    40c0:	4c f5       	brge	.+82     	; 0x4114 <main+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40c2:	69 8d       	ldd	r22, Y+25	; 0x19
    40c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	40 e2       	ldi	r20, 0x20	; 32
    40d0:	51 e4       	ldi	r21, 0x41	; 65
    40d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	bc 01       	movw	r22, r24
    40dc:	cd 01       	movw	r24, r26
    40de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	9c 8b       	std	Y+20, r25	; 0x14
    40e8:	8b 8b       	std	Y+19, r24	; 0x13
    40ea:	0f c0       	rjmp	.+30     	; 0x410a <main+0x1f4>
    40ec:	88 ec       	ldi	r24, 0xC8	; 200
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	9a 8b       	std	Y+18, r25	; 0x12
    40f2:	89 8b       	std	Y+17, r24	; 0x11
    40f4:	89 89       	ldd	r24, Y+17	; 0x11
    40f6:	9a 89       	ldd	r25, Y+18	; 0x12
    40f8:	01 97       	sbiw	r24, 0x01	; 1
    40fa:	f1 f7       	brne	.-4      	; 0x40f8 <main+0x1e2>
    40fc:	9a 8b       	std	Y+18, r25	; 0x12
    40fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4100:	8b 89       	ldd	r24, Y+19	; 0x13
    4102:	9c 89       	ldd	r25, Y+20	; 0x14
    4104:	01 97       	sbiw	r24, 0x01	; 1
    4106:	9c 8b       	std	Y+20, r25	; 0x14
    4108:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    410a:	8b 89       	ldd	r24, Y+19	; 0x13
    410c:	9c 89       	ldd	r25, Y+20	; 0x14
    410e:	00 97       	sbiw	r24, 0x00	; 0
    4110:	69 f7       	brne	.-38     	; 0x40ec <main+0x1d6>
    4112:	14 c0       	rjmp	.+40     	; 0x413c <main+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4114:	6d 89       	ldd	r22, Y+21	; 0x15
    4116:	7e 89       	ldd	r23, Y+22	; 0x16
    4118:	8f 89       	ldd	r24, Y+23	; 0x17
    411a:	98 8d       	ldd	r25, Y+24	; 0x18
    411c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4120:	dc 01       	movw	r26, r24
    4122:	cb 01       	movw	r24, r22
    4124:	9c 8b       	std	Y+20, r25	; 0x14
    4126:	8b 8b       	std	Y+19, r24	; 0x13
    4128:	8b 89       	ldd	r24, Y+19	; 0x13
    412a:	9c 89       	ldd	r25, Y+20	; 0x14
    412c:	98 8b       	std	Y+16, r25	; 0x10
    412e:	8f 87       	std	Y+15, r24	; 0x0f
    4130:	8f 85       	ldd	r24, Y+15	; 0x0f
    4132:	98 89       	ldd	r25, Y+16	; 0x10
    4134:	01 97       	sbiw	r24, 0x01	; 1
    4136:	f1 f7       	brne	.-4      	; 0x4134 <main+0x21e>
    4138:	98 8b       	std	Y+16, r25	; 0x10
    413a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_IntegerToString(temp);
    413c:	8c a5       	ldd	r24, Y+44	; 0x2c
    413e:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <LCD_IntegerToString>
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	aa ef       	ldi	r26, 0xFA	; 250
    4148:	b4 e4       	ldi	r27, 0x44	; 68
    414a:	8b 87       	std	Y+11, r24	; 0x0b
    414c:	9c 87       	std	Y+12, r25	; 0x0c
    414e:	ad 87       	std	Y+13, r26	; 0x0d
    4150:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4152:	6b 85       	ldd	r22, Y+11	; 0x0b
    4154:	7c 85       	ldd	r23, Y+12	; 0x0c
    4156:	8d 85       	ldd	r24, Y+13	; 0x0d
    4158:	9e 85       	ldd	r25, Y+14	; 0x0e
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	4a ef       	ldi	r20, 0xFA	; 250
    4160:	54 e4       	ldi	r21, 0x44	; 68
    4162:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	8f 83       	std	Y+7, r24	; 0x07
    416c:	98 87       	std	Y+8, r25	; 0x08
    416e:	a9 87       	std	Y+9, r26	; 0x09
    4170:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4172:	6f 81       	ldd	r22, Y+7	; 0x07
    4174:	78 85       	ldd	r23, Y+8	; 0x08
    4176:	89 85       	ldd	r24, Y+9	; 0x09
    4178:	9a 85       	ldd	r25, Y+10	; 0x0a
    417a:	20 e0       	ldi	r18, 0x00	; 0
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	40 e8       	ldi	r20, 0x80	; 128
    4180:	5f e3       	ldi	r21, 0x3F	; 63
    4182:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4186:	88 23       	and	r24, r24
    4188:	2c f4       	brge	.+10     	; 0x4194 <main+0x27e>
		__ticks = 1;
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	9e 83       	std	Y+6, r25	; 0x06
    4190:	8d 83       	std	Y+5, r24	; 0x05
    4192:	3f c0       	rjmp	.+126    	; 0x4212 <main+0x2fc>
	else if (__tmp > 65535)
    4194:	6f 81       	ldd	r22, Y+7	; 0x07
    4196:	78 85       	ldd	r23, Y+8	; 0x08
    4198:	89 85       	ldd	r24, Y+9	; 0x09
    419a:	9a 85       	ldd	r25, Y+10	; 0x0a
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	3f ef       	ldi	r19, 0xFF	; 255
    41a0:	4f e7       	ldi	r20, 0x7F	; 127
    41a2:	57 e4       	ldi	r21, 0x47	; 71
    41a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    41a8:	18 16       	cp	r1, r24
    41aa:	4c f5       	brge	.+82     	; 0x41fe <main+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	40 e2       	ldi	r20, 0x20	; 32
    41ba:	51 e4       	ldi	r21, 0x41	; 65
    41bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41c0:	dc 01       	movw	r26, r24
    41c2:	cb 01       	movw	r24, r22
    41c4:	bc 01       	movw	r22, r24
    41c6:	cd 01       	movw	r24, r26
    41c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	9e 83       	std	Y+6, r25	; 0x06
    41d2:	8d 83       	std	Y+5, r24	; 0x05
    41d4:	0f c0       	rjmp	.+30     	; 0x41f4 <main+0x2de>
    41d6:	88 ec       	ldi	r24, 0xC8	; 200
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	9c 83       	std	Y+4, r25	; 0x04
    41dc:	8b 83       	std	Y+3, r24	; 0x03
    41de:	8b 81       	ldd	r24, Y+3	; 0x03
    41e0:	9c 81       	ldd	r25, Y+4	; 0x04
    41e2:	01 97       	sbiw	r24, 0x01	; 1
    41e4:	f1 f7       	brne	.-4      	; 0x41e2 <main+0x2cc>
    41e6:	9c 83       	std	Y+4, r25	; 0x04
    41e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ea:	8d 81       	ldd	r24, Y+5	; 0x05
    41ec:	9e 81       	ldd	r25, Y+6	; 0x06
    41ee:	01 97       	sbiw	r24, 0x01	; 1
    41f0:	9e 83       	std	Y+6, r25	; 0x06
    41f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f4:	8d 81       	ldd	r24, Y+5	; 0x05
    41f6:	9e 81       	ldd	r25, Y+6	; 0x06
    41f8:	00 97       	sbiw	r24, 0x00	; 0
    41fa:	69 f7       	brne	.-38     	; 0x41d6 <main+0x2c0>
    41fc:	14 c0       	rjmp	.+40     	; 0x4226 <main+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4200:	78 85       	ldd	r23, Y+8	; 0x08
    4202:	89 85       	ldd	r24, Y+9	; 0x09
    4204:	9a 85       	ldd	r25, Y+10	; 0x0a
    4206:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	9e 83       	std	Y+6, r25	; 0x06
    4210:	8d 83       	std	Y+5, r24	; 0x05
    4212:	8d 81       	ldd	r24, Y+5	; 0x05
    4214:	9e 81       	ldd	r25, Y+6	; 0x06
    4216:	9a 83       	std	Y+2, r25	; 0x02
    4218:	89 83       	std	Y+1, r24	; 0x01
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	9a 81       	ldd	r25, Y+2	; 0x02
    421e:	01 97       	sbiw	r24, 0x01	; 1
    4220:	f1 f7       	brne	.-4      	; 0x421e <main+0x308>
    4222:	9a 83       	std	Y+2, r25	; 0x02
    4224:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		if(compare(temp,value)){
    4226:	9e 01       	movw	r18, r28
    4228:	23 5d       	subi	r18, 0xD3	; 211
    422a:	3f 4f       	sbci	r19, 0xFF	; 255
    422c:	8c a5       	ldd	r24, Y+44	; 0x2c
    422e:	b9 01       	movw	r22, r18
    4230:	0e 94 36 21 	call	0x426c	; 0x426c <compare>
    4234:	88 23       	and	r24, r24
    4236:	69 f0       	breq	.+26     	; 0x4252 <main+0x33c>

			DIO_voidSetPinValue(PORT_A,PIN2,HIGH);
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	62 e0       	ldi	r22, 0x02	; 2
    423c:	41 e0       	ldi	r20, 0x01	; 1
    423e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
			LCD_VidDisplayStringRow(1,0,"FAN on ");
    4242:	29 e6       	ldi	r18, 0x69	; 105
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	81 e0       	ldi	r24, 0x01	; 1
    4248:	60 e0       	ldi	r22, 0x00	; 0
    424a:	a9 01       	movw	r20, r18
    424c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <LCD_VidDisplayStringRow>
    4250:	ff ce       	rjmp	.-514    	; 0x4050 <main+0x13a>
		}else{

			DIO_voidSetPinValue(PORT_A,PIN2,LOW);
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	62 e0       	ldi	r22, 0x02	; 2
    4256:	40 e0       	ldi	r20, 0x00	; 0
    4258:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidSetPinValue>
			LCD_VidDisplayStringRow(1,0,"FAN off ");
    425c:	21 e7       	ldi	r18, 0x71	; 113
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	60 e0       	ldi	r22, 0x00	; 0
    4264:	a9 01       	movw	r20, r18
    4266:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <LCD_VidDisplayStringRow>
    426a:	f2 ce       	rjmp	.-540    	; 0x4050 <main+0x13a>

0000426c <compare>:



	}
}
uint8_t compare(uint8_t temp,uint8_t *str){
    426c:	df 93       	push	r29
    426e:	cf 93       	push	r28
    4270:	00 d0       	rcall	.+0      	; 0x4272 <compare+0x6>
    4272:	00 d0       	rcall	.+0      	; 0x4274 <compare+0x8>
    4274:	0f 92       	push	r0
    4276:	cd b7       	in	r28, 0x3d	; 61
    4278:	de b7       	in	r29, 0x3e	; 62
    427a:	8a 83       	std	Y+2, r24	; 0x02
    427c:	7c 83       	std	Y+4, r23	; 0x04
    427e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t num;
	num=(str[0]*10)+(str[1]);
    4280:	eb 81       	ldd	r30, Y+3	; 0x03
    4282:	fc 81       	ldd	r31, Y+4	; 0x04
    4284:	80 81       	ld	r24, Z
    4286:	88 2f       	mov	r24, r24
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	9c 01       	movw	r18, r24
    428c:	22 0f       	add	r18, r18
    428e:	33 1f       	adc	r19, r19
    4290:	c9 01       	movw	r24, r18
    4292:	88 0f       	add	r24, r24
    4294:	99 1f       	adc	r25, r25
    4296:	88 0f       	add	r24, r24
    4298:	99 1f       	adc	r25, r25
    429a:	82 0f       	add	r24, r18
    429c:	93 1f       	adc	r25, r19
    429e:	28 2f       	mov	r18, r24
    42a0:	8b 81       	ldd	r24, Y+3	; 0x03
    42a2:	9c 81       	ldd	r25, Y+4	; 0x04
    42a4:	fc 01       	movw	r30, r24
    42a6:	31 96       	adiw	r30, 0x01	; 1
    42a8:	80 81       	ld	r24, Z
    42aa:	82 0f       	add	r24, r18
    42ac:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidClearScreen();
    42ae:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <LCD_VidClearScreen>
	LCD_IntegerToString(num);
    42b2:	89 81       	ldd	r24, Y+1	; 0x01
    42b4:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <LCD_IntegerToString>
	if (num>temp){
    42b8:	99 81       	ldd	r25, Y+1	; 0x01
    42ba:	8a 81       	ldd	r24, Y+2	; 0x02
    42bc:	89 17       	cp	r24, r25
    42be:	10 f4       	brcc	.+4      	; 0x42c4 <compare+0x58>
		return 0;
    42c0:	1d 82       	std	Y+5, r1	; 0x05
    42c2:	02 c0       	rjmp	.+4      	; 0x42c8 <compare+0x5c>

	}
	else{
		return 1;
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	8d 83       	std	Y+5, r24	; 0x05
    42c8:	8d 81       	ldd	r24, Y+5	; 0x05
	}


}
    42ca:	0f 90       	pop	r0
    42cc:	0f 90       	pop	r0
    42ce:	0f 90       	pop	r0
    42d0:	0f 90       	pop	r0
    42d2:	0f 90       	pop	r0
    42d4:	cf 91       	pop	r28
    42d6:	df 91       	pop	r29
    42d8:	08 95       	ret

000042da <__mulsi3>:
    42da:	62 9f       	mul	r22, r18
    42dc:	d0 01       	movw	r26, r0
    42de:	73 9f       	mul	r23, r19
    42e0:	f0 01       	movw	r30, r0
    42e2:	82 9f       	mul	r24, r18
    42e4:	e0 0d       	add	r30, r0
    42e6:	f1 1d       	adc	r31, r1
    42e8:	64 9f       	mul	r22, r20
    42ea:	e0 0d       	add	r30, r0
    42ec:	f1 1d       	adc	r31, r1
    42ee:	92 9f       	mul	r25, r18
    42f0:	f0 0d       	add	r31, r0
    42f2:	83 9f       	mul	r24, r19
    42f4:	f0 0d       	add	r31, r0
    42f6:	74 9f       	mul	r23, r20
    42f8:	f0 0d       	add	r31, r0
    42fa:	65 9f       	mul	r22, r21
    42fc:	f0 0d       	add	r31, r0
    42fe:	99 27       	eor	r25, r25
    4300:	72 9f       	mul	r23, r18
    4302:	b0 0d       	add	r27, r0
    4304:	e1 1d       	adc	r30, r1
    4306:	f9 1f       	adc	r31, r25
    4308:	63 9f       	mul	r22, r19
    430a:	b0 0d       	add	r27, r0
    430c:	e1 1d       	adc	r30, r1
    430e:	f9 1f       	adc	r31, r25
    4310:	bd 01       	movw	r22, r26
    4312:	cf 01       	movw	r24, r30
    4314:	11 24       	eor	r1, r1
    4316:	08 95       	ret

00004318 <__udivmodqi4>:
    4318:	99 1b       	sub	r25, r25
    431a:	79 e0       	ldi	r23, 0x09	; 9
    431c:	04 c0       	rjmp	.+8      	; 0x4326 <__udivmodqi4_ep>

0000431e <__udivmodqi4_loop>:
    431e:	99 1f       	adc	r25, r25
    4320:	96 17       	cp	r25, r22
    4322:	08 f0       	brcs	.+2      	; 0x4326 <__udivmodqi4_ep>
    4324:	96 1b       	sub	r25, r22

00004326 <__udivmodqi4_ep>:
    4326:	88 1f       	adc	r24, r24
    4328:	7a 95       	dec	r23
    432a:	c9 f7       	brne	.-14     	; 0x431e <__udivmodqi4_loop>
    432c:	80 95       	com	r24
    432e:	08 95       	ret

00004330 <__udivmodsi4>:
    4330:	a1 e2       	ldi	r26, 0x21	; 33
    4332:	1a 2e       	mov	r1, r26
    4334:	aa 1b       	sub	r26, r26
    4336:	bb 1b       	sub	r27, r27
    4338:	fd 01       	movw	r30, r26
    433a:	0d c0       	rjmp	.+26     	; 0x4356 <__udivmodsi4_ep>

0000433c <__udivmodsi4_loop>:
    433c:	aa 1f       	adc	r26, r26
    433e:	bb 1f       	adc	r27, r27
    4340:	ee 1f       	adc	r30, r30
    4342:	ff 1f       	adc	r31, r31
    4344:	a2 17       	cp	r26, r18
    4346:	b3 07       	cpc	r27, r19
    4348:	e4 07       	cpc	r30, r20
    434a:	f5 07       	cpc	r31, r21
    434c:	20 f0       	brcs	.+8      	; 0x4356 <__udivmodsi4_ep>
    434e:	a2 1b       	sub	r26, r18
    4350:	b3 0b       	sbc	r27, r19
    4352:	e4 0b       	sbc	r30, r20
    4354:	f5 0b       	sbc	r31, r21

00004356 <__udivmodsi4_ep>:
    4356:	66 1f       	adc	r22, r22
    4358:	77 1f       	adc	r23, r23
    435a:	88 1f       	adc	r24, r24
    435c:	99 1f       	adc	r25, r25
    435e:	1a 94       	dec	r1
    4360:	69 f7       	brne	.-38     	; 0x433c <__udivmodsi4_loop>
    4362:	60 95       	com	r22
    4364:	70 95       	com	r23
    4366:	80 95       	com	r24
    4368:	90 95       	com	r25
    436a:	9b 01       	movw	r18, r22
    436c:	ac 01       	movw	r20, r24
    436e:	bd 01       	movw	r22, r26
    4370:	cf 01       	movw	r24, r30
    4372:	08 95       	ret

00004374 <__prologue_saves__>:
    4374:	2f 92       	push	r2
    4376:	3f 92       	push	r3
    4378:	4f 92       	push	r4
    437a:	5f 92       	push	r5
    437c:	6f 92       	push	r6
    437e:	7f 92       	push	r7
    4380:	8f 92       	push	r8
    4382:	9f 92       	push	r9
    4384:	af 92       	push	r10
    4386:	bf 92       	push	r11
    4388:	cf 92       	push	r12
    438a:	df 92       	push	r13
    438c:	ef 92       	push	r14
    438e:	ff 92       	push	r15
    4390:	0f 93       	push	r16
    4392:	1f 93       	push	r17
    4394:	cf 93       	push	r28
    4396:	df 93       	push	r29
    4398:	cd b7       	in	r28, 0x3d	; 61
    439a:	de b7       	in	r29, 0x3e	; 62
    439c:	ca 1b       	sub	r28, r26
    439e:	db 0b       	sbc	r29, r27
    43a0:	0f b6       	in	r0, 0x3f	; 63
    43a2:	f8 94       	cli
    43a4:	de bf       	out	0x3e, r29	; 62
    43a6:	0f be       	out	0x3f, r0	; 63
    43a8:	cd bf       	out	0x3d, r28	; 61
    43aa:	09 94       	ijmp

000043ac <__epilogue_restores__>:
    43ac:	2a 88       	ldd	r2, Y+18	; 0x12
    43ae:	39 88       	ldd	r3, Y+17	; 0x11
    43b0:	48 88       	ldd	r4, Y+16	; 0x10
    43b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    43b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    43b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    43b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    43ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    43bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    43be:	b9 84       	ldd	r11, Y+9	; 0x09
    43c0:	c8 84       	ldd	r12, Y+8	; 0x08
    43c2:	df 80       	ldd	r13, Y+7	; 0x07
    43c4:	ee 80       	ldd	r14, Y+6	; 0x06
    43c6:	fd 80       	ldd	r15, Y+5	; 0x05
    43c8:	0c 81       	ldd	r16, Y+4	; 0x04
    43ca:	1b 81       	ldd	r17, Y+3	; 0x03
    43cc:	aa 81       	ldd	r26, Y+2	; 0x02
    43ce:	b9 81       	ldd	r27, Y+1	; 0x01
    43d0:	ce 0f       	add	r28, r30
    43d2:	d1 1d       	adc	r29, r1
    43d4:	0f b6       	in	r0, 0x3f	; 63
    43d6:	f8 94       	cli
    43d8:	de bf       	out	0x3e, r29	; 62
    43da:	0f be       	out	0x3f, r0	; 63
    43dc:	cd bf       	out	0x3d, r28	; 61
    43de:	ed 01       	movw	r28, r26
    43e0:	08 95       	ret

000043e2 <_exit>:
    43e2:	f8 94       	cli

000043e4 <__stop_program>:
    43e4:	ff cf       	rjmp	.-2      	; 0x43e4 <__stop_program>
