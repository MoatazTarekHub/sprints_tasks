
I2C_EEPROM_Sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  000010b6  0000114a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  008000da  008000da  000011c4  2**0
                  ALLOC
  3 .stab         00001794  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000102b  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 33       	cpi	r26, 0x3E	; 62
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b9 06 	call	0xd72	; 0xd72 <main>
      8a:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:



}
*/
void UART_Init(uint32_t BoudRate){
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_Init+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <UART_Init+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	6a 83       	std	Y+2, r22	; 0x02
      a2:	7b 83       	std	Y+3, r23	; 0x03
      a4:	8c 83       	std	Y+4, r24	; 0x04
      a6:	9d 83       	std	Y+5, r25	; 0x05

	DIO_voidSetPinDirection(PORT_D,PIN1,OUTPUT);
      a8:	83 e0       	ldi	r24, 0x03	; 3
      aa:	61 e0       	ldi	r22, 0x01	; 1
      ac:	41 e0       	ldi	r20, 0x01	; 1
      ae:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_D,PIN0,INPUT);
      b2:	83 e0       	ldi	r24, 0x03	; 3
      b4:	60 e0       	ldi	r22, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_voidSetPinDirection>
UBRR_HELP=(F_CPU/(16*BoudRate))-1;
UBRRL=(uint8_t)(UBRR_HELP>>8);
UBRRH=(uint8_t)(UBRR_HELP);
*/
//select normal mode
 CLRBIT(UCSRA,1);
      bc:	ab e2       	ldi	r26, 0x2B	; 43
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	eb e2       	ldi	r30, 0x2B	; 43
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	8d 7f       	andi	r24, 0xFD	; 253
      c8:	8c 93       	st	X, r24
 CLRBIT(UCSRA,0);
      ca:	ab e2       	ldi	r26, 0x2B	; 43
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	eb e2       	ldi	r30, 0x2B	; 43
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8e 7f       	andi	r24, 0xFE	; 254
      d6:	8c 93       	st	X, r24

SETBIT(UCSRB,3);
      d8:	aa e2       	ldi	r26, 0x2A	; 42
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	ea e2       	ldi	r30, 0x2A	; 42
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	88 60       	ori	r24, 0x08	; 8
      e4:	8c 93       	st	X, r24
SETBIT(UCSRB,4);
      e6:	aa e2       	ldi	r26, 0x2A	; 42
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	ea e2       	ldi	r30, 0x2A	; 42
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	80 61       	ori	r24, 0x10	; 16
      f2:	8c 93       	st	X, r24

uint8_t UCSRC_HELP=0;
      f4:	19 82       	std	Y+1, r1	; 0x01
SETBIT(UCSRC_HELP,7);
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	80 68       	ori	r24, 0x80	; 128
      fa:	89 83       	std	Y+1, r24	; 0x01
// 8bit data
CLRBIT(UCSRB,2);
      fc:	aa e2       	ldi	r26, 0x2A	; 42
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	ea e2       	ldi	r30, 0x2A	; 42
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	8b 7f       	andi	r24, 0xFB	; 251
     108:	8c 93       	st	X, r24
SETBIT(UCSRC_HELP,2);
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	84 60       	ori	r24, 0x04	; 4
     10e:	89 83       	std	Y+1, r24	; 0x01
SETBIT(UCSRC_HELP,1);
     110:	89 81       	ldd	r24, Y+1	; 0x01
     112:	82 60       	ori	r24, 0x02	; 2
     114:	89 83       	std	Y+1, r24	; 0x01
//asynch.
CLRBIT(UCSRC_HELP,6);
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	8f 7b       	andi	r24, 0xBF	; 191
     11a:	89 83       	std	Y+1, r24	; 0x01
//patity mode =disable
CLRBIT(UCSRC_HELP,4);
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	8f 7e       	andi	r24, 0xEF	; 239
     120:	89 83       	std	Y+1, r24	; 0x01
CLRBIT(UCSRC_HELP,5);
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	8f 7d       	andi	r24, 0xDF	; 223
     126:	89 83       	std	Y+1, r24	; 0x01
// 1 stop bit
CLRBIT(UCSRC_HELP,3);
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	87 7f       	andi	r24, 0xF7	; 247
     12c:	89 83       	std	Y+1, r24	; 0x01

UCSRC=UCSRC_HELP;
     12e:	e0 e4       	ldi	r30, 0x40	; 64
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	80 83       	st	Z, r24
UBRRL=51;
     136:	e9 e2       	ldi	r30, 0x29	; 41
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	83 e3       	ldi	r24, 0x33	; 51
     13c:	80 83       	st	Z, r24
UBRRH=0;
     13e:	e0 e4       	ldi	r30, 0x40	; 64
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	10 82       	st	Z, r1
}
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	0f 90       	pop	r0
     14c:	0f 90       	pop	r0
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <UART_Recive>:

uint8_t UART_Recive(void){
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	0f 92       	push	r0
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
uint8_t recived_data;
	while (0==GETBIT(UCSRA,7));
     15e:	eb e2       	ldi	r30, 0x2B	; 43
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	88 23       	and	r24, r24
     166:	dc f7       	brge	.-10     	; 0x15e <UART_Recive+0xa>
recived_data=UDR;
     168:	ec e2       	ldi	r30, 0x2C	; 44
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	89 83       	std	Y+1, r24	; 0x01
return recived_data;
     170:	89 81       	ldd	r24, Y+1	; 0x01
}
     172:	0f 90       	pop	r0
     174:	cf 91       	pop	r28
     176:	df 91       	pop	r29
     178:	08 95       	ret

0000017a <UART_Transmite>:
		UART_Transmite( Copy_Puint8_tString[Counter] );
	}

}
*/
void UART_Transmite(uint8_t Data){
     17a:	df 93       	push	r29
     17c:	cf 93       	push	r28
     17e:	0f 92       	push	r0
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	89 83       	std	Y+1, r24	; 0x01
	while (0==GETBIT(UCSRA,5));
     186:	eb e2       	ldi	r30, 0x2B	; 43
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	82 95       	swap	r24
     18e:	86 95       	lsr	r24
     190:	87 70       	andi	r24, 0x07	; 7
     192:	88 2f       	mov	r24, r24
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	81 70       	andi	r24, 0x01	; 1
     198:	90 70       	andi	r25, 0x00	; 0
     19a:	00 97       	sbiw	r24, 0x00	; 0
     19c:	a1 f3       	breq	.-24     	; 0x186 <UART_Transmite+0xc>
	UDR=Data;
     19e:	ec e2       	ldi	r30, 0x2C	; 44
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	80 83       	st	Z, r24
}
     1a6:	0f 90       	pop	r0
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <UART_Transmite_String>:

void UART_Transmite_String(uint8_t *str){
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <UART_Transmite_String+0x6>
     1b4:	0f 92       	push	r0
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
     1ba:	9b 83       	std	Y+3, r25	; 0x03
     1bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
     1be:	19 82       	std	Y+1, r1	; 0x01
     1c0:	0e c0       	rjmp	.+28     	; 0x1de <UART_Transmite_String+0x30>
	while (str[i]!='\0'){
	UART_Transmite(str[i]);
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	28 2f       	mov	r18, r24
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ca:	9b 81       	ldd	r25, Y+3	; 0x03
     1cc:	fc 01       	movw	r30, r24
     1ce:	e2 0f       	add	r30, r18
     1d0:	f3 1f       	adc	r31, r19
     1d2:	80 81       	ld	r24, Z
     1d4:	0e 94 bd 00 	call	0x17a	; 0x17a <UART_Transmite>
	i++;
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	8f 5f       	subi	r24, 0xFF	; 255
     1dc:	89 83       	std	Y+1, r24	; 0x01
	UDR=Data;
}

void UART_Transmite_String(uint8_t *str){
	uint8_t i=0;
	while (str[i]!='\0'){
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	28 2f       	mov	r18, r24
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	8a 81       	ldd	r24, Y+2	; 0x02
     1e6:	9b 81       	ldd	r25, Y+3	; 0x03
     1e8:	fc 01       	movw	r30, r24
     1ea:	e2 0f       	add	r30, r18
     1ec:	f3 1f       	adc	r31, r19
     1ee:	80 81       	ld	r24, Z
     1f0:	88 23       	and	r24, r24
     1f2:	39 f7       	brne	.-50     	; 0x1c2 <UART_Transmite_String+0x14>
	UART_Transmite(str[i]);
	i++;
}
}
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	0f 90       	pop	r0
     1fa:	cf 91       	pop	r28
     1fc:	df 91       	pop	r29
     1fe:	08 95       	ret

00000200 <UART_Recive_String>:


void UART_Recive_String(uint8_t *str){
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	df 93       	push	r29
     206:	cf 93       	push	r28
     208:	00 d0       	rcall	.+0      	; 0x20a <UART_Recive_String+0xa>
     20a:	0f 92       	push	r0
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	9b 83       	std	Y+3, r25	; 0x03
     212:	8a 83       	std	Y+2, r24	; 0x02
uint8_t i=0;
     214:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_Recive();
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	28 2f       	mov	r18, r24
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
     21e:	9b 81       	ldd	r25, Y+3	; 0x03
     220:	8c 01       	movw	r16, r24
     222:	02 0f       	add	r16, r18
     224:	13 1f       	adc	r17, r19
     226:	0e 94 aa 00 	call	0x154	; 0x154 <UART_Recive>
     22a:	f8 01       	movw	r30, r16
     22c:	80 83       	st	Z, r24
     22e:	0f c0       	rjmp	.+30     	; 0x24e <UART_Recive_String+0x4e>
	while(str[i]!='#'){

		i++;
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	8f 5f       	subi	r24, 0xFF	; 255
     234:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_Recive();
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	28 2f       	mov	r18, r24
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	9b 81       	ldd	r25, Y+3	; 0x03
     240:	8c 01       	movw	r16, r24
     242:	02 0f       	add	r16, r18
     244:	13 1f       	adc	r17, r19
     246:	0e 94 aa 00 	call	0x154	; 0x154 <UART_Recive>
     24a:	f8 01       	movw	r30, r16
     24c:	80 83       	st	Z, r24


void UART_Recive_String(uint8_t *str){
uint8_t i=0;
	str[i]=UART_Recive();
	while(str[i]!='#'){
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	8a 81       	ldd	r24, Y+2	; 0x02
     256:	9b 81       	ldd	r25, Y+3	; 0x03
     258:	fc 01       	movw	r30, r24
     25a:	e2 0f       	add	r30, r18
     25c:	f3 1f       	adc	r31, r19
     25e:	80 81       	ld	r24, Z
     260:	83 32       	cpi	r24, 0x23	; 35
     262:	31 f7       	brne	.-52     	; 0x230 <UART_Recive_String+0x30>
		str[i]=UART_Recive();

	}
	//str[i]='#';
	//str[i+1]='\0';
	str[i+1]='\0';
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	88 2f       	mov	r24, r24
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	9c 01       	movw	r18, r24
     26c:	2f 5f       	subi	r18, 0xFF	; 255
     26e:	3f 4f       	sbci	r19, 0xFF	; 255
     270:	8a 81       	ldd	r24, Y+2	; 0x02
     272:	9b 81       	ldd	r25, Y+3	; 0x03
     274:	fc 01       	movw	r30, r24
     276:	e2 0f       	add	r30, r18
     278:	f3 1f       	adc	r31, r19
     27a:	10 82       	st	Z, r1
}
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <I2C_MasterInit>:

//#include "I2C_Private.h"

//#include <util/delay.h>

void I2C_MasterInit(void){
     28c:	df 93       	push	r29
     28e:	cf 93       	push	r28
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
	// prescaler =1
		CLRBIT(TWSR,0);
     294:	a1 e2       	ldi	r26, 0x21	; 33
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	e1 e2       	ldi	r30, 0x21	; 33
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	8e 7f       	andi	r24, 0xFE	; 254
     2a0:	8c 93       	st	X, r24
		CLRBIT(TWSR,1);
     2a2:	a1 e2       	ldi	r26, 0x21	; 33
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e1 e2       	ldi	r30, 0x21	; 33
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8d 7f       	andi	r24, 0xFD	; 253
     2ae:	8c 93       	st	X, r24
		TWBR=32;//400khz
     2b0:	e0 e2       	ldi	r30, 0x20	; 32
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 e2       	ldi	r24, 0x20	; 32
     2b6:	80 83       	st	Z, r24
		//SETBIT(TWCR,6);// enable ACK

		SETBIT(TWCR,2);// enable
     2b8:	a6 e5       	ldi	r26, 0x56	; 86
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e6 e5       	ldi	r30, 0x56	; 86
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	84 60       	ori	r24, 0x04	; 4
     2c4:	8c 93       	st	X, r24

		TWAR=0b00000111;
     2c6:	e2 e2       	ldi	r30, 0x22	; 34
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	87 e0       	ldi	r24, 0x07	; 7
     2cc:	80 83       	st	Z, r24



}
     2ce:	cf 91       	pop	r28
     2d0:	df 91       	pop	r29
     2d2:	08 95       	ret

000002d4 <I2C_MasterStart>:
void I2C_MasterStart(void){
     2d4:	df 93       	push	r29
     2d6:	cf 93       	push	r28
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,5);// enable start bit
     2dc:	a6 e5       	ldi	r26, 0x56	; 86
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	e6 e5       	ldi	r30, 0x56	; 86
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	80 62       	ori	r24, 0x20	; 32
     2e8:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
     2ea:	a6 e5       	ldi	r26, 0x56	; 86
     2ec:	b0 e0       	ldi	r27, 0x00	; 0
     2ee:	e6 e5       	ldi	r30, 0x56	; 86
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	80 81       	ld	r24, Z
     2f4:	80 68       	ori	r24, 0x80	; 128
     2f6:	8c 93       	st	X, r24

	while(GETBIT(TWCR,7)==0);
     2f8:	e6 e5       	ldi	r30, 0x56	; 86
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	88 23       	and	r24, r24
     300:	dc f7       	brge	.-10     	; 0x2f8 <I2C_MasterStart+0x24>

}
     302:	cf 91       	pop	r28
     304:	df 91       	pop	r29
     306:	08 95       	ret

00000308 <I2C_SlaveInit>:


void I2C_SlaveInit(void){
     308:	df 93       	push	r29
     30a:	cf 93       	push	r28
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
	TWBR=32;//400khz
     310:	e0 e2       	ldi	r30, 0x20	; 32
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	80 e2       	ldi	r24, 0x20	; 32
     316:	80 83       	st	Z, r24


	TWAR=0b00000010;
     318:	e2 e2       	ldi	r30, 0x22	; 34
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	80 83       	st	Z, r24
	SETBIT(TWCR,6);// enable ack
     320:	a6 e5       	ldi	r26, 0x56	; 86
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	e6 e5       	ldi	r30, 0x56	; 86
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	8c 93       	st	X, r24

	SETBIT(TWCR,2);// enable i2c
     32e:	a6 e5       	ldi	r26, 0x56	; 86
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	e6 e5       	ldi	r30, 0x56	; 86
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	84 60       	ori	r24, 0x04	; 4
     33a:	8c 93       	st	X, r24

	//SETBIT(TWCR,7);// clear flag
	//while(GETBIT(TWCR,7)==0);


	I2C_ReadDataByte();
     33c:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_ReadDataByte>


}
     340:	cf 91       	pop	r28
     342:	df 91       	pop	r29
     344:	08 95       	ret

00000346 <I2C_SendSlaveAddressWithWrite>:

void I2C_SendSlaveAddressWithWrite(uint8_t address){
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	0f 92       	push	r0
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
     352:	e3 e2       	ldi	r30, 0x23	; 35
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	88 0f       	add	r24, r24
     35a:	80 83       	st	Z, r24
	/* Write operation */
		CLRBIT(TWDR,0);
     35c:	a3 e2       	ldi	r26, 0x23	; 35
     35e:	b0 e0       	ldi	r27, 0x00	; 0
     360:	e3 e2       	ldi	r30, 0x23	; 35
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	8e 7f       	andi	r24, 0xFE	; 254
     368:	8c 93       	st	X, r24
			CLRBIT(TWCR,5);// clear start bit
     36a:	a6 e5       	ldi	r26, 0x56	; 86
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	e6 e5       	ldi	r30, 0x56	; 86
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	8f 7d       	andi	r24, 0xDF	; 223
     376:	8c 93       	st	X, r24
			SETBIT(TWCR,7);// clear flag
     378:	a6 e5       	ldi	r26, 0x56	; 86
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	e6 e5       	ldi	r30, 0x56	; 86
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	80 68       	ori	r24, 0x80	; 128
     384:	8c 93       	st	X, r24
			while(GETBIT(TWCR,7)==0);
     386:	e6 e5       	ldi	r30, 0x56	; 86
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	88 23       	and	r24, r24
     38e:	dc f7       	brge	.-10     	; 0x386 <I2C_SendSlaveAddressWithWrite+0x40>
}
     390:	0f 90       	pop	r0
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <I2C_SendSlaveAddressWithRead>:

void I2C_SendSlaveAddressWithRead(uint8_t address){
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	0f 92       	push	r0
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
     3a4:	e3 e2       	ldi	r30, 0x23	; 35
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	88 0f       	add	r24, r24
     3ac:	80 83       	st	Z, r24
	SETBIT(TWDR,0);// read
     3ae:	a3 e2       	ldi	r26, 0x23	; 35
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	e3 e2       	ldi	r30, 0x23	; 35
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	81 60       	ori	r24, 0x01	; 1
     3ba:	8c 93       	st	X, r24

	CLRBIT(TWCR,5);// clear start bit
     3bc:	a6 e5       	ldi	r26, 0x56	; 86
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	e6 e5       	ldi	r30, 0x56	; 86
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	8f 7d       	andi	r24, 0xDF	; 223
     3c8:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
     3ca:	a6 e5       	ldi	r26, 0x56	; 86
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	e6 e5       	ldi	r30, 0x56	; 86
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	8c 93       	st	X, r24
	while(GETBIT(TWCR,7)==0);
     3d8:	e6 e5       	ldi	r30, 0x56	; 86
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	88 23       	and	r24, r24
     3e0:	dc f7       	brge	.-10     	; 0x3d8 <I2C_SendSlaveAddressWithRead+0x40>
}
     3e2:	0f 90       	pop	r0
     3e4:	cf 91       	pop	r28
     3e6:	df 91       	pop	r29
     3e8:	08 95       	ret

000003ea <I2C_WriteDataByte>:

void I2C_WriteDataByte(uint8_t data){
     3ea:	df 93       	push	r29
     3ec:	cf 93       	push	r28
     3ee:	0f 92       	push	r0
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	89 83       	std	Y+1, r24	; 0x01

TWDR=data;
     3f6:	e3 e2       	ldi	r30, 0x23	; 35
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	80 83       	st	Z, r24
SETBIT(TWCR,7);// clear flag
     3fe:	a6 e5       	ldi	r26, 0x56	; 86
     400:	b0 e0       	ldi	r27, 0x00	; 0
     402:	e6 e5       	ldi	r30, 0x56	; 86
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	80 68       	ori	r24, 0x80	; 128
     40a:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
     40c:	e6 e5       	ldi	r30, 0x56	; 86
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	88 23       	and	r24, r24
     414:	dc f7       	brge	.-10     	; 0x40c <I2C_WriteDataByte+0x22>

}
     416:	0f 90       	pop	r0
     418:	cf 91       	pop	r28
     41a:	df 91       	pop	r29
     41c:	08 95       	ret

0000041e <I2C_ReadDataByte>:
uint8_t I2C_ReadDataByte(void){
     41e:	df 93       	push	r29
     420:	cf 93       	push	r28
     422:	0f 92       	push	r0
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
SETBIT(TWCR,7);// clear flag
     428:	a6 e5       	ldi	r26, 0x56	; 86
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	e6 e5       	ldi	r30, 0x56	; 86
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	80 68       	ori	r24, 0x80	; 128
     434:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
     436:	e6 e5       	ldi	r30, 0x56	; 86
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	88 23       	and	r24, r24
     43e:	dc f7       	brge	.-10     	; 0x436 <I2C_ReadDataByte+0x18>

value=TWDR;
     440:	e3 e2       	ldi	r30, 0x23	; 35
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	89 83       	std	Y+1, r24	; 0x01
return value;
     448:	89 81       	ldd	r24, Y+1	; 0x01
}
     44a:	0f 90       	pop	r0
     44c:	cf 91       	pop	r28
     44e:	df 91       	pop	r29
     450:	08 95       	ret

00000452 <I2C_MasterStop>:
void I2C_MasterStop(void){
     452:	df 93       	push	r29
     454:	cf 93       	push	r28
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,4);// enable stop bit
     45a:	a6 e5       	ldi	r26, 0x56	; 86
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	e6 e5       	ldi	r30, 0x56	; 86
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	80 61       	ori	r24, 0x10	; 16
     466:	8c 93       	st	X, r24
	SETBIT(TWCR,2);// enable i2c bit
     468:	a6 e5       	ldi	r26, 0x56	; 86
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	e6 e5       	ldi	r30, 0x56	; 86
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	84 60       	ori	r24, 0x04	; 4
     474:	8c 93       	st	X, r24

	SETBIT(TWCR,7);// clear flag
     476:	a6 e5       	ldi	r26, 0x56	; 86
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	e6 e5       	ldi	r30, 0x56	; 86
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	80 68       	ori	r24, 0x80	; 128
     482:	8c 93       	st	X, r24



}
     484:	cf 91       	pop	r28
     486:	df 91       	pop	r29
     488:	08 95       	ret

0000048a <DIO_voidSetPinValue>:
 * @param EN_Pin    PIN Number
 * @param EN_Value  HIGH or LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	28 97       	sbiw	r28, 0x08	; 8
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
     49e:	8a 83       	std	Y+2, r24	; 0x02
     4a0:	6b 83       	std	Y+3, r22	; 0x03
     4a2:	4c 83       	std	Y+4, r20	; 0x04
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
     4a4:	84 e0       	ldi	r24, 0x04	; 4
     4a6:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Value == LOW)
     4a8:	8c 81       	ldd	r24, Y+4	; 0x04
     4aa:	88 23       	and	r24, r24
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <DIO_voidSetPinValue+0x26>
     4ae:	76 c0       	rjmp	.+236    	; 0x59c <DIO_voidSetPinValue+0x112>
    {
        switch (EN_Port)
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	28 2f       	mov	r18, r24
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	38 87       	std	Y+8, r19	; 0x08
     4b8:	2f 83       	std	Y+7, r18	; 0x07
     4ba:	8f 81       	ldd	r24, Y+7	; 0x07
     4bc:	98 85       	ldd	r25, Y+8	; 0x08
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	91 05       	cpc	r25, r1
     4c2:	59 f1       	breq	.+86     	; 0x51a <DIO_voidSetPinValue+0x90>
     4c4:	2f 81       	ldd	r18, Y+7	; 0x07
     4c6:	38 85       	ldd	r19, Y+8	; 0x08
     4c8:	22 30       	cpi	r18, 0x02	; 2
     4ca:	31 05       	cpc	r19, r1
     4cc:	2c f4       	brge	.+10     	; 0x4d8 <DIO_voidSetPinValue+0x4e>
     4ce:	8f 81       	ldd	r24, Y+7	; 0x07
     4d0:	98 85       	ldd	r25, Y+8	; 0x08
     4d2:	00 97       	sbiw	r24, 0x00	; 0
     4d4:	69 f0       	breq	.+26     	; 0x4f0 <DIO_voidSetPinValue+0x66>
     4d6:	60 c0       	rjmp	.+192    	; 0x598 <DIO_voidSetPinValue+0x10e>
     4d8:	2f 81       	ldd	r18, Y+7	; 0x07
     4da:	38 85       	ldd	r19, Y+8	; 0x08
     4dc:	22 30       	cpi	r18, 0x02	; 2
     4de:	31 05       	cpc	r19, r1
     4e0:	89 f1       	breq	.+98     	; 0x544 <DIO_voidSetPinValue+0xba>
     4e2:	8f 81       	ldd	r24, Y+7	; 0x07
     4e4:	98 85       	ldd	r25, Y+8	; 0x08
     4e6:	83 30       	cpi	r24, 0x03	; 3
     4e8:	91 05       	cpc	r25, r1
     4ea:	09 f4       	brne	.+2      	; 0x4ee <DIO_voidSetPinValue+0x64>
     4ec:	40 c0       	rjmp	.+128    	; 0x56e <DIO_voidSetPinValue+0xe4>
     4ee:	54 c0       	rjmp	.+168    	; 0x598 <DIO_voidSetPinValue+0x10e>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
     4f0:	ab e3       	ldi	r26, 0x3B	; 59
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	eb e3       	ldi	r30, 0x3B	; 59
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	48 2f       	mov	r20, r24
     4fc:	8b 81       	ldd	r24, Y+3	; 0x03
     4fe:	28 2f       	mov	r18, r24
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	02 2e       	mov	r0, r18
     508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_voidSetPinValue+0x84>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	0a 94       	dec	r0
     510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_voidSetPinValue+0x80>
     512:	80 95       	com	r24
     514:	84 23       	and	r24, r20
     516:	8c 93       	st	X, r24
     518:	b5 c0       	rjmp	.+362    	; 0x684 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
     51a:	a8 e3       	ldi	r26, 0x38	; 56
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	e8 e3       	ldi	r30, 0x38	; 56
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	48 2f       	mov	r20, r24
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	28 2f       	mov	r18, r24
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	02 2e       	mov	r0, r18
     532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_voidSetPinValue+0xae>
     534:	88 0f       	add	r24, r24
     536:	99 1f       	adc	r25, r25
     538:	0a 94       	dec	r0
     53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_voidSetPinValue+0xaa>
     53c:	80 95       	com	r24
     53e:	84 23       	and	r24, r20
     540:	8c 93       	st	X, r24
     542:	a0 c0       	rjmp	.+320    	; 0x684 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
     544:	a5 e3       	ldi	r26, 0x35	; 53
     546:	b0 e0       	ldi	r27, 0x00	; 0
     548:	e5 e3       	ldi	r30, 0x35	; 53
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	48 2f       	mov	r20, r24
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	28 2f       	mov	r18, r24
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	02 2e       	mov	r0, r18
     55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_voidSetPinValue+0xd8>
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	0a 94       	dec	r0
     564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_voidSetPinValue+0xd4>
     566:	80 95       	com	r24
     568:	84 23       	and	r24, r20
     56a:	8c 93       	st	X, r24
     56c:	8b c0       	rjmp	.+278    	; 0x684 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
     56e:	a2 e3       	ldi	r26, 0x32	; 50
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	e2 e3       	ldi	r30, 0x32	; 50
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	48 2f       	mov	r20, r24
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	28 2f       	mov	r18, r24
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	02 2e       	mov	r0, r18
     586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_voidSetPinValue+0x102>
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	0a 94       	dec	r0
     58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_voidSetPinValue+0xfe>
     590:	80 95       	com	r24
     592:	84 23       	and	r24, r20
     594:	8c 93       	st	X, r24
     596:	76 c0       	rjmp	.+236    	; 0x684 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_DIOValue;
     598:	19 82       	std	Y+1, r1	; 0x01
     59a:	74 c0       	rjmp	.+232    	; 0x684 <DIO_voidSetPinValue+0x1fa>
            break;
        }
    }
    else if (EN_Value == HIGH)
     59c:	8c 81       	ldd	r24, Y+4	; 0x04
     59e:	81 30       	cpi	r24, 0x01	; 1
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <DIO_voidSetPinValue+0x11a>
     5a2:	70 c0       	rjmp	.+224    	; 0x684 <DIO_voidSetPinValue+0x1fa>
    {
        switch (EN_Port)
     5a4:	8a 81       	ldd	r24, Y+2	; 0x02
     5a6:	28 2f       	mov	r18, r24
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	3e 83       	std	Y+6, r19	; 0x06
     5ac:	2d 83       	std	Y+5, r18	; 0x05
     5ae:	8d 81       	ldd	r24, Y+5	; 0x05
     5b0:	9e 81       	ldd	r25, Y+6	; 0x06
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	91 05       	cpc	r25, r1
     5b6:	49 f1       	breq	.+82     	; 0x60a <DIO_voidSetPinValue+0x180>
     5b8:	2d 81       	ldd	r18, Y+5	; 0x05
     5ba:	3e 81       	ldd	r19, Y+6	; 0x06
     5bc:	22 30       	cpi	r18, 0x02	; 2
     5be:	31 05       	cpc	r19, r1
     5c0:	2c f4       	brge	.+10     	; 0x5cc <DIO_voidSetPinValue+0x142>
     5c2:	8d 81       	ldd	r24, Y+5	; 0x05
     5c4:	9e 81       	ldd	r25, Y+6	; 0x06
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	61 f0       	breq	.+24     	; 0x5e2 <DIO_voidSetPinValue+0x158>
     5ca:	5b c0       	rjmp	.+182    	; 0x682 <DIO_voidSetPinValue+0x1f8>
     5cc:	2d 81       	ldd	r18, Y+5	; 0x05
     5ce:	3e 81       	ldd	r19, Y+6	; 0x06
     5d0:	22 30       	cpi	r18, 0x02	; 2
     5d2:	31 05       	cpc	r19, r1
     5d4:	71 f1       	breq	.+92     	; 0x632 <DIO_voidSetPinValue+0x1a8>
     5d6:	8d 81       	ldd	r24, Y+5	; 0x05
     5d8:	9e 81       	ldd	r25, Y+6	; 0x06
     5da:	83 30       	cpi	r24, 0x03	; 3
     5dc:	91 05       	cpc	r25, r1
     5de:	e9 f1       	breq	.+122    	; 0x65a <DIO_voidSetPinValue+0x1d0>
     5e0:	50 c0       	rjmp	.+160    	; 0x682 <DIO_voidSetPinValue+0x1f8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
     5e2:	ab e3       	ldi	r26, 0x3B	; 59
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	eb e3       	ldi	r30, 0x3B	; 59
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	48 2f       	mov	r20, r24
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
     5f0:	28 2f       	mov	r18, r24
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	02 2e       	mov	r0, r18
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_voidSetPinValue+0x176>
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	0a 94       	dec	r0
     602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_voidSetPinValue+0x172>
     604:	84 2b       	or	r24, r20
     606:	8c 93       	st	X, r24
     608:	3d c0       	rjmp	.+122    	; 0x684 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
     60a:	a8 e3       	ldi	r26, 0x38	; 56
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e8 e3       	ldi	r30, 0x38	; 56
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	48 2f       	mov	r20, r24
     616:	8b 81       	ldd	r24, Y+3	; 0x03
     618:	28 2f       	mov	r18, r24
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	02 2e       	mov	r0, r18
     622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_voidSetPinValue+0x19e>
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	0a 94       	dec	r0
     62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_voidSetPinValue+0x19a>
     62c:	84 2b       	or	r24, r20
     62e:	8c 93       	st	X, r24
     630:	29 c0       	rjmp	.+82     	; 0x684 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
     632:	a5 e3       	ldi	r26, 0x35	; 53
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	e5 e3       	ldi	r30, 0x35	; 53
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 81       	ld	r24, Z
     63c:	48 2f       	mov	r20, r24
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	28 2f       	mov	r18, r24
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	02 2e       	mov	r0, r18
     64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_voidSetPinValue+0x1c6>
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	0a 94       	dec	r0
     652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_voidSetPinValue+0x1c2>
     654:	84 2b       	or	r24, r20
     656:	8c 93       	st	X, r24
     658:	15 c0       	rjmp	.+42     	; 0x684 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
     65a:	a2 e3       	ldi	r26, 0x32	; 50
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	e2 e3       	ldi	r30, 0x32	; 50
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	48 2f       	mov	r20, r24
     666:	8b 81       	ldd	r24, Y+3	; 0x03
     668:	28 2f       	mov	r18, r24
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	02 2e       	mov	r0, r18
     672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_voidSetPinValue+0x1ee>
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	0a 94       	dec	r0
     67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_voidSetPinValue+0x1ea>
     67c:	84 2b       	or	r24, r20
     67e:	8c 93       	st	X, r24
     680:	01 c0       	rjmp	.+2      	; 0x684 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_DIOValue;
     682:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
     684:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinValue */
     686:	28 96       	adiw	r28, 0x08	; 8
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
     692:	cf 91       	pop	r28
     694:	df 91       	pop	r29
     696:	08 95       	ret

00000698 <DIO_voidSetPinDirection>:
 * @param EN_Pin  PIN Number
 * @param EN_Direction Direction of the Pin INPUT | OUTPUT
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
     698:	df 93       	push	r29
     69a:	cf 93       	push	r28
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	28 97       	sbiw	r28, 0x08	; 8
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	8a 83       	std	Y+2, r24	; 0x02
     6ae:	6b 83       	std	Y+3, r22	; 0x03
     6b0:	4c 83       	std	Y+4, r20	; 0x04
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Direction == INPUT)
     6b6:	8c 81       	ldd	r24, Y+4	; 0x04
     6b8:	88 23       	and	r24, r24
     6ba:	09 f0       	breq	.+2      	; 0x6be <DIO_voidSetPinDirection+0x26>
     6bc:	77 c0       	rjmp	.+238    	; 0x7ac <DIO_voidSetPinDirection+0x114>
    {
        switch (EN_port)
     6be:	8a 81       	ldd	r24, Y+2	; 0x02
     6c0:	28 2f       	mov	r18, r24
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	38 87       	std	Y+8, r19	; 0x08
     6c6:	2f 83       	std	Y+7, r18	; 0x07
     6c8:	8f 81       	ldd	r24, Y+7	; 0x07
     6ca:	98 85       	ldd	r25, Y+8	; 0x08
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	91 05       	cpc	r25, r1
     6d0:	59 f1       	breq	.+86     	; 0x728 <DIO_voidSetPinDirection+0x90>
     6d2:	2f 81       	ldd	r18, Y+7	; 0x07
     6d4:	38 85       	ldd	r19, Y+8	; 0x08
     6d6:	22 30       	cpi	r18, 0x02	; 2
     6d8:	31 05       	cpc	r19, r1
     6da:	2c f4       	brge	.+10     	; 0x6e6 <DIO_voidSetPinDirection+0x4e>
     6dc:	8f 81       	ldd	r24, Y+7	; 0x07
     6de:	98 85       	ldd	r25, Y+8	; 0x08
     6e0:	00 97       	sbiw	r24, 0x00	; 0
     6e2:	69 f0       	breq	.+26     	; 0x6fe <DIO_voidSetPinDirection+0x66>
     6e4:	60 c0       	rjmp	.+192    	; 0x7a6 <DIO_voidSetPinDirection+0x10e>
     6e6:	2f 81       	ldd	r18, Y+7	; 0x07
     6e8:	38 85       	ldd	r19, Y+8	; 0x08
     6ea:	22 30       	cpi	r18, 0x02	; 2
     6ec:	31 05       	cpc	r19, r1
     6ee:	89 f1       	breq	.+98     	; 0x752 <DIO_voidSetPinDirection+0xba>
     6f0:	8f 81       	ldd	r24, Y+7	; 0x07
     6f2:	98 85       	ldd	r25, Y+8	; 0x08
     6f4:	83 30       	cpi	r24, 0x03	; 3
     6f6:	91 05       	cpc	r25, r1
     6f8:	09 f4       	brne	.+2      	; 0x6fc <DIO_voidSetPinDirection+0x64>
     6fa:	40 c0       	rjmp	.+128    	; 0x77c <DIO_voidSetPinDirection+0xe4>
     6fc:	54 c0       	rjmp	.+168    	; 0x7a6 <DIO_voidSetPinDirection+0x10e>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
     6fe:	aa e3       	ldi	r26, 0x3A	; 58
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	ea e3       	ldi	r30, 0x3A	; 58
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	48 2f       	mov	r20, r24
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	28 2f       	mov	r18, r24
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	02 2e       	mov	r0, r18
     716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_voidSetPinDirection+0x84>
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	0a 94       	dec	r0
     71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_voidSetPinDirection+0x80>
     720:	80 95       	com	r24
     722:	84 23       	and	r24, r20
     724:	8c 93       	st	X, r24
     726:	b7 c0       	rjmp	.+366    	; 0x896 <__stack+0x37>
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
     728:	a7 e3       	ldi	r26, 0x37	; 55
     72a:	b0 e0       	ldi	r27, 0x00	; 0
     72c:	e7 e3       	ldi	r30, 0x37	; 55
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	48 2f       	mov	r20, r24
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	28 2f       	mov	r18, r24
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	02 2e       	mov	r0, r18
     740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_voidSetPinDirection+0xae>
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	0a 94       	dec	r0
     748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_voidSetPinDirection+0xaa>
     74a:	80 95       	com	r24
     74c:	84 23       	and	r24, r20
     74e:	8c 93       	st	X, r24
     750:	a2 c0       	rjmp	.+324    	; 0x896 <__stack+0x37>
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
     752:	a4 e3       	ldi	r26, 0x34	; 52
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	e4 e3       	ldi	r30, 0x34	; 52
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	48 2f       	mov	r20, r24
     75e:	8b 81       	ldd	r24, Y+3	; 0x03
     760:	28 2f       	mov	r18, r24
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	02 2e       	mov	r0, r18
     76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_voidSetPinDirection+0xd8>
     76c:	88 0f       	add	r24, r24
     76e:	99 1f       	adc	r25, r25
     770:	0a 94       	dec	r0
     772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_voidSetPinDirection+0xd4>
     774:	80 95       	com	r24
     776:	84 23       	and	r24, r20
     778:	8c 93       	st	X, r24
     77a:	8d c0       	rjmp	.+282    	; 0x896 <__stack+0x37>
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
     77c:	a1 e3       	ldi	r26, 0x31	; 49
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	e1 e3       	ldi	r30, 0x31	; 49
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	48 2f       	mov	r20, r24
     788:	8b 81       	ldd	r24, Y+3	; 0x03
     78a:	28 2f       	mov	r18, r24
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	02 2e       	mov	r0, r18
     794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_voidSetPinDirection+0x102>
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	0a 94       	dec	r0
     79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_voidSetPinDirection+0xfe>
     79e:	80 95       	com	r24
     7a0:	84 23       	and	r24, r20
     7a2:	8c 93       	st	X, r24
     7a4:	78 c0       	rjmp	.+240    	; 0x896 <__stack+0x37>
            break;
        default:
            state = E_DIODirec;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	89 83       	std	Y+1, r24	; 0x01
     7aa:	75 c0       	rjmp	.+234    	; 0x896 <__stack+0x37>
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
     7ac:	8c 81       	ldd	r24, Y+4	; 0x04
     7ae:	81 30       	cpi	r24, 0x01	; 1
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <DIO_voidSetPinDirection+0x11c>
     7b2:	71 c0       	rjmp	.+226    	; 0x896 <__stack+0x37>
    {
        switch (EN_port)
     7b4:	8a 81       	ldd	r24, Y+2	; 0x02
     7b6:	28 2f       	mov	r18, r24
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	3e 83       	std	Y+6, r19	; 0x06
     7bc:	2d 83       	std	Y+5, r18	; 0x05
     7be:	8d 81       	ldd	r24, Y+5	; 0x05
     7c0:	9e 81       	ldd	r25, Y+6	; 0x06
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	91 05       	cpc	r25, r1
     7c6:	49 f1       	breq	.+82     	; 0x81a <DIO_voidSetPinDirection+0x182>
     7c8:	2d 81       	ldd	r18, Y+5	; 0x05
     7ca:	3e 81       	ldd	r19, Y+6	; 0x06
     7cc:	22 30       	cpi	r18, 0x02	; 2
     7ce:	31 05       	cpc	r19, r1
     7d0:	2c f4       	brge	.+10     	; 0x7dc <DIO_voidSetPinDirection+0x144>
     7d2:	8d 81       	ldd	r24, Y+5	; 0x05
     7d4:	9e 81       	ldd	r25, Y+6	; 0x06
     7d6:	00 97       	sbiw	r24, 0x00	; 0
     7d8:	61 f0       	breq	.+24     	; 0x7f2 <DIO_voidSetPinDirection+0x15a>
     7da:	5b c0       	rjmp	.+182    	; 0x892 <__stack+0x33>
     7dc:	2d 81       	ldd	r18, Y+5	; 0x05
     7de:	3e 81       	ldd	r19, Y+6	; 0x06
     7e0:	22 30       	cpi	r18, 0x02	; 2
     7e2:	31 05       	cpc	r19, r1
     7e4:	71 f1       	breq	.+92     	; 0x842 <DIO_voidSetPinDirection+0x1aa>
     7e6:	8d 81       	ldd	r24, Y+5	; 0x05
     7e8:	9e 81       	ldd	r25, Y+6	; 0x06
     7ea:	83 30       	cpi	r24, 0x03	; 3
     7ec:	91 05       	cpc	r25, r1
     7ee:	e9 f1       	breq	.+122    	; 0x86a <__stack+0xb>
     7f0:	50 c0       	rjmp	.+160    	; 0x892 <__stack+0x33>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
     7f2:	aa e3       	ldi	r26, 0x3A	; 58
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	ea e3       	ldi	r30, 0x3A	; 58
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	48 2f       	mov	r20, r24
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	28 2f       	mov	r18, r24
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	02 2e       	mov	r0, r18
     80a:	02 c0       	rjmp	.+4      	; 0x810 <DIO_voidSetPinDirection+0x178>
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	0a 94       	dec	r0
     812:	e2 f7       	brpl	.-8      	; 0x80c <DIO_voidSetPinDirection+0x174>
     814:	84 2b       	or	r24, r20
     816:	8c 93       	st	X, r24
     818:	3e c0       	rjmp	.+124    	; 0x896 <__stack+0x37>
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
     81a:	a7 e3       	ldi	r26, 0x37	; 55
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e7 e3       	ldi	r30, 0x37	; 55
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	48 2f       	mov	r20, r24
     826:	8b 81       	ldd	r24, Y+3	; 0x03
     828:	28 2f       	mov	r18, r24
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	02 2e       	mov	r0, r18
     832:	02 c0       	rjmp	.+4      	; 0x838 <DIO_voidSetPinDirection+0x1a0>
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	0a 94       	dec	r0
     83a:	e2 f7       	brpl	.-8      	; 0x834 <DIO_voidSetPinDirection+0x19c>
     83c:	84 2b       	or	r24, r20
     83e:	8c 93       	st	X, r24
     840:	2a c0       	rjmp	.+84     	; 0x896 <__stack+0x37>
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
     842:	a4 e3       	ldi	r26, 0x34	; 52
     844:	b0 e0       	ldi	r27, 0x00	; 0
     846:	e4 e3       	ldi	r30, 0x34	; 52
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	48 2f       	mov	r20, r24
     84e:	8b 81       	ldd	r24, Y+3	; 0x03
     850:	28 2f       	mov	r18, r24
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	02 2e       	mov	r0, r18
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	0a 94       	dec	r0
     862:	e2 f7       	brpl	.-8      	; 0x85c <DIO_voidSetPinDirection+0x1c4>
     864:	84 2b       	or	r24, r20
     866:	8c 93       	st	X, r24
     868:	16 c0       	rjmp	.+44     	; 0x896 <__stack+0x37>
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
     86a:	a1 e3       	ldi	r26, 0x31	; 49
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	e1 e3       	ldi	r30, 0x31	; 49
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	48 2f       	mov	r20, r24
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	28 2f       	mov	r18, r24
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 2e       	mov	r0, r18
     882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	0a 94       	dec	r0
     88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
     88c:	84 2b       	or	r24, r20
     88e:	8c 93       	st	X, r24
     890:	02 c0       	rjmp	.+4      	; 0x896 <__stack+0x37>
            break;
        default:
            state = E_DIODirec;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }
    return state;
     896:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinDirection */
     898:	28 96       	adiw	r28, 0x08	; 8
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	cf 91       	pop	r28
     8a6:	df 91       	pop	r29
     8a8:	08 95       	ret

000008aa <DIO_u8GetPinValue>:
 * @param EN_Port           PORT Name
 * @param EN_Pin            PIN Number
 * @return EN_value_type    return Pin HIGH | LOW
 */
EN_value_type DIO_u8GetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <DIO_u8GetPinValue+0x6>
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <DIO_u8GetPinValue+0x8>
     8b2:	0f 92       	push	r0
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	8a 83       	std	Y+2, r24	; 0x02
     8ba:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
     8bc:	8a 81       	ldd	r24, Y+2	; 0x02
     8be:	28 2f       	mov	r18, r24
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	3d 83       	std	Y+5, r19	; 0x05
     8c4:	2c 83       	std	Y+4, r18	; 0x04
     8c6:	4c 81       	ldd	r20, Y+4	; 0x04
     8c8:	5d 81       	ldd	r21, Y+5	; 0x05
     8ca:	41 30       	cpi	r20, 0x01	; 1
     8cc:	51 05       	cpc	r21, r1
     8ce:	41 f1       	breq	.+80     	; 0x920 <DIO_u8GetPinValue+0x76>
     8d0:	8c 81       	ldd	r24, Y+4	; 0x04
     8d2:	9d 81       	ldd	r25, Y+5	; 0x05
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	91 05       	cpc	r25, r1
     8d8:	34 f4       	brge	.+12     	; 0x8e6 <DIO_u8GetPinValue+0x3c>
     8da:	2c 81       	ldd	r18, Y+4	; 0x04
     8dc:	3d 81       	ldd	r19, Y+5	; 0x05
     8de:	21 15       	cp	r18, r1
     8e0:	31 05       	cpc	r19, r1
     8e2:	61 f0       	breq	.+24     	; 0x8fc <DIO_u8GetPinValue+0x52>
     8e4:	52 c0       	rjmp	.+164    	; 0x98a <DIO_u8GetPinValue+0xe0>
     8e6:	4c 81       	ldd	r20, Y+4	; 0x04
     8e8:	5d 81       	ldd	r21, Y+5	; 0x05
     8ea:	42 30       	cpi	r20, 0x02	; 2
     8ec:	51 05       	cpc	r21, r1
     8ee:	51 f1       	breq	.+84     	; 0x944 <DIO_u8GetPinValue+0x9a>
     8f0:	8c 81       	ldd	r24, Y+4	; 0x04
     8f2:	9d 81       	ldd	r25, Y+5	; 0x05
     8f4:	83 30       	cpi	r24, 0x03	; 3
     8f6:	91 05       	cpc	r25, r1
     8f8:	b9 f1       	breq	.+110    	; 0x968 <DIO_u8GetPinValue+0xbe>
     8fa:	47 c0       	rjmp	.+142    	; 0x98a <DIO_u8GetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
     8fc:	e9 e3       	ldi	r30, 0x39	; 57
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	28 2f       	mov	r18, r24
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	8b 81       	ldd	r24, Y+3	; 0x03
     908:	88 2f       	mov	r24, r24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a9 01       	movw	r20, r18
     90e:	02 c0       	rjmp	.+4      	; 0x914 <DIO_u8GetPinValue+0x6a>
     910:	55 95       	asr	r21
     912:	47 95       	ror	r20
     914:	8a 95       	dec	r24
     916:	e2 f7       	brpl	.-8      	; 0x910 <DIO_u8GetPinValue+0x66>
     918:	ca 01       	movw	r24, r20
     91a:	81 70       	andi	r24, 0x01	; 1
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	35 c0       	rjmp	.+106    	; 0x98a <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
     920:	e6 e3       	ldi	r30, 0x36	; 54
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	28 2f       	mov	r18, r24
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	8b 81       	ldd	r24, Y+3	; 0x03
     92c:	88 2f       	mov	r24, r24
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	a9 01       	movw	r20, r18
     932:	02 c0       	rjmp	.+4      	; 0x938 <DIO_u8GetPinValue+0x8e>
     934:	55 95       	asr	r21
     936:	47 95       	ror	r20
     938:	8a 95       	dec	r24
     93a:	e2 f7       	brpl	.-8      	; 0x934 <DIO_u8GetPinValue+0x8a>
     93c:	ca 01       	movw	r24, r20
     93e:	81 70       	andi	r24, 0x01	; 1
     940:	89 83       	std	Y+1, r24	; 0x01
     942:	23 c0       	rjmp	.+70     	; 0x98a <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
     944:	e3 e3       	ldi	r30, 0x33	; 51
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	28 2f       	mov	r18, r24
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	88 2f       	mov	r24, r24
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	a9 01       	movw	r20, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_u8GetPinValue+0xb2>
     958:	55 95       	asr	r21
     95a:	47 95       	ror	r20
     95c:	8a 95       	dec	r24
     95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_u8GetPinValue+0xae>
     960:	ca 01       	movw	r24, r20
     962:	81 70       	andi	r24, 0x01	; 1
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	11 c0       	rjmp	.+34     	; 0x98a <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
     968:	e0 e3       	ldi	r30, 0x30	; 48
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	8b 81       	ldd	r24, Y+3	; 0x03
     974:	88 2f       	mov	r24, r24
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	a9 01       	movw	r20, r18
     97a:	02 c0       	rjmp	.+4      	; 0x980 <DIO_u8GetPinValue+0xd6>
     97c:	55 95       	asr	r21
     97e:	47 95       	ror	r20
     980:	8a 95       	dec	r24
     982:	e2 f7       	brpl	.-8      	; 0x97c <DIO_u8GetPinValue+0xd2>
     984:	ca 01       	movw	r24, r20
     986:	81 70       	andi	r24, 0x01	; 1
     988:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
     98a:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_u8GetPinValue */
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	08 95       	ret

0000099c <DIO_voidTogPin>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidTogPin(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <DIO_voidTogPin+0x6>
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <DIO_voidTogPin+0x8>
     9a4:	0f 92       	push	r0
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	8a 83       	std	Y+2, r24	; 0x02
     9ac:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
     9ae:	84 e0       	ldi	r24, 0x04	; 4
     9b0:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
     9b2:	8a 81       	ldd	r24, Y+2	; 0x02
     9b4:	28 2f       	mov	r18, r24
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	3d 83       	std	Y+5, r19	; 0x05
     9ba:	2c 83       	std	Y+4, r18	; 0x04
     9bc:	8c 81       	ldd	r24, Y+4	; 0x04
     9be:	9d 81       	ldd	r25, Y+5	; 0x05
     9c0:	81 30       	cpi	r24, 0x01	; 1
     9c2:	91 05       	cpc	r25, r1
     9c4:	49 f1       	breq	.+82     	; 0xa18 <DIO_voidTogPin+0x7c>
     9c6:	2c 81       	ldd	r18, Y+4	; 0x04
     9c8:	3d 81       	ldd	r19, Y+5	; 0x05
     9ca:	22 30       	cpi	r18, 0x02	; 2
     9cc:	31 05       	cpc	r19, r1
     9ce:	2c f4       	brge	.+10     	; 0x9da <DIO_voidTogPin+0x3e>
     9d0:	8c 81       	ldd	r24, Y+4	; 0x04
     9d2:	9d 81       	ldd	r25, Y+5	; 0x05
     9d4:	00 97       	sbiw	r24, 0x00	; 0
     9d6:	61 f0       	breq	.+24     	; 0x9f0 <DIO_voidTogPin+0x54>
     9d8:	5b c0       	rjmp	.+182    	; 0xa90 <DIO_voidTogPin+0xf4>
     9da:	2c 81       	ldd	r18, Y+4	; 0x04
     9dc:	3d 81       	ldd	r19, Y+5	; 0x05
     9de:	22 30       	cpi	r18, 0x02	; 2
     9e0:	31 05       	cpc	r19, r1
     9e2:	71 f1       	breq	.+92     	; 0xa40 <DIO_voidTogPin+0xa4>
     9e4:	8c 81       	ldd	r24, Y+4	; 0x04
     9e6:	9d 81       	ldd	r25, Y+5	; 0x05
     9e8:	83 30       	cpi	r24, 0x03	; 3
     9ea:	91 05       	cpc	r25, r1
     9ec:	e9 f1       	breq	.+122    	; 0xa68 <DIO_voidTogPin+0xcc>
     9ee:	50 c0       	rjmp	.+160    	; 0xa90 <DIO_voidTogPin+0xf4>
    {
    case PORT_A:
        TGLBIT(PORTA, EN_Pin);
     9f0:	ab e3       	ldi	r26, 0x3B	; 59
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	eb e3       	ldi	r30, 0x3B	; 59
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	48 2f       	mov	r20, r24
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	28 2f       	mov	r18, r24
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	02 2e       	mov	r0, r18
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <DIO_voidTogPin+0x72>
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	0a 94       	dec	r0
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <DIO_voidTogPin+0x6e>
     a12:	84 27       	eor	r24, r20
     a14:	8c 93       	st	X, r24
     a16:	3e c0       	rjmp	.+124    	; 0xa94 <DIO_voidTogPin+0xf8>
        break;
    case PORT_B:
        TGLBIT(PORTB, EN_Pin);
     a18:	a8 e3       	ldi	r26, 0x38	; 56
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	e8 e3       	ldi	r30, 0x38	; 56
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	48 2f       	mov	r20, r24
     a24:	8b 81       	ldd	r24, Y+3	; 0x03
     a26:	28 2f       	mov	r18, r24
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	02 2e       	mov	r0, r18
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <DIO_voidTogPin+0x9a>
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	0a 94       	dec	r0
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <DIO_voidTogPin+0x96>
     a3a:	84 27       	eor	r24, r20
     a3c:	8c 93       	st	X, r24
     a3e:	2a c0       	rjmp	.+84     	; 0xa94 <DIO_voidTogPin+0xf8>
        break;
    case PORT_C:
        TGLBIT(PORTC, EN_Pin);
     a40:	a5 e3       	ldi	r26, 0x35	; 53
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e5 e3       	ldi	r30, 0x35	; 53
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	48 2f       	mov	r20, r24
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	28 2f       	mov	r18, r24
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	02 2e       	mov	r0, r18
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <DIO_voidTogPin+0xc2>
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	0a 94       	dec	r0
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <DIO_voidTogPin+0xbe>
     a62:	84 27       	eor	r24, r20
     a64:	8c 93       	st	X, r24
     a66:	16 c0       	rjmp	.+44     	; 0xa94 <DIO_voidTogPin+0xf8>
        break;
    case PORT_D:
        TGLBIT(PORTD, EN_Pin);
     a68:	a2 e3       	ldi	r26, 0x32	; 50
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	e2 e3       	ldi	r30, 0x32	; 50
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	48 2f       	mov	r20, r24
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	28 2f       	mov	r18, r24
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	02 2e       	mov	r0, r18
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_voidTogPin+0xea>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	0a 94       	dec	r0
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_voidTogPin+0xe6>
     a8a:	84 27       	eor	r24, r20
     a8c:	8c 93       	st	X, r24
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <DIO_voidTogPin+0xf8>
        break;
    default:
        state = E_DIOPORT;
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return state;
     a94:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidTogPin */
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	cf 91       	pop	r28
     aa2:	df 91       	pop	r29
     aa4:	08 95       	ret

00000aa6 <DIO_voidSetPortValue>:
 * @param EN_Port PORT Name
 * @param EN_Value HIGH | LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
     aa6:	df 93       	push	r29
     aa8:	cf 93       	push	r28
     aaa:	00 d0       	rcall	.+0      	; 0xaac <DIO_voidSetPortValue+0x6>
     aac:	00 d0       	rcall	.+0      	; 0xaae <DIO_voidSetPortValue+0x8>
     aae:	0f 92       	push	r0
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	8a 83       	std	Y+2, r24	; 0x02
     ab6:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
     ab8:	84 e0       	ldi	r24, 0x04	; 4
     aba:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
     abc:	8a 81       	ldd	r24, Y+2	; 0x02
     abe:	28 2f       	mov	r18, r24
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	3d 83       	std	Y+5, r19	; 0x05
     ac4:	2c 83       	std	Y+4, r18	; 0x04
     ac6:	8c 81       	ldd	r24, Y+4	; 0x04
     ac8:	9d 81       	ldd	r25, Y+5	; 0x05
     aca:	81 30       	cpi	r24, 0x01	; 1
     acc:	91 05       	cpc	r25, r1
     ace:	d1 f0       	breq	.+52     	; 0xb04 <DIO_voidSetPortValue+0x5e>
     ad0:	2c 81       	ldd	r18, Y+4	; 0x04
     ad2:	3d 81       	ldd	r19, Y+5	; 0x05
     ad4:	22 30       	cpi	r18, 0x02	; 2
     ad6:	31 05       	cpc	r19, r1
     ad8:	2c f4       	brge	.+10     	; 0xae4 <DIO_voidSetPortValue+0x3e>
     ada:	8c 81       	ldd	r24, Y+4	; 0x04
     adc:	9d 81       	ldd	r25, Y+5	; 0x05
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	61 f0       	breq	.+24     	; 0xafa <DIO_voidSetPortValue+0x54>
     ae2:	1f c0       	rjmp	.+62     	; 0xb22 <DIO_voidSetPortValue+0x7c>
     ae4:	2c 81       	ldd	r18, Y+4	; 0x04
     ae6:	3d 81       	ldd	r19, Y+5	; 0x05
     ae8:	22 30       	cpi	r18, 0x02	; 2
     aea:	31 05       	cpc	r19, r1
     aec:	81 f0       	breq	.+32     	; 0xb0e <DIO_voidSetPortValue+0x68>
     aee:	8c 81       	ldd	r24, Y+4	; 0x04
     af0:	9d 81       	ldd	r25, Y+5	; 0x05
     af2:	83 30       	cpi	r24, 0x03	; 3
     af4:	91 05       	cpc	r25, r1
     af6:	81 f0       	breq	.+32     	; 0xb18 <DIO_voidSetPortValue+0x72>
     af8:	14 c0       	rjmp	.+40     	; 0xb22 <DIO_voidSetPortValue+0x7c>
    {
    case PORT_A:
        PORTA = EN_Value;
     afa:	eb e3       	ldi	r30, 0x3B	; 59
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	80 83       	st	Z, r24
     b02:	11 c0       	rjmp	.+34     	; 0xb26 <DIO_voidSetPortValue+0x80>
        break;
    case PORT_B:
        PORTB = EN_Value;
     b04:	e8 e3       	ldi	r30, 0x38	; 56
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	8b 81       	ldd	r24, Y+3	; 0x03
     b0a:	80 83       	st	Z, r24
     b0c:	0c c0       	rjmp	.+24     	; 0xb26 <DIO_voidSetPortValue+0x80>
        break;
    case PORT_C:
        PORTC = EN_Value;
     b0e:	e5 e3       	ldi	r30, 0x35	; 53
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	8b 81       	ldd	r24, Y+3	; 0x03
     b14:	80 83       	st	Z, r24
     b16:	07 c0       	rjmp	.+14     	; 0xb26 <DIO_voidSetPortValue+0x80>
        break;
    case PORT_D:
        PORTD = EN_Value;
     b18:	e2 e3       	ldi	r30, 0x32	; 50
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	80 83       	st	Z, r24
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <DIO_voidSetPortValue+0x80>
        break;
    default:
        state = E_DIOPORT;
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
     b26:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPortValue */
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	cf 91       	pop	r28
     b34:	df 91       	pop	r29
     b36:	08 95       	ret

00000b38 <DIO_voidSetPortDirection>:
 * @param EN_Port PORT Name
 * @param EN_Direction PORT Direction
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_voidSetPortDirection+0x6>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <DIO_voidSetPortDirection+0x8>
     b40:	0f 92       	push	r0
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	8a 83       	std	Y+2, r24	; 0x02
     b48:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
     b4a:	84 e0       	ldi	r24, 0x04	; 4
     b4c:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
     b4e:	8a 81       	ldd	r24, Y+2	; 0x02
     b50:	28 2f       	mov	r18, r24
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	3d 83       	std	Y+5, r19	; 0x05
     b56:	2c 83       	std	Y+4, r18	; 0x04
     b58:	8c 81       	ldd	r24, Y+4	; 0x04
     b5a:	9d 81       	ldd	r25, Y+5	; 0x05
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	91 05       	cpc	r25, r1
     b60:	d1 f0       	breq	.+52     	; 0xb96 <DIO_voidSetPortDirection+0x5e>
     b62:	2c 81       	ldd	r18, Y+4	; 0x04
     b64:	3d 81       	ldd	r19, Y+5	; 0x05
     b66:	22 30       	cpi	r18, 0x02	; 2
     b68:	31 05       	cpc	r19, r1
     b6a:	2c f4       	brge	.+10     	; 0xb76 <DIO_voidSetPortDirection+0x3e>
     b6c:	8c 81       	ldd	r24, Y+4	; 0x04
     b6e:	9d 81       	ldd	r25, Y+5	; 0x05
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	61 f0       	breq	.+24     	; 0xb8c <DIO_voidSetPortDirection+0x54>
     b74:	1f c0       	rjmp	.+62     	; 0xbb4 <DIO_voidSetPortDirection+0x7c>
     b76:	2c 81       	ldd	r18, Y+4	; 0x04
     b78:	3d 81       	ldd	r19, Y+5	; 0x05
     b7a:	22 30       	cpi	r18, 0x02	; 2
     b7c:	31 05       	cpc	r19, r1
     b7e:	81 f0       	breq	.+32     	; 0xba0 <DIO_voidSetPortDirection+0x68>
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	9d 81       	ldd	r25, Y+5	; 0x05
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	91 05       	cpc	r25, r1
     b88:	81 f0       	breq	.+32     	; 0xbaa <DIO_voidSetPortDirection+0x72>
     b8a:	14 c0       	rjmp	.+40     	; 0xbb4 <DIO_voidSetPortDirection+0x7c>
    {
    case PORT_A:
        DDRA = EN_Direction;
     b8c:	ea e3       	ldi	r30, 0x3A	; 58
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	80 83       	st	Z, r24
     b94:	11 c0       	rjmp	.+34     	; 0xbb8 <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_B:
        DDRB = EN_Direction;
     b96:	e7 e3       	ldi	r30, 0x37	; 55
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	80 83       	st	Z, r24
     b9e:	0c c0       	rjmp	.+24     	; 0xbb8 <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_C:
        DDRC = EN_Direction;
     ba0:	e4 e3       	ldi	r30, 0x34	; 52
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	80 83       	st	Z, r24
     ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <DIO_voidSetPortDirection+0x80>
        break;
    case PORT_D:
        DDRD = EN_Direction;
     baa:	e1 e3       	ldi	r30, 0x31	; 49
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	80 83       	st	Z, r24
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <DIO_voidSetPortDirection+0x80>
        break;
    default:
        state = E_DIOPORT;
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
     bb8:	89 81       	ldd	r24, Y+1	; 0x01

} /* DIO_voidSetPortDirection */
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <DIO_voidInpullUp>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_DIOERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <DIO_voidInpullUp+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <DIO_voidInpullUp+0x8>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	8a 83       	std	Y+2, r24	; 0x02
     bda:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIOERRORSTATE_t state;
    state = E_DIOOK;
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	3d 83       	std	Y+5, r19	; 0x05
     be8:	2c 83       	std	Y+4, r18	; 0x04
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	9d 81       	ldd	r25, Y+5	; 0x05
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	91 05       	cpc	r25, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <DIO_voidInpullUp+0x2c>
     bf4:	3e c0       	rjmp	.+124    	; 0xc72 <DIO_voidInpullUp+0xa8>
     bf6:	2c 81       	ldd	r18, Y+4	; 0x04
     bf8:	3d 81       	ldd	r19, Y+5	; 0x05
     bfa:	22 30       	cpi	r18, 0x02	; 2
     bfc:	31 05       	cpc	r19, r1
     bfe:	2c f4       	brge	.+10     	; 0xc0a <DIO_voidInpullUp+0x40>
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	9d 81       	ldd	r25, Y+5	; 0x05
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	71 f0       	breq	.+28     	; 0xc24 <DIO_voidInpullUp+0x5a>
     c08:	a9 c0       	rjmp	.+338    	; 0xd5c <DIO_voidInpullUp+0x192>
     c0a:	2c 81       	ldd	r18, Y+4	; 0x04
     c0c:	3d 81       	ldd	r19, Y+5	; 0x05
     c0e:	22 30       	cpi	r18, 0x02	; 2
     c10:	31 05       	cpc	r19, r1
     c12:	09 f4       	brne	.+2      	; 0xc16 <DIO_voidInpullUp+0x4c>
     c14:	55 c0       	rjmp	.+170    	; 0xcc0 <DIO_voidInpullUp+0xf6>
     c16:	8c 81       	ldd	r24, Y+4	; 0x04
     c18:	9d 81       	ldd	r25, Y+5	; 0x05
     c1a:	83 30       	cpi	r24, 0x03	; 3
     c1c:	91 05       	cpc	r25, r1
     c1e:	09 f4       	brne	.+2      	; 0xc22 <DIO_voidInpullUp+0x58>
     c20:	76 c0       	rjmp	.+236    	; 0xd0e <DIO_voidInpullUp+0x144>
     c22:	9c c0       	rjmp	.+312    	; 0xd5c <DIO_voidInpullUp+0x192>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
     c24:	aa e3       	ldi	r26, 0x3A	; 58
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	ea e3       	ldi	r30, 0x3A	; 58
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_voidInpullUp+0x76>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	2a 95       	dec	r18
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_voidInpullUp+0x72>
     c44:	80 95       	com	r24
     c46:	84 23       	and	r24, r20
     c48:	8c 93       	st	X, r24
        SETBIT(PORTA, EN_Pin);
     c4a:	ab e3       	ldi	r26, 0x3B	; 59
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	eb e3       	ldi	r30, 0x3B	; 59
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <DIO_voidInpullUp+0x9e>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <DIO_voidInpullUp+0x9a>
     c6c:	84 2b       	or	r24, r20
     c6e:	8c 93       	st	X, r24
     c70:	77 c0       	rjmp	.+238    	; 0xd60 <DIO_voidInpullUp+0x196>
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
     c72:	a7 e3       	ldi	r26, 0x37	; 55
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e7 e3       	ldi	r30, 0x37	; 55
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <DIO_voidInpullUp+0xc4>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	2a 95       	dec	r18
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <DIO_voidInpullUp+0xc0>
     c92:	80 95       	com	r24
     c94:	84 23       	and	r24, r20
     c96:	8c 93       	st	X, r24
        SETBIT(PORTB, EN_Pin);
     c98:	a8 e3       	ldi	r26, 0x38	; 56
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e8 e3       	ldi	r30, 0x38	; 56
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	48 2f       	mov	r20, r24
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 2e       	mov	r0, r18
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <DIO_voidInpullUp+0xec>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <DIO_voidInpullUp+0xe8>
     cba:	84 2b       	or	r24, r20
     cbc:	8c 93       	st	X, r24
     cbe:	50 c0       	rjmp	.+160    	; 0xd60 <DIO_voidInpullUp+0x196>
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
     cc0:	a4 e3       	ldi	r26, 0x34	; 52
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e4 e3       	ldi	r30, 0x34	; 52
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	48 2f       	mov	r20, r24
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_voidInpullUp+0x112>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	2a 95       	dec	r18
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_voidInpullUp+0x10e>
     ce0:	80 95       	com	r24
     ce2:	84 23       	and	r24, r20
     ce4:	8c 93       	st	X, r24
        SETBIT(PORTC, EN_Pin);
     ce6:	a5 e3       	ldi	r26, 0x35	; 53
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e5 e3       	ldi	r30, 0x35	; 53
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_voidInpullUp+0x13a>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_voidInpullUp+0x136>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	29 c0       	rjmp	.+82     	; 0xd60 <DIO_voidInpullUp+0x196>
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
     d0e:	a1 e3       	ldi	r26, 0x31	; 49
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e1 e3       	ldi	r30, 0x31	; 49
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_voidInpullUp+0x160>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	2a 95       	dec	r18
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_voidInpullUp+0x15c>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
        SETBIT(PORTD, EN_Pin);
     d34:	a2 e3       	ldi	r26, 0x32	; 50
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e2 e3       	ldi	r30, 0x32	; 50
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_voidInpullUp+0x188>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_voidInpullUp+0x184>
     d56:	84 2b       	or	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_voidInpullUp+0x196>
        break;
    default:
        state = E_DIOPORT;
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return state;
     d60:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidInpullUp */
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <main>:

uint8_t change_stringToBin(uint8_t*str);
void eeprom_recieve_string(uint8_t *str);
void eeprom_send_string(uint8_t *str);

int main(void){
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	c5 56       	subi	r28, 0x65	; 101
     d7c:	d0 40       	sbci	r29, 0x00	; 0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[100];

	uint8_t value;
	I2C_MasterInit();
     d88:	0e 94 46 01 	call	0x28c	; 0x28c <I2C_MasterInit>

		//I2C_MasterStart();
		UART_Init(9600);
     d8c:	60 e8       	ldi	r22, 0x80	; 128
     d8e:	75 e2       	ldi	r23, 0x25	; 37
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
		 DIO_voidSetPortValue(PORT_D,value);
		 I2C_MasterStop();*/

		while(1){

			UART_Transmite_String("\r\n you want write or read operation");
     d98:	80 e6       	ldi	r24, 0x60	; 96
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Transmite_String>
			 UART_Recive_String(data);
     da0:	ce 01       	movw	r24, r28
     da2:	02 96       	adiw	r24, 0x02	; 2
     da4:	0e 94 00 01 	call	0x200	; 0x200 <UART_Recive_String>
				UART_Transmite_String("\r\n enter the address ");
     da8:	84 e8       	ldi	r24, 0x84	; 132
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Transmite_String>
				 UART_Recive_String(add);
     db0:	8a ed       	ldi	r24, 0xDA	; 218
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 00 01 	call	0x200	; 0x200 <UART_Recive_String>
				value= change_stringToBin(add);
     db8:	8a ed       	ldi	r24, 0xDA	; 218
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 79 07 	call	0xef2	; 0xef2 <change_stringToBin>
     dc0:	89 83       	std	Y+1, r24	; 0x01
			value=check(data,value);
     dc2:	ce 01       	movw	r24, r28
     dc4:	02 96       	adiw	r24, 0x02	; 2
     dc6:	69 81       	ldd	r22, Y+1	; 0x01
     dc8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <check>
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	e4 cf       	rjmp	.-56     	; 0xd98 <main+0x26>

00000dd0 <check>:

}



uint8_t check(uint8_t *str,uint8_t address){
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <check+0x6>
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <check+0x8>
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	9b 83       	std	Y+3, r25	; 0x03
     dde:	8a 83       	std	Y+2, r24	; 0x02
     de0:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t value;

	if(str[0]=='w'){
     de2:	ea 81       	ldd	r30, Y+2	; 0x02
     de4:	fb 81       	ldd	r31, Y+3	; 0x03
     de6:	80 81       	ld	r24, Z
     de8:	87 37       	cpi	r24, 0x77	; 119
     dea:	49 f4       	brne	.+18     	; 0xdfe <check+0x2e>
		UART_Transmite_String("\r\n you want write operation");
     dec:	8a e9       	ldi	r24, 0x9A	; 154
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Transmite_String>
		/*I2C_MasterStart();
		I2C_SendSlaveAddressWithWrite(0b01010000);
				I2C_WriteDataByte(0b00000001);
				 I2C_WriteDataByte('c');
				 I2C_MasterStop();*/
		eeprom_send_string("11234");
     df4:	86 eb       	ldi	r24, 0xB6	; 182
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 14 07 	call	0xe28	; 0xe28 <eeprom_send_string>
     dfc:	0d c0       	rjmp	.+26     	; 0xe18 <check+0x48>
	}
	else if(str[0]=='r'){
     dfe:	ea 81       	ldd	r30, Y+2	; 0x02
     e00:	fb 81       	ldd	r31, Y+3	; 0x03
     e02:	80 81       	ld	r24, Z
     e04:	82 37       	cpi	r24, 0x72	; 114
     e06:	41 f4       	brne	.+16     	; 0xe18 <check+0x48>
		UART_Transmite_String("\r\n you want  read operation");
     e08:	8c eb       	ldi	r24, 0xBC	; 188
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Transmite_String>

		eeprom_recieve_string(add);
     e10:	8a ed       	ldi	r24, 0xDA	; 218
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 49 07 	call	0xe92	; 0xe92 <eeprom_recieve_string>
			 I2C_MasterStop();
			UART_Transmite(value);*/

	}

return value;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <eeprom_send_string>:
void eeprom_send_string(uint8_t *str){
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <eeprom_send_string+0x6>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <eeprom_send_string+0x8>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	9c 83       	std	Y+4, r25	; 0x04
     e36:	8b 83       	std	Y+3, r24	; 0x03
	    I2C_voidSendStopCondition();

	    return Local_enuState;
	}
*/
	uint8_t i=0,value;
     e38:	1a 82       	std	Y+2, r1	; 0x02
				I2C_MasterStart();
     e3a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <I2C_MasterStart>
				I2C_SendSlaveAddressWithWrite(0b01010000);
     e3e:	80 e5       	ldi	r24, 0x50	; 80
     e40:	0e 94 a3 01 	call	0x346	; 0x346 <I2C_SendSlaveAddressWithWrite>
				I2C_WriteDataByte(0b00000001);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	0e 94 f5 01 	call	0x3ea	; 0x3ea <I2C_WriteDataByte>
     e4a:	0f c0       	rjmp	.+30     	; 0xe6a <eeprom_send_string+0x42>
			    while (str[i] != '\0')
			    {
			    	I2C_WriteDataByte(str[i] - '0');
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	9c 81       	ldd	r25, Y+4	; 0x04
     e56:	fc 01       	movw	r30, r24
     e58:	e2 0f       	add	r30, r18
     e5a:	f3 1f       	adc	r31, r19
     e5c:	80 81       	ld	r24, Z
     e5e:	80 53       	subi	r24, 0x30	; 48
     e60:	0e 94 f5 01 	call	0x3ea	; 0x3ea <I2C_WriteDataByte>
			        i++;
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	8a 83       	std	Y+2, r24	; 0x02
*/
	uint8_t i=0,value;
				I2C_MasterStart();
				I2C_SendSlaveAddressWithWrite(0b01010000);
				I2C_WriteDataByte(0b00000001);
			    while (str[i] != '\0')
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	fc 01       	movw	r30, r24
     e76:	e2 0f       	add	r30, r18
     e78:	f3 1f       	adc	r31, r19
     e7a:	80 81       	ld	r24, Z
     e7c:	88 23       	and	r24, r24
     e7e:	31 f7       	brne	.-52     	; 0xe4c <eeprom_send_string+0x24>
			    {
			    	I2C_WriteDataByte(str[i] - '0');
			        i++;
			    }
				 I2C_MasterStop();
     e80:	0e 94 29 02 	call	0x452	; 0x452 <I2C_MasterStop>

}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <eeprom_recieve_string>:
void eeprom_recieve_string(uint8_t *str){
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	00 d0       	rcall	.+0      	; 0xe98 <eeprom_recieve_string+0x6>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <eeprom_recieve_string+0x8>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t i=0,value;
     ea2:	1a 82       	std	Y+2, r1	; 0x02
				I2C_MasterStart();
     ea4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <I2C_MasterStart>
				I2C_SendSlaveAddressWithWrite(0b01010000);
     ea8:	80 e5       	ldi	r24, 0x50	; 80
     eaa:	0e 94 a3 01 	call	0x346	; 0x346 <I2C_SendSlaveAddressWithWrite>
				I2C_WriteDataByte(0b00000001);
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <I2C_WriteDataByte>
     eb4:	14 c0       	rjmp	.+40     	; 0xede <eeprom_recieve_string+0x4c>

			while(i != 4){
				I2C_MasterStart();
     eb6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <I2C_MasterStart>
				I2C_SendSlaveAddressWithRead(0b01010000);
     eba:	80 e5       	ldi	r24, 0x50	; 80
     ebc:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_SendSlaveAddressWithRead>
				 value= I2C_ReadDataByte();
     ec0:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_ReadDataByte>
     ec4:	89 83       	std	Y+1, r24	; 0x01
				UART_Transmite_String("\r");
     ec6:	88 ed       	ldi	r24, 0xD8	; 216
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Transmite_String>


				 I2C_MasterStop();
     ece:	0e 94 29 02 	call	0x452	; 0x452 <I2C_MasterStop>
				UART_Transmite(value);
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	0e 94 bd 00 	call	0x17a	; 0x17a <UART_Transmite>
					i++;
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	8f 5f       	subi	r24, 0xFF	; 255
     edc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0,value;
				I2C_MasterStart();
				I2C_SendSlaveAddressWithWrite(0b01010000);
				I2C_WriteDataByte(0b00000001);

			while(i != 4){
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	84 30       	cpi	r24, 0x04	; 4
     ee2:	49 f7       	brne	.-46     	; 0xeb6 <eeprom_recieve_string+0x24>
					i++;
			}



}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <change_stringToBin>:

uint8_t change_stringToBin(uint8_t*str){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	2d 97       	sbiw	r28, 0x0d	; 13
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	9d 87       	std	Y+13, r25	; 0x0d
     f08:	8c 87       	std	Y+12, r24	; 0x0c
	uint32_t num=0;
     f0a:	18 86       	std	Y+8, r1	; 0x08
     f0c:	19 86       	std	Y+9, r1	; 0x09
     f0e:	1a 86       	std	Y+10, r1	; 0x0a
     f10:	1b 86       	std	Y+11, r1	; 0x0b
	uint32_t bin=0;
     f12:	1c 82       	std	Y+4, r1	; 0x04
     f14:	1d 82       	std	Y+5, r1	; 0x05
     f16:	1e 82       	std	Y+6, r1	; 0x06
     f18:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t temp=0;
     f1a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t weight=1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	8a 83       	std	Y+2, r24	; 0x02

	for (uint8_t i = 0 ; i<8 ; i++)
     f20:	19 82       	std	Y+1, r1	; 0x01
     f22:	29 c0       	rjmp	.+82     	; 0xf76 <change_stringToBin+0x84>
	    {
		num = num * 10 + str[i] - '0';
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	99 85       	ldd	r25, Y+9	; 0x09
     f28:	aa 85       	ldd	r26, Y+10	; 0x0a
     f2a:	bb 85       	ldd	r27, Y+11	; 0x0b
     f2c:	2a e0       	ldi	r18, 0x0A	; 10
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 18 08 	call	0x1030	; 0x1030 <__mulsi3>
     f3c:	ab 01       	movw	r20, r22
     f3e:	bc 01       	movw	r22, r24
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	8c 85       	ldd	r24, Y+12	; 0x0c
     f48:	9d 85       	ldd	r25, Y+13	; 0x0d
     f4a:	fc 01       	movw	r30, r24
     f4c:	e2 0f       	add	r30, r18
     f4e:	f3 1f       	adc	r31, r19
     f50:	80 81       	ld	r24, Z
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a0 e0       	ldi	r26, 0x00	; 0
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	84 0f       	add	r24, r20
     f5c:	95 1f       	adc	r25, r21
     f5e:	a6 1f       	adc	r26, r22
     f60:	b7 1f       	adc	r27, r23
     f62:	c0 97       	sbiw	r24, 0x30	; 48
     f64:	a1 09       	sbc	r26, r1
     f66:	b1 09       	sbc	r27, r1
     f68:	88 87       	std	Y+8, r24	; 0x08
     f6a:	99 87       	std	Y+9, r25	; 0x09
     f6c:	aa 87       	std	Y+10, r26	; 0x0a
     f6e:	bb 87       	std	Y+11, r27	; 0x0b
	uint32_t num=0;
	uint32_t bin=0;
	uint8_t temp=0;
	uint8_t weight=1;

	for (uint8_t i = 0 ; i<8 ; i++)
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	88 30       	cpi	r24, 0x08	; 8
     f7a:	a0 f2       	brcs	.-88     	; 0xf24 <change_stringToBin+0x32>
     f7c:	46 c0       	rjmp	.+140    	; 0x100a <change_stringToBin+0x118>
		num = num * 10 + str[i] - '0';
	    }


	while(num>0){
		temp=num%10;
     f7e:	88 85       	ldd	r24, Y+8	; 0x08
     f80:	99 85       	ldd	r25, Y+9	; 0x09
     f82:	aa 85       	ldd	r26, Y+10	; 0x0a
     f84:	bb 85       	ldd	r27, Y+11	; 0x0b
     f86:	2a e0       	ldi	r18, 0x0A	; 10
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	bc 01       	movw	r22, r24
     f90:	cd 01       	movw	r24, r26
     f92:	0e 94 37 08 	call	0x106e	; 0x106e <__udivmodsi4>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	8b 83       	std	Y+3, r24	; 0x03
		num=num/10;
     f9c:	88 85       	ldd	r24, Y+8	; 0x08
     f9e:	99 85       	ldd	r25, Y+9	; 0x09
     fa0:	aa 85       	ldd	r26, Y+10	; 0x0a
     fa2:	bb 85       	ldd	r27, Y+11	; 0x0b
     fa4:	2a e0       	ldi	r18, 0x0A	; 10
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	0e 94 37 08 	call	0x106e	; 0x106e <__udivmodsi4>
     fb4:	da 01       	movw	r26, r20
     fb6:	c9 01       	movw	r24, r18
     fb8:	88 87       	std	Y+8, r24	; 0x08
     fba:	99 87       	std	Y+9, r25	; 0x09
     fbc:	aa 87       	std	Y+10, r26	; 0x0a
     fbe:	bb 87       	std	Y+11, r27	; 0x0b
		bin=bin+temp*weight;
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	ac 01       	movw	r20, r24
     fce:	24 9f       	mul	r18, r20
     fd0:	c0 01       	movw	r24, r0
     fd2:	25 9f       	mul	r18, r21
     fd4:	90 0d       	add	r25, r0
     fd6:	34 9f       	mul	r19, r20
     fd8:	90 0d       	add	r25, r0
     fda:	11 24       	eor	r1, r1
     fdc:	9c 01       	movw	r18, r24
     fde:	44 27       	eor	r20, r20
     fe0:	37 fd       	sbrc	r19, 7
     fe2:	40 95       	com	r20
     fe4:	54 2f       	mov	r21, r20
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	ae 81       	ldd	r26, Y+6	; 0x06
     fec:	bf 81       	ldd	r27, Y+7	; 0x07
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	a4 1f       	adc	r26, r20
     ff4:	b5 1f       	adc	r27, r21
     ff6:	8c 83       	std	Y+4, r24	; 0x04
     ff8:	9d 83       	std	Y+5, r25	; 0x05
     ffa:	ae 83       	std	Y+6, r26	; 0x06
     ffc:	bf 83       	std	Y+7, r27	; 0x07
		weight*=2;
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	8a 83       	std	Y+2, r24	; 0x02
	    {
		num = num * 10 + str[i] - '0';
	    }


	while(num>0){
    100a:	88 85       	ldd	r24, Y+8	; 0x08
    100c:	99 85       	ldd	r25, Y+9	; 0x09
    100e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1010:	bb 85       	ldd	r27, Y+11	; 0x0b
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	a1 05       	cpc	r26, r1
    1016:	b1 05       	cpc	r27, r1
    1018:	09 f0       	breq	.+2      	; 0x101c <change_stringToBin+0x12a>
    101a:	b1 cf       	rjmp	.-158    	; 0xf7e <change_stringToBin+0x8c>
		temp=num%10;
		num=num/10;
		bin=bin+temp*weight;
		weight*=2;
	}
return bin;
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    101e:	2d 96       	adiw	r28, 0x0d	; 13
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <__mulsi3>:
    1030:	62 9f       	mul	r22, r18
    1032:	d0 01       	movw	r26, r0
    1034:	73 9f       	mul	r23, r19
    1036:	f0 01       	movw	r30, r0
    1038:	82 9f       	mul	r24, r18
    103a:	e0 0d       	add	r30, r0
    103c:	f1 1d       	adc	r31, r1
    103e:	64 9f       	mul	r22, r20
    1040:	e0 0d       	add	r30, r0
    1042:	f1 1d       	adc	r31, r1
    1044:	92 9f       	mul	r25, r18
    1046:	f0 0d       	add	r31, r0
    1048:	83 9f       	mul	r24, r19
    104a:	f0 0d       	add	r31, r0
    104c:	74 9f       	mul	r23, r20
    104e:	f0 0d       	add	r31, r0
    1050:	65 9f       	mul	r22, r21
    1052:	f0 0d       	add	r31, r0
    1054:	99 27       	eor	r25, r25
    1056:	72 9f       	mul	r23, r18
    1058:	b0 0d       	add	r27, r0
    105a:	e1 1d       	adc	r30, r1
    105c:	f9 1f       	adc	r31, r25
    105e:	63 9f       	mul	r22, r19
    1060:	b0 0d       	add	r27, r0
    1062:	e1 1d       	adc	r30, r1
    1064:	f9 1f       	adc	r31, r25
    1066:	bd 01       	movw	r22, r26
    1068:	cf 01       	movw	r24, r30
    106a:	11 24       	eor	r1, r1
    106c:	08 95       	ret

0000106e <__udivmodsi4>:
    106e:	a1 e2       	ldi	r26, 0x21	; 33
    1070:	1a 2e       	mov	r1, r26
    1072:	aa 1b       	sub	r26, r26
    1074:	bb 1b       	sub	r27, r27
    1076:	fd 01       	movw	r30, r26
    1078:	0d c0       	rjmp	.+26     	; 0x1094 <__udivmodsi4_ep>

0000107a <__udivmodsi4_loop>:
    107a:	aa 1f       	adc	r26, r26
    107c:	bb 1f       	adc	r27, r27
    107e:	ee 1f       	adc	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	a2 17       	cp	r26, r18
    1084:	b3 07       	cpc	r27, r19
    1086:	e4 07       	cpc	r30, r20
    1088:	f5 07       	cpc	r31, r21
    108a:	20 f0       	brcs	.+8      	; 0x1094 <__udivmodsi4_ep>
    108c:	a2 1b       	sub	r26, r18
    108e:	b3 0b       	sbc	r27, r19
    1090:	e4 0b       	sbc	r30, r20
    1092:	f5 0b       	sbc	r31, r21

00001094 <__udivmodsi4_ep>:
    1094:	66 1f       	adc	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	1a 94       	dec	r1
    109e:	69 f7       	brne	.-38     	; 0x107a <__udivmodsi4_loop>
    10a0:	60 95       	com	r22
    10a2:	70 95       	com	r23
    10a4:	80 95       	com	r24
    10a6:	90 95       	com	r25
    10a8:	9b 01       	movw	r18, r22
    10aa:	ac 01       	movw	r20, r24
    10ac:	bd 01       	movw	r22, r26
    10ae:	cf 01       	movw	r24, r30
    10b0:	08 95       	ret

000010b2 <_exit>:
    10b2:	f8 94       	cli

000010b4 <__stop_program>:
    10b4:	ff cf       	rjmp	.-2      	; 0x10b4 <__stop_program>
